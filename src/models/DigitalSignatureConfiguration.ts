/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.106
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface DigitalSignatureConfiguration
 */
export interface DigitalSignatureConfiguration {
    /**
     * Whether users can draw their signature
     * @type {boolean}
     * @memberof DigitalSignatureConfiguration
     */
    allowDrawing?: boolean;
    /**
     * Whether users can upload an image of their signature
     * @type {boolean}
     * @memberof DigitalSignatureConfiguration
     */
    allowUpload?: boolean;
    /**
     * Whether users can type their signature
     * @type {boolean}
     * @memberof DigitalSignatureConfiguration
     */
    allowTyping?: boolean;
    /**
     * Maximum file size for uploaded signatures in bytes (default is 5MB, cannot be more than 10MB)
     * @type {number}
     * @memberof DigitalSignatureConfiguration
     */
    maxFileSize?: number;
}

/**
 * Check if a given object implements the DigitalSignatureConfiguration interface.
 */
export function instanceOfDigitalSignatureConfiguration(value: object): value is DigitalSignatureConfiguration {
    return true;
}

export function DigitalSignatureConfigurationFromJSON(json: any): DigitalSignatureConfiguration {
    return DigitalSignatureConfigurationFromJSONTyped(json, false);
}

export function DigitalSignatureConfigurationFromJSONTyped(json: any, ignoreDiscriminator: boolean): DigitalSignatureConfiguration {
    if (json == null) {
        return json;
    }
    return {
        
        'allowDrawing': json['allow_drawing'] == null ? undefined : json['allow_drawing'],
        'allowUpload': json['allow_upload'] == null ? undefined : json['allow_upload'],
        'allowTyping': json['allow_typing'] == null ? undefined : json['allow_typing'],
        'maxFileSize': json['max_file_size'] == null ? undefined : json['max_file_size'],
    };
}

export function DigitalSignatureConfigurationToJSON(json: any): DigitalSignatureConfiguration {
    return DigitalSignatureConfigurationToJSONTyped(json, false);
}

export function DigitalSignatureConfigurationToJSONTyped(value?: DigitalSignatureConfiguration | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'allow_drawing': value['allowDrawing'],
        'allow_upload': value['allowUpload'],
        'allow_typing': value['allowTyping'],
        'max_file_size': value['maxFileSize'],
    };
}

