/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.87
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CurrencyEnum } from './CurrencyEnum';
import {
    CurrencyEnumFromJSON,
    CurrencyEnumFromJSONTyped,
    CurrencyEnumToJSON,
    CurrencyEnumToJSONTyped,
} from './CurrencyEnum';

/**
 * 
 * @export
 * @interface TicketType
 */
export interface TicketType {
    /**
     * 
     * @type {number}
     * @memberof TicketType
     */
    readonly id: number;
    /**
     * 
     * @type {Date}
     * @memberof TicketType
     */
    readonly createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof TicketType
     */
    readonly updatedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof TicketType
     */
    readonly archiveAt: Date | null;
    /**
     * Name of the ticket type, e.g., General Admission, VIP, etc.
     * @type {string}
     * @memberof TicketType
     */
    externalName: string;
    /**
     * Internal name for the ticket type, used for system references.
     * @type {string}
     * @memberof TicketType
     */
    internalName: string;
    /**
     * Description of the ticket type, if any.
     * @type {string}
     * @memberof TicketType
     */
    description?: string;
    /**
     * Price of the ticket type.
     * @type {string}
     * @memberof TicketType
     */
    price: string;
    /**
     * Currency for the ticket price, e.g. AUD, USD, EUR, etc.
     * 
     * * `AUD` - AUD - Australian Dollar
     * * `CAD` - CAD - Canadian Dollar
     * * `EUR` - EUR - Euro
     * * `GBP` - GBP - British Pound
     * * `JPY` - JPY - Japanese Yen
     * * `NZD` - NZD - New Zealand Dollar
     * * `USD` - USD - United States Dollar
     * @type {CurrencyEnum}
     * @memberof TicketType
     */
    currency?: CurrencyEnum;
    /**
     * Maximum number of tickets available for this type. null means unlimited. 0 means no tickets available.
     * @type {number}
     * @memberof TicketType
     */
    limit?: number | null;
    /**
     * Sort order for displaying ticket types, lower numbers appear first.
     * @type {number}
     * @memberof TicketType
     */
    sortOrder?: number;
    /**
     * 
     * @type {number}
     * @memberof TicketType
     */
    readonly tenant: number;
    /**
     * 
     * @type {number}
     * @memberof TicketType
     */
    readonly createdBy: number | null;
    /**
     * 
     * @type {number}
     * @memberof TicketType
     */
    readonly updatedBy: number | null;
    /**
     * The production venue this ticket type belongs to.
     * @type {number}
     * @memberof TicketType
     */
    readonly productionVenue: number;
}



/**
 * Check if a given object implements the TicketType interface.
 */
export function instanceOfTicketType(value: object): value is TicketType {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('archiveAt' in value) || value['archiveAt'] === undefined) return false;
    if (!('externalName' in value) || value['externalName'] === undefined) return false;
    if (!('internalName' in value) || value['internalName'] === undefined) return false;
    if (!('price' in value) || value['price'] === undefined) return false;
    if (!('tenant' in value) || value['tenant'] === undefined) return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined) return false;
    if (!('updatedBy' in value) || value['updatedBy'] === undefined) return false;
    if (!('productionVenue' in value) || value['productionVenue'] === undefined) return false;
    return true;
}

export function TicketTypeFromJSON(json: any): TicketType {
    return TicketTypeFromJSONTyped(json, false);
}

export function TicketTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): TicketType {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'archiveAt': (json['archive_at'] == null ? null : new Date(json['archive_at'])),
        'externalName': json['external_name'],
        'internalName': json['internal_name'],
        'description': json['description'] == null ? undefined : json['description'],
        'price': json['price'],
        'currency': json['currency'] == null ? undefined : CurrencyEnumFromJSON(json['currency']),
        'limit': json['limit'] == null ? undefined : json['limit'],
        'sortOrder': json['sort_order'] == null ? undefined : json['sort_order'],
        'tenant': json['tenant'],
        'createdBy': json['created_by'],
        'updatedBy': json['updated_by'],
        'productionVenue': json['production_venue'],
    };
}

export function TicketTypeToJSON(json: any): TicketType {
    return TicketTypeToJSONTyped(json, false);
}

export function TicketTypeToJSONTyped(value?: Omit<TicketType, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'|'production_venue'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'external_name': value['externalName'],
        'internal_name': value['internalName'],
        'description': value['description'],
        'price': value['price'],
        'currency': CurrencyEnumToJSON(value['currency']),
        'limit': value['limit'],
        'sort_order': value['sortOrder'],
    };
}

