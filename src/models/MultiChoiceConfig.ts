/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.85
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MultiChoiceConfig
 */
export interface MultiChoiceConfig {
    /**
     * List of options for the multiple choice field
     * @type {Array<string>}
     * @memberof MultiChoiceConfig
     */
    options: Array<string>;
    /**
     * Whether multiple selections are allowed
     * @type {boolean}
     * @memberof MultiChoiceConfig
     */
    allowMultiple?: boolean;
    /**
     * Whether an 'Other' option is allowed for custom input
     * @type {boolean}
     * @memberof MultiChoiceConfig
     */
    allowOther?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MultiChoiceConfig
     */
    otherPlaceholder?: string | null;
}

/**
 * Check if a given object implements the MultiChoiceConfig interface.
 */
export function instanceOfMultiChoiceConfig(value: object): value is MultiChoiceConfig {
    if (!('options' in value) || value['options'] === undefined) return false;
    return true;
}

export function MultiChoiceConfigFromJSON(json: any): MultiChoiceConfig {
    return MultiChoiceConfigFromJSONTyped(json, false);
}

export function MultiChoiceConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): MultiChoiceConfig {
    if (json == null) {
        return json;
    }
    return {
        
        'options': json['options'],
        'allowMultiple': json['allow_multiple'] == null ? undefined : json['allow_multiple'],
        'allowOther': json['allow_other'] == null ? undefined : json['allow_other'],
        'otherPlaceholder': json['other_placeholder'] == null ? undefined : json['other_placeholder'],
    };
}

export function MultiChoiceConfigToJSON(json: any): MultiChoiceConfig {
    return MultiChoiceConfigToJSONTyped(json, false);
}

export function MultiChoiceConfigToJSONTyped(value?: MultiChoiceConfig | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'options': value['options'],
        'allow_multiple': value['allowMultiple'],
        'allow_other': value['allowOther'],
        'other_placeholder': value['otherPlaceholder'],
    };
}

