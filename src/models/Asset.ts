/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.96
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AssetTypeEnum } from './AssetTypeEnum';
import {
    AssetTypeEnumFromJSON,
    AssetTypeEnumFromJSONTyped,
    AssetTypeEnumToJSON,
    AssetTypeEnumToJSONTyped,
} from './AssetTypeEnum';
import type { ConditionEnum } from './ConditionEnum';
import {
    ConditionEnumFromJSON,
    ConditionEnumFromJSONTyped,
    ConditionEnumToJSON,
    ConditionEnumToJSONTyped,
} from './ConditionEnum';

/**
 * 
 * @export
 * @interface Asset
 */
export interface Asset {
    /**
     * 
     * @type {number}
     * @memberof Asset
     */
    readonly id: number;
    /**
     * Return True if the asset currently has an active assignment now.
     * 
     * Active means: start_date <= now AND (end_date IS NULL OR end_date >= now)
     * @type {boolean}
     * @memberof Asset
     */
    readonly isAssigned: boolean;
    /**
     * 
     * @type {Date}
     * @memberof Asset
     */
    readonly createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Asset
     */
    readonly updatedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Asset
     */
    readonly archiveAt: Date | null;
    /**
     * Name of the asset
     * @type {string}
     * @memberof Asset
     */
    name: string;
    /**
     * Type of the asset, either company or personal
     * 
     * * `company` - Company Property
     * * `personal` - Personal Property
     * @type {AssetTypeEnum}
     * @memberof Asset
     */
    type?: AssetTypeEnum;
    /**
     * Description of the asset
     * @type {string}
     * @memberof Asset
     */
    description?: string | null;
    /**
     * Additional notes about the asset
     * @type {string}
     * @memberof Asset
     */
    notes?: string | null;
    /**
     * Monetary value of the asset
     * @type {string}
     * @memberof Asset
     */
    value?: string | null;
    /**
     * Condition of the asset
     * 
     * * `new` - New
     * * `good` - Good
     * * `fair` - Fair
     * * `poor` - Poor
     * * `damaged` - Damaged
     * * `out_of_service` - Out of Service
     * @type {ConditionEnum}
     * @memberof Asset
     */
    condition?: ConditionEnum;
    /**
     * 
     * @type {number}
     * @memberof Asset
     */
    readonly tenant: number;
    /**
     * 
     * @type {number}
     * @memberof Asset
     */
    readonly createdBy: number | null;
    /**
     * 
     * @type {number}
     * @memberof Asset
     */
    readonly updatedBy: number | null;
    /**
     * User who owns the asset
     * @type {number}
     * @memberof Asset
     */
    owningUser?: number | null;
}



/**
 * Check if a given object implements the Asset interface.
 */
export function instanceOfAsset(value: object): value is Asset {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('isAssigned' in value) || value['isAssigned'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('archiveAt' in value) || value['archiveAt'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('tenant' in value) || value['tenant'] === undefined) return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined) return false;
    if (!('updatedBy' in value) || value['updatedBy'] === undefined) return false;
    return true;
}

export function AssetFromJSON(json: any): Asset {
    return AssetFromJSONTyped(json, false);
}

export function AssetFromJSONTyped(json: any, ignoreDiscriminator: boolean): Asset {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'isAssigned': json['is_assigned'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'archiveAt': (json['archive_at'] == null ? null : new Date(json['archive_at'])),
        'name': json['name'],
        'type': json['type'] == null ? undefined : AssetTypeEnumFromJSON(json['type']),
        'description': json['description'] == null ? undefined : json['description'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'value': json['value'] == null ? undefined : json['value'],
        'condition': json['condition'] == null ? undefined : ConditionEnumFromJSON(json['condition']),
        'tenant': json['tenant'],
        'createdBy': json['created_by'],
        'updatedBy': json['updated_by'],
        'owningUser': json['owning_user'] == null ? undefined : json['owning_user'],
    };
}

export function AssetToJSON(json: any): Asset {
    return AssetToJSONTyped(json, false);
}

export function AssetToJSONTyped(value?: Omit<Asset, 'id'|'is_assigned'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'type': AssetTypeEnumToJSON(value['type']),
        'description': value['description'],
        'notes': value['notes'],
        'value': value['value'],
        'condition': ConditionEnumToJSON(value['condition']),
        'owning_user': value['owningUser'],
    };
}

