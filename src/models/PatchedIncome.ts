/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.107
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { IncomeStatusEnum } from './IncomeStatusEnum';
import {
    IncomeStatusEnumFromJSON,
    IncomeStatusEnumFromJSONTyped,
    IncomeStatusEnumToJSON,
    IncomeStatusEnumToJSONTyped,
} from './IncomeStatusEnum';
import type { CurrencyEnum } from './CurrencyEnum';
import {
    CurrencyEnumFromJSON,
    CurrencyEnumFromJSONTyped,
    CurrencyEnumToJSON,
    CurrencyEnumToJSONTyped,
} from './CurrencyEnum';
import type { IncomePaymentMethodEnum } from './IncomePaymentMethodEnum';
import {
    IncomePaymentMethodEnumFromJSON,
    IncomePaymentMethodEnumFromJSONTyped,
    IncomePaymentMethodEnumToJSON,
    IncomePaymentMethodEnumToJSONTyped,
} from './IncomePaymentMethodEnum';

/**
 * 
 * @export
 * @interface PatchedIncome
 */
export interface PatchedIncome {
    /**
     * 
     * @type {number}
     * @memberof PatchedIncome
     */
    readonly id?: number;
    /**
     * 
     * @type {Date}
     * @memberof PatchedIncome
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PatchedIncome
     */
    readonly updatedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PatchedIncome
     */
    readonly archiveAt?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedIncome
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedIncome
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedIncome
     */
    amount?: string;
    /**
     * 
     * @type {Date}
     * @memberof PatchedIncome
     */
    incomeDate?: Date;
    /**
     * 
     * @type {IncomeStatusEnum}
     * @memberof PatchedIncome
     */
    status?: IncomeStatusEnum;
    /**
     * 
     * @type {IncomePaymentMethodEnum}
     * @memberof PatchedIncome
     */
    paymentMethod?: IncomePaymentMethodEnum;
    /**
     * 
     * @type {string}
     * @memberof PatchedIncome
     */
    sourceName?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedIncome
     */
    sourceContact?: string;
    /**
     * 
     * @type {CurrencyEnum}
     * @memberof PatchedIncome
     */
    currency?: CurrencyEnum;
    /**
     * 
     * @type {string}
     * @memberof PatchedIncome
     */
    grossAmount?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedIncome
     */
    feesAmount?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedIncome
     */
    taxAmount?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedIncome
     */
    referenceNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedIncome
     */
    notes?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedIncome
     */
    readonly tenant?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedIncome
     */
    readonly createdBy?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedIncome
     */
    readonly updatedBy?: number | null;
    /**
     * The Income Category this income belongs to. Either this or `prod_category` must be set (but not both).
     * @type {number}
     * @memberof PatchedIncome
     */
    category?: number | null;
    /**
     * The Production Income Category this income belongs to (if the income belongs to a production). Either this or `category` must be set (but not both).
     * @type {number}
     * @memberof PatchedIncome
     */
    prodCategory?: number | null;
}



/**
 * Check if a given object implements the PatchedIncome interface.
 */
export function instanceOfPatchedIncome(value: object): value is PatchedIncome {
    return true;
}

export function PatchedIncomeFromJSON(json: any): PatchedIncome {
    return PatchedIncomeFromJSONTyped(json, false);
}

export function PatchedIncomeFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchedIncome {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
        'archiveAt': json['archive_at'] == null ? undefined : (new Date(json['archive_at'])),
        'title': json['title'] == null ? undefined : json['title'],
        'description': json['description'] == null ? undefined : json['description'],
        'amount': json['amount'] == null ? undefined : json['amount'],
        'incomeDate': json['income_date'] == null ? undefined : (new Date(json['income_date'])),
        'status': json['status'] == null ? undefined : IncomeStatusEnumFromJSON(json['status']),
        'paymentMethod': json['payment_method'] == null ? undefined : IncomePaymentMethodEnumFromJSON(json['payment_method']),
        'sourceName': json['source_name'] == null ? undefined : json['source_name'],
        'sourceContact': json['source_contact'] == null ? undefined : json['source_contact'],
        'currency': json['currency'] == null ? undefined : CurrencyEnumFromJSON(json['currency']),
        'grossAmount': json['gross_amount'] == null ? undefined : json['gross_amount'],
        'feesAmount': json['fees_amount'] == null ? undefined : json['fees_amount'],
        'taxAmount': json['tax_amount'] == null ? undefined : json['tax_amount'],
        'referenceNumber': json['reference_number'] == null ? undefined : json['reference_number'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'tenant': json['tenant'] == null ? undefined : json['tenant'],
        'createdBy': json['created_by'] == null ? undefined : json['created_by'],
        'updatedBy': json['updated_by'] == null ? undefined : json['updated_by'],
        'category': json['category'] == null ? undefined : json['category'],
        'prodCategory': json['prod_category'] == null ? undefined : json['prod_category'],
    };
}

export function PatchedIncomeToJSON(json: any): PatchedIncome {
    return PatchedIncomeToJSONTyped(json, false);
}

export function PatchedIncomeToJSONTyped(value?: Omit<PatchedIncome, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'title': value['title'],
        'description': value['description'],
        'amount': value['amount'],
        'income_date': value['incomeDate'] == null ? undefined : ((value['incomeDate']).toISOString().substring(0,10)),
        'status': IncomeStatusEnumToJSON(value['status']),
        'payment_method': IncomePaymentMethodEnumToJSON(value['paymentMethod']),
        'source_name': value['sourceName'],
        'source_contact': value['sourceContact'],
        'currency': CurrencyEnumToJSON(value['currency']),
        'gross_amount': value['grossAmount'],
        'fees_amount': value['feesAmount'],
        'tax_amount': value['taxAmount'],
        'reference_number': value['referenceNumber'],
        'notes': value['notes'],
        'category': value['category'],
        'prod_category': value['prodCategory'],
    };
}

