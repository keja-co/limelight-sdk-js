/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.73
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PatchedSubmission
 */
export interface PatchedSubmission {
    /**
     * 
     * @type {number}
     * @memberof PatchedSubmission
     */
    readonly id?: number;
    /**
     * 
     * @type {Date}
     * @memberof PatchedSubmission
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PatchedSubmission
     */
    readonly updatedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PatchedSubmission
     */
    archiveAt?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof PatchedSubmission
     */
    readonly submittedDateTime?: Date;
    /**
     * 
     * @type {number}
     * @memberof PatchedSubmission
     */
    tenant?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedSubmission
     */
    readonly createdBy?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedSubmission
     */
    updatedBy?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedSubmission
     */
    form?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedSubmission
     */
    member?: number | null;
}

/**
 * Check if a given object implements the PatchedSubmission interface.
 */
export function instanceOfPatchedSubmission(value: object): value is PatchedSubmission {
    return true;
}

export function PatchedSubmissionFromJSON(json: any): PatchedSubmission {
    return PatchedSubmissionFromJSONTyped(json, false);
}

export function PatchedSubmissionFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchedSubmission {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
        'archiveAt': json['archive_at'] == null ? undefined : (new Date(json['archive_at'])),
        'submittedDateTime': json['submitted_date_time'] == null ? undefined : (new Date(json['submitted_date_time'])),
        'tenant': json['tenant'] == null ? undefined : json['tenant'],
        'createdBy': json['created_by'] == null ? undefined : json['created_by'],
        'updatedBy': json['updated_by'] == null ? undefined : json['updated_by'],
        'form': json['form'] == null ? undefined : json['form'],
        'member': json['member'] == null ? undefined : json['member'],
    };
}

export function PatchedSubmissionToJSON(json: any): PatchedSubmission {
    return PatchedSubmissionToJSONTyped(json, false);
}

export function PatchedSubmissionToJSONTyped(value?: Omit<PatchedSubmission, 'id'|'created_at'|'updated_at'|'submitted_date_time'|'created_by'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'archive_at': value['archiveAt'] === null ? null : ((value['archiveAt'] as any)?.toISOString()),
        'tenant': value['tenant'],
        'updated_by': value['updatedBy'],
        'form': value['form'],
        'member': value['member'],
    };
}

