/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.103
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FormFieldConfiguration } from './FormFieldConfiguration';
import {
    FormFieldConfigurationFromJSON,
    FormFieldConfigurationFromJSONTyped,
    FormFieldConfigurationToJSON,
    FormFieldConfigurationToJSONTyped,
} from './FormFieldConfiguration';
import type { FormFieldTypeEnum } from './FormFieldTypeEnum';
import {
    FormFieldTypeEnumFromJSON,
    FormFieldTypeEnumFromJSONTyped,
    FormFieldTypeEnumToJSON,
    FormFieldTypeEnumToJSONTyped,
} from './FormFieldTypeEnum';

/**
 * 
 * @export
 * @interface FormField
 */
export interface FormField {
    /**
     * 
     * @type {number}
     * @memberof FormField
     */
    readonly id: number;
    /**
     * 
     * @type {FormFieldConfiguration}
     * @memberof FormField
     */
    _configuration: FormFieldConfiguration;
    /**
     * 
     * @type {Date}
     * @memberof FormField
     */
    readonly createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof FormField
     */
    readonly updatedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof FormField
     */
    archiveAt?: Date | null;
    /**
     * Order of the field in the form, used for rendering and display.
     * @type {number}
     * @memberof FormField
     */
    order: number;
    /**
     * Type of the form field, determines how it will be rendered and validated.
     * 
     * * `short_text` - Single Line Text
     * * `long_text` - Multiple Line Text
     * * `multi_choice` - Multiple Choice
     * * `number` - Floating Point Number
     * * `decimal_number` - Decimal Number
     * * `info` - Information Display
     * * `file` - File Upload
     * * `slider` - Slider
     * * `date` - Date Picker
     * * `time` - Time Picker
     * * `datetime` - Date and Time Picker
     * * `email` - Email Address
     * * `phone` - Phone Number
     * * `url` - URL
     * * `checkbox` - Single Checkbox
     * * `section_header` - Section Header
     * * `rating` - Star Rating
     * * `signature` - Digital Signature
     * * `external_signature` - External Signature
     * @type {FormFieldTypeEnum}
     * @memberof FormField
     */
    type: FormFieldTypeEnum;
    /**
     * Title of the form field, displayed to users.
     * @type {string}
     * @memberof FormField
     */
    title: string;
    /**
     * Optional description for the field, displayed to users.
     * @type {string}
     * @memberof FormField
     */
    description?: string;
    /**
     * Placeholder text for the field, displayed when the field is empty. Not applicable for all field types.
     * @type {string}
     * @memberof FormField
     */
    placeholder?: string;
    /**
     * Whether this field is required to be filled out by the user. If true, the form cannot be submitted without a value for this field.
     * @type {boolean}
     * @memberof FormField
     */
    isRequired?: boolean;
    /**
     * 
     * @type {number}
     * @memberof FormField
     */
    tenant: number;
    /**
     * 
     * @type {number}
     * @memberof FormField
     */
    createdBy?: number | null;
    /**
     * 
     * @type {number}
     * @memberof FormField
     */
    updatedBy?: number | null;
    /**
     * 
     * @type {number}
     * @memberof FormField
     */
    form: number;
}



/**
 * Check if a given object implements the FormField interface.
 */
export function instanceOfFormField(value: object): value is FormField {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('_configuration' in value) || value['_configuration'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('order' in value) || value['order'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('tenant' in value) || value['tenant'] === undefined) return false;
    if (!('form' in value) || value['form'] === undefined) return false;
    return true;
}

export function FormFieldFromJSON(json: any): FormField {
    return FormFieldFromJSONTyped(json, false);
}

export function FormFieldFromJSONTyped(json: any, ignoreDiscriminator: boolean): FormField {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        '_configuration': FormFieldConfigurationFromJSON(json['configuration']),
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'archiveAt': json['archive_at'] == null ? undefined : (new Date(json['archive_at'])),
        'order': json['order'],
        'type': FormFieldTypeEnumFromJSON(json['type']),
        'title': json['title'],
        'description': json['description'] == null ? undefined : json['description'],
        'placeholder': json['placeholder'] == null ? undefined : json['placeholder'],
        'isRequired': json['is_required'] == null ? undefined : json['is_required'],
        'tenant': json['tenant'],
        'createdBy': json['created_by'] == null ? undefined : json['created_by'],
        'updatedBy': json['updated_by'] == null ? undefined : json['updated_by'],
        'form': json['form'],
    };
}

export function FormFieldToJSON(json: any): FormField {
    return FormFieldToJSONTyped(json, false);
}

export function FormFieldToJSONTyped(value?: Omit<FormField, 'id'|'created_at'|'updated_at'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'configuration': FormFieldConfigurationToJSON(value['_configuration']),
        'archive_at': value['archiveAt'] === null ? null : ((value['archiveAt'] as any)?.toISOString()),
        'order': value['order'],
        'type': FormFieldTypeEnumToJSON(value['type']),
        'title': value['title'],
        'description': value['description'],
        'placeholder': value['placeholder'],
        'is_required': value['isRequired'],
        'tenant': value['tenant'],
        'created_by': value['createdBy'],
        'updated_by': value['updatedBy'],
        'form': value['form'],
    };
}

