/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.74
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PurchaseMethodEnum } from './PurchaseMethodEnum';
import {
    PurchaseMethodEnumFromJSON,
    PurchaseMethodEnumFromJSONTyped,
    PurchaseMethodEnumToJSON,
    PurchaseMethodEnumToJSONTyped,
} from './PurchaseMethodEnum';
import type { CurrencyEnum } from './CurrencyEnum';
import {
    CurrencyEnumFromJSON,
    CurrencyEnumFromJSONTyped,
    CurrencyEnumToJSON,
    CurrencyEnumToJSONTyped,
} from './CurrencyEnum';

/**
 * 
 * @export
 * @interface PatchedPurchase
 */
export interface PatchedPurchase {
    /**
     * 
     * @type {number}
     * @memberof PatchedPurchase
     */
    readonly id?: number;
    /**
     * 
     * @type {Date}
     * @memberof PatchedPurchase
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PatchedPurchase
     */
    readonly updatedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PatchedPurchase
     */
    readonly archiveAt?: Date | null;
    /**
     * Title for the purchase, e.g., 'VIP Tickets for Opening Night'.
     * @type {string}
     * @memberof PatchedPurchase
     */
    title?: string;
    /**
     * First name of the customer making the purchase.
     * @type {string}
     * @memberof PatchedPurchase
     */
    customerFirstName?: string;
    /**
     * Last name of the customer making the purchase.
     * @type {string}
     * @memberof PatchedPurchase
     */
    customerLastName?: string;
    /**
     * Email address of the customer making the purchase.
     * @type {string}
     * @memberof PatchedPurchase
     */
    customerEmail?: string;
    /**
     * Phone number of the customer making the purchase.
     * @type {string}
     * @memberof PatchedPurchase
     */
    customerPhone?: string;
    /**
     * Address of the customer making the purchase.
     * @type {string}
     * @memberof PatchedPurchase
     */
    customerAddress?: string;
    /**
     * Method of purchase, e.g., Online, In Person, Box Office, Phone, Mobile App.
     * 
     * * `online` - Online
     * * `in_person` - In Person
     * * `box_office` - Box Office
     * * `phone` - Phone
     * * `mobile_app` - Mobile App
     * @type {PurchaseMethodEnum}
     * @memberof PatchedPurchase
     */
    purchaseMethod?: PurchaseMethodEnum;
    /**
     * Currency for the purchase amount.
     * 
     * * `AUD` - AUD - Australian Dollar
     * * `CAD` - CAD - Canadian Dollar
     * * `EUR` - EUR - Euro
     * * `GBP` - GBP - British Pound
     * * `JPY` - JPY - Japanese Yen
     * * `NZD` - NZD - New Zealand Dollar
     * * `USD` - USD - United States Dollar
     * @type {CurrencyEnum}
     * @memberof PatchedPurchase
     */
    currency?: CurrencyEnum;
    /**
     * Subtotal amount for the purchase before any discounts.
     * @type {string}
     * @memberof PatchedPurchase
     */
    subtotalAmount?: string;
    /**
     * Amount of discount applied to the purchase. 0 if no discount was applied.
     * @type {string}
     * @memberof PatchedPurchase
     */
    discountAmount?: string;
    /**
     * Booking fee applied to the purchase. 0 if no booking fee was applied.
     * @type {string}
     * @memberof PatchedPurchase
     */
    bookingFee?: string;
    /**
     * Total amount for the purchase paid by the customer, after any discounts.
     * @type {string}
     * @memberof PatchedPurchase
     */
    totalAmount?: string;
    /**
     * Payment reference or transaction ID for the purchase, if applicable.
     * @type {string}
     * @memberof PatchedPurchase
     */
    paymentReference?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedPurchase
     */
    readonly tenant?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedPurchase
     */
    readonly createdBy?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedPurchase
     */
    readonly updatedBy?: number | null;
    /**
     * Discount applied to this purchase.
     * @type {number}
     * @memberof PatchedPurchase
     */
    discountApplied?: number | null;
}



/**
 * Check if a given object implements the PatchedPurchase interface.
 */
export function instanceOfPatchedPurchase(value: object): value is PatchedPurchase {
    return true;
}

export function PatchedPurchaseFromJSON(json: any): PatchedPurchase {
    return PatchedPurchaseFromJSONTyped(json, false);
}

export function PatchedPurchaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchedPurchase {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
        'archiveAt': json['archive_at'] == null ? undefined : (new Date(json['archive_at'])),
        'title': json['title'] == null ? undefined : json['title'],
        'customerFirstName': json['customer_first_name'] == null ? undefined : json['customer_first_name'],
        'customerLastName': json['customer_last_name'] == null ? undefined : json['customer_last_name'],
        'customerEmail': json['customer_email'] == null ? undefined : json['customer_email'],
        'customerPhone': json['customer_phone'] == null ? undefined : json['customer_phone'],
        'customerAddress': json['customer_address'] == null ? undefined : json['customer_address'],
        'purchaseMethod': json['purchase_method'] == null ? undefined : PurchaseMethodEnumFromJSON(json['purchase_method']),
        'currency': json['currency'] == null ? undefined : CurrencyEnumFromJSON(json['currency']),
        'subtotalAmount': json['subtotal_amount'] == null ? undefined : json['subtotal_amount'],
        'discountAmount': json['discount_amount'] == null ? undefined : json['discount_amount'],
        'bookingFee': json['booking_fee'] == null ? undefined : json['booking_fee'],
        'totalAmount': json['total_amount'] == null ? undefined : json['total_amount'],
        'paymentReference': json['payment_reference'] == null ? undefined : json['payment_reference'],
        'tenant': json['tenant'] == null ? undefined : json['tenant'],
        'createdBy': json['created_by'] == null ? undefined : json['created_by'],
        'updatedBy': json['updated_by'] == null ? undefined : json['updated_by'],
        'discountApplied': json['discount_applied'] == null ? undefined : json['discount_applied'],
    };
}

export function PatchedPurchaseToJSON(json: any): PatchedPurchase {
    return PatchedPurchaseToJSONTyped(json, false);
}

export function PatchedPurchaseToJSONTyped(value?: Omit<PatchedPurchase, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'title': value['title'],
        'customer_first_name': value['customerFirstName'],
        'customer_last_name': value['customerLastName'],
        'customer_email': value['customerEmail'],
        'customer_phone': value['customerPhone'],
        'customer_address': value['customerAddress'],
        'purchase_method': PurchaseMethodEnumToJSON(value['purchaseMethod']),
        'currency': CurrencyEnumToJSON(value['currency']),
        'subtotal_amount': value['subtotalAmount'],
        'discount_amount': value['discountAmount'],
        'booking_fee': value['bookingFee'],
        'total_amount': value['totalAmount'],
        'payment_reference': value['paymentReference'],
        'discount_applied': value['discountApplied'],
    };
}

