/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.82
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SeatingSystemEnum } from './SeatingSystemEnum';
import {
    SeatingSystemEnumFromJSON,
    SeatingSystemEnumFromJSONTyped,
    SeatingSystemEnumToJSON,
    SeatingSystemEnumToJSONTyped,
} from './SeatingSystemEnum';

/**
 * 
 * @export
 * @interface PatchedSection
 */
export interface PatchedSection {
    /**
     * 
     * @type {number}
     * @memberof PatchedSection
     */
    readonly id?: number;
    /**
     * 
     * @type {Date}
     * @memberof PatchedSection
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PatchedSection
     */
    readonly updatedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PatchedSection
     */
    readonly archiveAt?: Date | null;
    /**
     * Section Code, example: L-MEZ, ORCH, R-BALC, etc.
     * @type {string}
     * @memberof PatchedSection
     */
    sectionCode?: string;
    /**
     * Section Name, example: Left Mezzanine, Orchestra, Right Balcony, etc.
     * @type {string}
     * @memberof PatchedSection
     */
    name?: string;
    /**
     * Floor level, example: Ground, 2nd Floor, etc.
     * @type {string}
     * @memberof PatchedSection
     */
    floor?: string;
    /**
     * Description of the section, if any.
     * @type {string}
     * @memberof PatchedSection
     */
    description?: string;
    /**
     * Sort order for displaying sections, lower numbers appear first.
     * @type {number}
     * @memberof PatchedSection
     */
    sortOrder?: number;
    /**
     * Seating system for the section, e.g., General Admission, Reserved Seating.
     * 
     * * `none` - General Admission
     * * `seated` - Reserved Seating
     * @type {SeatingSystemEnum}
     * @memberof PatchedSection
     */
    seatingSystem?: SeatingSystemEnum;
    /**
     * Maximum number of seats available in this section. null means unlimited. 0 means no seats available. Required for General Admission sections, ignored for Reserved Seating sections.
     * @type {number}
     * @memberof PatchedSection
     */
    limit?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedSection
     */
    readonly tenant?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedSection
     */
    readonly createdBy?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedSection
     */
    readonly updatedBy?: number | null;
    /**
     * The production & venue this section belongs to
     * @type {number}
     * @memberof PatchedSection
     */
    readonly productionVenue?: number;
}



/**
 * Check if a given object implements the PatchedSection interface.
 */
export function instanceOfPatchedSection(value: object): value is PatchedSection {
    return true;
}

export function PatchedSectionFromJSON(json: any): PatchedSection {
    return PatchedSectionFromJSONTyped(json, false);
}

export function PatchedSectionFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchedSection {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
        'archiveAt': json['archive_at'] == null ? undefined : (new Date(json['archive_at'])),
        'sectionCode': json['section_code'] == null ? undefined : json['section_code'],
        'name': json['name'] == null ? undefined : json['name'],
        'floor': json['floor'] == null ? undefined : json['floor'],
        'description': json['description'] == null ? undefined : json['description'],
        'sortOrder': json['sort_order'] == null ? undefined : json['sort_order'],
        'seatingSystem': json['seating_system'] == null ? undefined : SeatingSystemEnumFromJSON(json['seating_system']),
        'limit': json['limit'] == null ? undefined : json['limit'],
        'tenant': json['tenant'] == null ? undefined : json['tenant'],
        'createdBy': json['created_by'] == null ? undefined : json['created_by'],
        'updatedBy': json['updated_by'] == null ? undefined : json['updated_by'],
        'productionVenue': json['production_venue'] == null ? undefined : json['production_venue'],
    };
}

export function PatchedSectionToJSON(json: any): PatchedSection {
    return PatchedSectionToJSONTyped(json, false);
}

export function PatchedSectionToJSONTyped(value?: Omit<PatchedSection, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'|'production_venue'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'section_code': value['sectionCode'],
        'name': value['name'],
        'floor': value['floor'],
        'description': value['description'],
        'sort_order': value['sortOrder'],
        'seating_system': SeatingSystemEnumToJSON(value['seatingSystem']),
        'limit': value['limit'],
    };
}

