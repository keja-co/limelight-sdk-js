/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.106
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RehearsalParticipant
 */
export interface RehearsalParticipant {
    /**
     * 
     * @type {number}
     * @memberof RehearsalParticipant
     */
    readonly id: number;
    /**
     * 
     * @type {string}
     * @memberof RehearsalParticipant
     */
    readonly memberName: string | null;
    /**
     * 
     * @type {Date}
     * @memberof RehearsalParticipant
     */
    readonly createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof RehearsalParticipant
     */
    readonly updatedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof RehearsalParticipant
     */
    readonly archiveAt: Date | null;
    /**
     * Indicates if the participant is required for this rehearsal (as some members may be added to a rehearsal but not be required to attend).
     * @type {boolean}
     * @memberof RehearsalParticipant
     */
    isRequired?: boolean;
    /**
     * 
     * @type {string}
     * @memberof RehearsalParticipant
     */
    notes?: string;
    /**
     * 
     * @type {number}
     * @memberof RehearsalParticipant
     */
    readonly tenant: number;
    /**
     * 
     * @type {number}
     * @memberof RehearsalParticipant
     */
    readonly createdBy: number | null;
    /**
     * 
     * @type {number}
     * @memberof RehearsalParticipant
     */
    readonly updatedBy: number | null;
    /**
     * 
     * @type {number}
     * @memberof RehearsalParticipant
     */
    rehearsal: number;
    /**
     * 
     * @type {number}
     * @memberof RehearsalParticipant
     */
    member: number;
}

/**
 * Check if a given object implements the RehearsalParticipant interface.
 */
export function instanceOfRehearsalParticipant(value: object): value is RehearsalParticipant {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('memberName' in value) || value['memberName'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('archiveAt' in value) || value['archiveAt'] === undefined) return false;
    if (!('tenant' in value) || value['tenant'] === undefined) return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined) return false;
    if (!('updatedBy' in value) || value['updatedBy'] === undefined) return false;
    if (!('rehearsal' in value) || value['rehearsal'] === undefined) return false;
    if (!('member' in value) || value['member'] === undefined) return false;
    return true;
}

export function RehearsalParticipantFromJSON(json: any): RehearsalParticipant {
    return RehearsalParticipantFromJSONTyped(json, false);
}

export function RehearsalParticipantFromJSONTyped(json: any, ignoreDiscriminator: boolean): RehearsalParticipant {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'memberName': json['member_name'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'archiveAt': (json['archive_at'] == null ? null : new Date(json['archive_at'])),
        'isRequired': json['is_required'] == null ? undefined : json['is_required'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'tenant': json['tenant'],
        'createdBy': json['created_by'],
        'updatedBy': json['updated_by'],
        'rehearsal': json['rehearsal'],
        'member': json['member'],
    };
}

export function RehearsalParticipantToJSON(json: any): RehearsalParticipant {
    return RehearsalParticipantToJSONTyped(json, false);
}

export function RehearsalParticipantToJSONTyped(value?: Omit<RehearsalParticipant, 'id'|'member_name'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'is_required': value['isRequired'],
        'notes': value['notes'],
        'rehearsal': value['rehearsal'],
        'member': value['member'],
    };
}

