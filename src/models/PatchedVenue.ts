/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.98
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Address } from './Address';
import {
    AddressFromJSON,
    AddressFromJSONTyped,
    AddressToJSON,
    AddressToJSONTyped,
} from './Address';

/**
 * 
 * @export
 * @interface PatchedVenue
 */
export interface PatchedVenue {
    /**
     * 
     * @type {number}
     * @memberof PatchedVenue
     */
    readonly id?: number;
    /**
     * 
     * @type {Address}
     * @memberof PatchedVenue
     */
    address?: Address;
    /**
     * 
     * @type {Date}
     * @memberof PatchedVenue
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PatchedVenue
     */
    readonly updatedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PatchedVenue
     */
    readonly archiveAt?: Date | null;
    /**
     * Name of the venue
     * @type {string}
     * @memberof PatchedVenue
     */
    name?: string;
    /**
     * Additional notes about the venue
     * @type {string}
     * @memberof PatchedVenue
     */
    notes?: string;
    /**
     * Contact person for the venue
     * @type {string}
     * @memberof PatchedVenue
     */
    contactName?: string;
    /**
     * Email address for the venue contact
     * @type {string}
     * @memberof PatchedVenue
     */
    contactEmail?: string;
    /**
     * Contact person for the venue contact
     * @type {string}
     * @memberof PatchedVenue
     */
    contactPhone?: string;
    /**
     * Is the venue currently active?
     * @type {boolean}
     * @memberof PatchedVenue
     */
    isActive?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PatchedVenue
     */
    readonly tenant?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedVenue
     */
    readonly createdBy?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedVenue
     */
    readonly updatedBy?: number | null;
    /**
     * Tags associated with the venue
     * @type {Array<number>}
     * @memberof PatchedVenue
     */
    tags?: Array<number>;
}

/**
 * Check if a given object implements the PatchedVenue interface.
 */
export function instanceOfPatchedVenue(value: object): value is PatchedVenue {
    return true;
}

export function PatchedVenueFromJSON(json: any): PatchedVenue {
    return PatchedVenueFromJSONTyped(json, false);
}

export function PatchedVenueFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchedVenue {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'address': json['address'] == null ? undefined : AddressFromJSON(json['address']),
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
        'archiveAt': json['archive_at'] == null ? undefined : (new Date(json['archive_at'])),
        'name': json['name'] == null ? undefined : json['name'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'contactName': json['contact_name'] == null ? undefined : json['contact_name'],
        'contactEmail': json['contact_email'] == null ? undefined : json['contact_email'],
        'contactPhone': json['contact_phone'] == null ? undefined : json['contact_phone'],
        'isActive': json['is_active'] == null ? undefined : json['is_active'],
        'tenant': json['tenant'] == null ? undefined : json['tenant'],
        'createdBy': json['created_by'] == null ? undefined : json['created_by'],
        'updatedBy': json['updated_by'] == null ? undefined : json['updated_by'],
        'tags': json['tags'] == null ? undefined : json['tags'],
    };
}

export function PatchedVenueToJSON(json: any): PatchedVenue {
    return PatchedVenueToJSONTyped(json, false);
}

export function PatchedVenueToJSONTyped(value?: Omit<PatchedVenue, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'address': AddressToJSON(value['address']),
        'name': value['name'],
        'notes': value['notes'],
        'contact_name': value['contactName'],
        'contact_email': value['contactEmail'],
        'contact_phone': value['contactPhone'],
        'is_active': value['isActive'],
        'tags': value['tags'],
    };
}

