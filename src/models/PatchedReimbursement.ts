/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.108
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ReimbursementStatusEnum } from './ReimbursementStatusEnum';
import {
    ReimbursementStatusEnumFromJSON,
    ReimbursementStatusEnumFromJSONTyped,
    ReimbursementStatusEnumToJSON,
    ReimbursementStatusEnumToJSONTyped,
} from './ReimbursementStatusEnum';

/**
 * 
 * @export
 * @interface PatchedReimbursement
 */
export interface PatchedReimbursement {
    /**
     * 
     * @type {number}
     * @memberof PatchedReimbursement
     */
    readonly id?: number;
    /**
     * 
     * @type {Date}
     * @memberof PatchedReimbursement
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PatchedReimbursement
     */
    readonly updatedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PatchedReimbursement
     */
    readonly archiveAt?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof PatchedReimbursement
     */
    approvedDateTime?: Date;
    /**
     * 
     * @type {string}
     * @memberof PatchedReimbursement
     */
    amount?: string;
    /**
     * 
     * @type {Date}
     * @memberof PatchedReimbursement
     */
    scheduledDate?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof PatchedReimbursement
     */
    processedDate?: Date | null;
    /**
     * 
     * @type {ReimbursementStatusEnum}
     * @memberof PatchedReimbursement
     */
    status?: ReimbursementStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof PatchedReimbursement
     */
    paymentReference?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedReimbursement
     */
    notes?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedReimbursement
     */
    readonly tenant?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedReimbursement
     */
    readonly createdBy?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedReimbursement
     */
    readonly updatedBy?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedReimbursement
     */
    payee?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedReimbursement
     */
    approver?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedReimbursement
     */
    expense?: number | null;
}



/**
 * Check if a given object implements the PatchedReimbursement interface.
 */
export function instanceOfPatchedReimbursement(value: object): value is PatchedReimbursement {
    return true;
}

export function PatchedReimbursementFromJSON(json: any): PatchedReimbursement {
    return PatchedReimbursementFromJSONTyped(json, false);
}

export function PatchedReimbursementFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchedReimbursement {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
        'archiveAt': json['archive_at'] == null ? undefined : (new Date(json['archive_at'])),
        'approvedDateTime': json['approved_date_time'] == null ? undefined : (new Date(json['approved_date_time'])),
        'amount': json['amount'] == null ? undefined : json['amount'],
        'scheduledDate': json['scheduled_date'] == null ? undefined : (new Date(json['scheduled_date'])),
        'processedDate': json['processed_date'] == null ? undefined : (new Date(json['processed_date'])),
        'status': json['status'] == null ? undefined : ReimbursementStatusEnumFromJSON(json['status']),
        'paymentReference': json['payment_reference'] == null ? undefined : json['payment_reference'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'tenant': json['tenant'] == null ? undefined : json['tenant'],
        'createdBy': json['created_by'] == null ? undefined : json['created_by'],
        'updatedBy': json['updated_by'] == null ? undefined : json['updated_by'],
        'payee': json['payee'] == null ? undefined : json['payee'],
        'approver': json['approver'] == null ? undefined : json['approver'],
        'expense': json['expense'] == null ? undefined : json['expense'],
    };
}

export function PatchedReimbursementToJSON(json: any): PatchedReimbursement {
    return PatchedReimbursementToJSONTyped(json, false);
}

export function PatchedReimbursementToJSONTyped(value?: Omit<PatchedReimbursement, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'approved_date_time': value['approvedDateTime'] == null ? undefined : ((value['approvedDateTime']).toISOString()),
        'amount': value['amount'],
        'scheduled_date': value['scheduledDate'] === null ? null : ((value['scheduledDate'] as any)?.toISOString().substring(0,10)),
        'processed_date': value['processedDate'] === null ? null : ((value['processedDate'] as any)?.toISOString().substring(0,10)),
        'status': ReimbursementStatusEnumToJSON(value['status']),
        'payment_reference': value['paymentReference'],
        'notes': value['notes'],
        'payee': value['payee'],
        'approver': value['approver'],
        'expense': value['expense'],
    };
}

