/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.113
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ProductionStatusEnum } from './ProductionStatusEnum';
import {
    ProductionStatusEnumFromJSON,
    ProductionStatusEnumFromJSONTyped,
    ProductionStatusEnumToJSON,
    ProductionStatusEnumToJSONTyped,
} from './ProductionStatusEnum';

/**
 * 
 * @export
 * @interface ProductionList
 */
export interface ProductionList {
    /**
     * 
     * @type {number}
     * @memberof ProductionList
     */
    readonly id: number;
    /**
     * 
     * @type {string}
     * @memberof ProductionList
     */
    name: string;
    /**
     * 
     * @type {Date}
     * @memberof ProductionList
     */
    startDate?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof ProductionList
     */
    endDate?: Date | null;
    /**
     * 
     * @type {ProductionStatusEnum}
     * @memberof ProductionList
     */
    status?: ProductionStatusEnum;
    /**
     * The primary venue for the production, not necessarily where all performances will take place.
     * @type {number}
     * @memberof ProductionList
     */
    venue?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProductionList
     */
    readonly venueName: string;
    /**
     * 
     * @type {string}
     * @memberof ProductionList
     */
    readonly directorName: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductionList
     */
    readonly primaryCategoryName: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductionList
     */
    readonly performancesCount: number;
    /**
     * 
     * @type {number}
     * @memberof ProductionList
     */
    readonly rehearsalsCount: number;
    /**
     * 
     * @type {number}
     * @memberof ProductionList
     */
    readonly membersCount: number;
    /**
     * 
     * @type {number}
     * @memberof ProductionList
     */
    readonly documentsCount: number;
    /**
     * 
     * @type {Date}
     * @memberof ProductionList
     */
    readonly nextPerformanceDatetime: Date;
}



/**
 * Check if a given object implements the ProductionList interface.
 */
export function instanceOfProductionList(value: object): value is ProductionList {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('venueName' in value) || value['venueName'] === undefined) return false;
    if (!('directorName' in value) || value['directorName'] === undefined) return false;
    if (!('primaryCategoryName' in value) || value['primaryCategoryName'] === undefined) return false;
    if (!('performancesCount' in value) || value['performancesCount'] === undefined) return false;
    if (!('rehearsalsCount' in value) || value['rehearsalsCount'] === undefined) return false;
    if (!('membersCount' in value) || value['membersCount'] === undefined) return false;
    if (!('documentsCount' in value) || value['documentsCount'] === undefined) return false;
    if (!('nextPerformanceDatetime' in value) || value['nextPerformanceDatetime'] === undefined) return false;
    return true;
}

export function ProductionListFromJSON(json: any): ProductionList {
    return ProductionListFromJSONTyped(json, false);
}

export function ProductionListFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductionList {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'startDate': json['start_date'] == null ? undefined : (new Date(json['start_date'])),
        'endDate': json['end_date'] == null ? undefined : (new Date(json['end_date'])),
        'status': json['status'] == null ? undefined : ProductionStatusEnumFromJSON(json['status']),
        'venue': json['venue'] == null ? undefined : json['venue'],
        'venueName': json['venue_name'],
        'directorName': json['director_name'],
        'primaryCategoryName': json['primary_category_name'],
        'performancesCount': json['performances_count'],
        'rehearsalsCount': json['rehearsals_count'],
        'membersCount': json['members_count'],
        'documentsCount': json['documents_count'],
        'nextPerformanceDatetime': (new Date(json['next_performance_datetime'])),
    };
}

export function ProductionListToJSON(json: any): ProductionList {
    return ProductionListToJSONTyped(json, false);
}

export function ProductionListToJSONTyped(value?: Omit<ProductionList, 'id'|'venue_name'|'director_name'|'primary_category_name'|'performances_count'|'rehearsals_count'|'members_count'|'documents_count'|'next_performance_datetime'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'start_date': value['startDate'] == null ? value['startDate'] : value['startDate'].toISOString(),
        'end_date': value['endDate'] == null ? value['endDate'] : value['endDate'].toISOString(),
        'status': ProductionStatusEnumToJSON(value['status']),
        'venue': value['venue'],
    };
}

