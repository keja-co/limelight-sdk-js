/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.98
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DiscountTypeEnum } from './DiscountTypeEnum';
import {
    DiscountTypeEnumFromJSON,
    DiscountTypeEnumFromJSONTyped,
    DiscountTypeEnumToJSON,
    DiscountTypeEnumToJSONTyped,
} from './DiscountTypeEnum';

/**
 * 
 * @export
 * @interface PatchedDiscount
 */
export interface PatchedDiscount {
    /**
     * 
     * @type {number}
     * @memberof PatchedDiscount
     */
    readonly id?: number;
    /**
     * 
     * @type {Date}
     * @memberof PatchedDiscount
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PatchedDiscount
     */
    readonly updatedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PatchedDiscount
     */
    readonly archiveAt?: Date | null;
    /**
     * Name of the discount, e.g., Early Bird, Student Discount, etc.
     * @type {string}
     * @memberof PatchedDiscount
     */
    name?: string;
    /**
     * Unique code for the discount, used by customers to apply the discount.
     * @type {string}
     * @memberof PatchedDiscount
     */
    code?: string;
    /**
     * Description of the discount, if any.
     * @type {string}
     * @memberof PatchedDiscount
     */
    description?: string;
    /**
     * Type of discount, e.g., Percentage Off, Fixed Amount Off, Buy One Get One.
     * 
     * * `percentage` - Percentage Off
     * * `fixed_amount` - Fixed Amount Off
     * * `bogo` - Buy One Get One
     * @type {DiscountTypeEnum}
     * @memberof PatchedDiscount
     */
    discountType?: DiscountTypeEnum;
    /**
     * Value of the discount. For percentage discounts, this is the percentage off. For fixed amount discounts, this is the amount off.
     * @type {string}
     * @memberof PatchedDiscount
     */
    value?: string;
    /**
     * Minimum value of the order for the discount to apply.
     * @type {string}
     * @memberof PatchedDiscount
     */
    minimumValue?: string;
    /**
     * Minimum number of tickets required for the discount to apply. 0 means no minimum.
     * @type {number}
     * @memberof PatchedDiscount
     */
    minimumTickets?: number;
    /**
     * Global limit for the discount, i.e., maximum number of times this discount can be used across all venues. null means unlimited. 0 means no uses allowed.
     * @type {number}
     * @memberof PatchedDiscount
     */
    globalLimit?: number | null;
    /**
     * Limit for each customer, i.e., maximum number of times a single customer can use this discount. null means unlimited. 0 means no uses allowed.
     * @type {number}
     * @memberof PatchedDiscount
     */
    customerLimit?: number | null;
    /**
     * Start date and time for the discount to be valid. If null, the discount is valid immediately.
     * @type {Date}
     * @memberof PatchedDiscount
     */
    validFrom?: Date | null;
    /**
     * End date and time for the discount to be valid. If null, the discount is valid indefinitely.
     * @type {Date}
     * @memberof PatchedDiscount
     */
    validUntil?: Date | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedDiscount
     */
    readonly tenant?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedDiscount
     */
    readonly createdBy?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedDiscount
     */
    readonly updatedBy?: number | null;
    /**
     * The production this discount applies to.
     * @type {number}
     * @memberof PatchedDiscount
     */
    production?: number;
    /**
     * If the discount is specific to a venue, this field will be set. If null, the discount applies to all venues for the production.
     * @type {number}
     * @memberof PatchedDiscount
     */
    productionVenue?: number | null;
    /**
     * Ticket types to which this discount applies. If empty, the discount applies to all ticket types for the production.
     * @type {Array<number>}
     * @memberof PatchedDiscount
     */
    applicableTicketTypes?: Array<number>;
}



/**
 * Check if a given object implements the PatchedDiscount interface.
 */
export function instanceOfPatchedDiscount(value: object): value is PatchedDiscount {
    return true;
}

export function PatchedDiscountFromJSON(json: any): PatchedDiscount {
    return PatchedDiscountFromJSONTyped(json, false);
}

export function PatchedDiscountFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchedDiscount {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
        'archiveAt': json['archive_at'] == null ? undefined : (new Date(json['archive_at'])),
        'name': json['name'] == null ? undefined : json['name'],
        'code': json['code'] == null ? undefined : json['code'],
        'description': json['description'] == null ? undefined : json['description'],
        'discountType': json['discount_type'] == null ? undefined : DiscountTypeEnumFromJSON(json['discount_type']),
        'value': json['value'] == null ? undefined : json['value'],
        'minimumValue': json['minimum_value'] == null ? undefined : json['minimum_value'],
        'minimumTickets': json['minimum_tickets'] == null ? undefined : json['minimum_tickets'],
        'globalLimit': json['global_limit'] == null ? undefined : json['global_limit'],
        'customerLimit': json['customer_limit'] == null ? undefined : json['customer_limit'],
        'validFrom': json['valid_from'] == null ? undefined : (new Date(json['valid_from'])),
        'validUntil': json['valid_until'] == null ? undefined : (new Date(json['valid_until'])),
        'tenant': json['tenant'] == null ? undefined : json['tenant'],
        'createdBy': json['created_by'] == null ? undefined : json['created_by'],
        'updatedBy': json['updated_by'] == null ? undefined : json['updated_by'],
        'production': json['production'] == null ? undefined : json['production'],
        'productionVenue': json['production_venue'] == null ? undefined : json['production_venue'],
        'applicableTicketTypes': json['applicable_ticket_types'] == null ? undefined : json['applicable_ticket_types'],
    };
}

export function PatchedDiscountToJSON(json: any): PatchedDiscount {
    return PatchedDiscountToJSONTyped(json, false);
}

export function PatchedDiscountToJSONTyped(value?: Omit<PatchedDiscount, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'code': value['code'],
        'description': value['description'],
        'discount_type': DiscountTypeEnumToJSON(value['discountType']),
        'value': value['value'],
        'minimum_value': value['minimumValue'],
        'minimum_tickets': value['minimumTickets'],
        'global_limit': value['globalLimit'],
        'customer_limit': value['customerLimit'],
        'valid_from': value['validFrom'] === null ? null : ((value['validFrom'] as any)?.toISOString()),
        'valid_until': value['validUntil'] === null ? null : ((value['validUntil'] as any)?.toISOString()),
        'production': value['production'],
        'production_venue': value['productionVenue'],
        'applicable_ticket_types': value['applicableTicketTypes'],
    };
}

