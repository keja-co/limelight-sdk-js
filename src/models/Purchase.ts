/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.89
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PurchaseMethodEnum } from './PurchaseMethodEnum';
import {
    PurchaseMethodEnumFromJSON,
    PurchaseMethodEnumFromJSONTyped,
    PurchaseMethodEnumToJSON,
    PurchaseMethodEnumToJSONTyped,
} from './PurchaseMethodEnum';
import type { CurrencyEnum } from './CurrencyEnum';
import {
    CurrencyEnumFromJSON,
    CurrencyEnumFromJSONTyped,
    CurrencyEnumToJSON,
    CurrencyEnumToJSONTyped,
} from './CurrencyEnum';

/**
 * 
 * @export
 * @interface Purchase
 */
export interface Purchase {
    /**
     * 
     * @type {number}
     * @memberof Purchase
     */
    readonly id: number;
    /**
     * 
     * @type {Date}
     * @memberof Purchase
     */
    readonly createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Purchase
     */
    readonly updatedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Purchase
     */
    readonly archiveAt: Date | null;
    /**
     * Title for the purchase, e.g., 'VIP Tickets for Opening Night'.
     * @type {string}
     * @memberof Purchase
     */
    title?: string;
    /**
     * First name of the customer making the purchase.
     * @type {string}
     * @memberof Purchase
     */
    customerFirstName: string;
    /**
     * Last name of the customer making the purchase.
     * @type {string}
     * @memberof Purchase
     */
    customerLastName?: string;
    /**
     * Email address of the customer making the purchase.
     * @type {string}
     * @memberof Purchase
     */
    customerEmail: string;
    /**
     * Phone number of the customer making the purchase.
     * @type {string}
     * @memberof Purchase
     */
    customerPhone?: string;
    /**
     * Address of the customer making the purchase.
     * @type {string}
     * @memberof Purchase
     */
    customerAddress: string;
    /**
     * Method of purchase, e.g., Online, In Person, Box Office, Phone, Mobile App.
     * 
     * * `online` - Online
     * * `in_person` - In Person
     * * `box_office` - Box Office
     * * `phone` - Phone
     * * `mobile_app` - Mobile App
     * @type {PurchaseMethodEnum}
     * @memberof Purchase
     */
    purchaseMethod?: PurchaseMethodEnum;
    /**
     * Currency for the purchase amount.
     * 
     * * `AUD` - AUD - Australian Dollar
     * * `CAD` - CAD - Canadian Dollar
     * * `EUR` - EUR - Euro
     * * `GBP` - GBP - British Pound
     * * `JPY` - JPY - Japanese Yen
     * * `NZD` - NZD - New Zealand Dollar
     * * `USD` - USD - United States Dollar
     * @type {CurrencyEnum}
     * @memberof Purchase
     */
    currency?: CurrencyEnum;
    /**
     * Subtotal amount for the purchase before any discounts.
     * @type {string}
     * @memberof Purchase
     */
    subtotalAmount: string;
    /**
     * Amount of discount applied to the purchase. 0 if no discount was applied.
     * @type {string}
     * @memberof Purchase
     */
    discountAmount?: string;
    /**
     * Booking fee applied to the purchase. 0 if no booking fee was applied.
     * @type {string}
     * @memberof Purchase
     */
    bookingFee?: string;
    /**
     * Total amount for the purchase paid by the customer, after any discounts.
     * @type {string}
     * @memberof Purchase
     */
    totalAmount: string;
    /**
     * Payment reference or transaction ID for the purchase, if applicable.
     * @type {string}
     * @memberof Purchase
     */
    paymentReference?: string;
    /**
     * 
     * @type {number}
     * @memberof Purchase
     */
    readonly tenant: number;
    /**
     * 
     * @type {number}
     * @memberof Purchase
     */
    readonly createdBy: number | null;
    /**
     * 
     * @type {number}
     * @memberof Purchase
     */
    readonly updatedBy: number | null;
    /**
     * Discount applied to this purchase.
     * @type {number}
     * @memberof Purchase
     */
    discountApplied?: number | null;
}



/**
 * Check if a given object implements the Purchase interface.
 */
export function instanceOfPurchase(value: object): value is Purchase {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('archiveAt' in value) || value['archiveAt'] === undefined) return false;
    if (!('customerFirstName' in value) || value['customerFirstName'] === undefined) return false;
    if (!('customerEmail' in value) || value['customerEmail'] === undefined) return false;
    if (!('customerAddress' in value) || value['customerAddress'] === undefined) return false;
    if (!('subtotalAmount' in value) || value['subtotalAmount'] === undefined) return false;
    if (!('totalAmount' in value) || value['totalAmount'] === undefined) return false;
    if (!('tenant' in value) || value['tenant'] === undefined) return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined) return false;
    if (!('updatedBy' in value) || value['updatedBy'] === undefined) return false;
    return true;
}

export function PurchaseFromJSON(json: any): Purchase {
    return PurchaseFromJSONTyped(json, false);
}

export function PurchaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): Purchase {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'archiveAt': (json['archive_at'] == null ? null : new Date(json['archive_at'])),
        'title': json['title'] == null ? undefined : json['title'],
        'customerFirstName': json['customer_first_name'],
        'customerLastName': json['customer_last_name'] == null ? undefined : json['customer_last_name'],
        'customerEmail': json['customer_email'],
        'customerPhone': json['customer_phone'] == null ? undefined : json['customer_phone'],
        'customerAddress': json['customer_address'],
        'purchaseMethod': json['purchase_method'] == null ? undefined : PurchaseMethodEnumFromJSON(json['purchase_method']),
        'currency': json['currency'] == null ? undefined : CurrencyEnumFromJSON(json['currency']),
        'subtotalAmount': json['subtotal_amount'],
        'discountAmount': json['discount_amount'] == null ? undefined : json['discount_amount'],
        'bookingFee': json['booking_fee'] == null ? undefined : json['booking_fee'],
        'totalAmount': json['total_amount'],
        'paymentReference': json['payment_reference'] == null ? undefined : json['payment_reference'],
        'tenant': json['tenant'],
        'createdBy': json['created_by'],
        'updatedBy': json['updated_by'],
        'discountApplied': json['discount_applied'] == null ? undefined : json['discount_applied'],
    };
}

export function PurchaseToJSON(json: any): Purchase {
    return PurchaseToJSONTyped(json, false);
}

export function PurchaseToJSONTyped(value?: Omit<Purchase, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'title': value['title'],
        'customer_first_name': value['customerFirstName'],
        'customer_last_name': value['customerLastName'],
        'customer_email': value['customerEmail'],
        'customer_phone': value['customerPhone'],
        'customer_address': value['customerAddress'],
        'purchase_method': PurchaseMethodEnumToJSON(value['purchaseMethod']),
        'currency': CurrencyEnumToJSON(value['currency']),
        'subtotal_amount': value['subtotalAmount'],
        'discount_amount': value['discountAmount'],
        'booking_fee': value['bookingFee'],
        'total_amount': value['totalAmount'],
        'payment_reference': value['paymentReference'],
        'discount_applied': value['discountApplied'],
    };
}

