/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.110
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ExpensePaymentMethodEnum } from './ExpensePaymentMethodEnum';
import {
    ExpensePaymentMethodEnumFromJSON,
    ExpensePaymentMethodEnumFromJSONTyped,
    ExpensePaymentMethodEnumToJSON,
    ExpensePaymentMethodEnumToJSONTyped,
} from './ExpensePaymentMethodEnum';
import type { ExpenseStatusEnum } from './ExpenseStatusEnum';
import {
    ExpenseStatusEnumFromJSON,
    ExpenseStatusEnumFromJSONTyped,
    ExpenseStatusEnumToJSON,
    ExpenseStatusEnumToJSONTyped,
} from './ExpenseStatusEnum';

/**
 * 
 * @export
 * @interface Expense
 */
export interface Expense {
    /**
     * 
     * @type {number}
     * @memberof Expense
     */
    readonly id: number;
    /**
     * 
     * @type {Date}
     * @memberof Expense
     */
    readonly createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Expense
     */
    readonly updatedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Expense
     */
    readonly archiveAt: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof Expense
     */
    approvedDateTime?: Date | null;
    /**
     * 
     * @type {ExpenseStatusEnum}
     * @memberof Expense
     */
    status?: ExpenseStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Expense
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Expense
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Expense
     */
    cost: string;
    /**
     * 
     * @type {Date}
     * @memberof Expense
     */
    expenseDateTime: Date;
    /**
     * 
     * @type {ExpensePaymentMethodEnum}
     * @memberof Expense
     */
    paymentMethod: ExpensePaymentMethodEnum;
    /**
     * 
     * @type {string}
     * @memberof Expense
     */
    notes?: string;
    /**
     * 
     * @type {string}
     * @memberof Expense
     */
    receiptNumber?: string;
    /**
     * 
     * @type {number}
     * @memberof Expense
     */
    readonly tenant: number;
    /**
     * 
     * @type {number}
     * @memberof Expense
     */
    readonly createdBy: number | null;
    /**
     * 
     * @type {number}
     * @memberof Expense
     */
    readonly updatedBy: number | null;
    /**
     * 
     * @type {number}
     * @memberof Expense
     */
    purchaser: number;
    /**
     * 
     * @type {number}
     * @memberof Expense
     */
    approver?: number | null;
    /**
     * The Expense Category this expense belongs to. Either this or `prod_category` must be set (but not both).
     * @type {number}
     * @memberof Expense
     */
    category?: number | null;
    /**
     * The Production Expense Category this expense belongs to (if the expense belongs to a production). Either this or `category` must be set (but not both).
     * @type {number}
     * @memberof Expense
     */
    prodCategory?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Expense
     */
    vendor?: number | null;
}



/**
 * Check if a given object implements the Expense interface.
 */
export function instanceOfExpense(value: object): value is Expense {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('archiveAt' in value) || value['archiveAt'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('cost' in value) || value['cost'] === undefined) return false;
    if (!('expenseDateTime' in value) || value['expenseDateTime'] === undefined) return false;
    if (!('paymentMethod' in value) || value['paymentMethod'] === undefined) return false;
    if (!('tenant' in value) || value['tenant'] === undefined) return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined) return false;
    if (!('updatedBy' in value) || value['updatedBy'] === undefined) return false;
    if (!('purchaser' in value) || value['purchaser'] === undefined) return false;
    return true;
}

export function ExpenseFromJSON(json: any): Expense {
    return ExpenseFromJSONTyped(json, false);
}

export function ExpenseFromJSONTyped(json: any, ignoreDiscriminator: boolean): Expense {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'archiveAt': (json['archive_at'] == null ? null : new Date(json['archive_at'])),
        'approvedDateTime': json['approved_date_time'] == null ? undefined : (new Date(json['approved_date_time'])),
        'status': json['status'] == null ? undefined : ExpenseStatusEnumFromJSON(json['status']),
        'title': json['title'],
        'description': json['description'] == null ? undefined : json['description'],
        'cost': json['cost'],
        'expenseDateTime': (new Date(json['expense_date_time'])),
        'paymentMethod': ExpensePaymentMethodEnumFromJSON(json['payment_method']),
        'notes': json['notes'] == null ? undefined : json['notes'],
        'receiptNumber': json['receipt_number'] == null ? undefined : json['receipt_number'],
        'tenant': json['tenant'],
        'createdBy': json['created_by'],
        'updatedBy': json['updated_by'],
        'purchaser': json['purchaser'],
        'approver': json['approver'] == null ? undefined : json['approver'],
        'category': json['category'] == null ? undefined : json['category'],
        'prodCategory': json['prod_category'] == null ? undefined : json['prod_category'],
        'vendor': json['vendor'] == null ? undefined : json['vendor'],
    };
}

export function ExpenseToJSON(json: any): Expense {
    return ExpenseToJSONTyped(json, false);
}

export function ExpenseToJSONTyped(value?: Omit<Expense, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'approved_date_time': value['approvedDateTime'] === null ? null : ((value['approvedDateTime'] as any)?.toISOString()),
        'status': ExpenseStatusEnumToJSON(value['status']),
        'title': value['title'],
        'description': value['description'],
        'cost': value['cost'],
        'expense_date_time': ((value['expenseDateTime']).toISOString()),
        'payment_method': ExpensePaymentMethodEnumToJSON(value['paymentMethod']),
        'notes': value['notes'],
        'receipt_number': value['receiptNumber'],
        'purchaser': value['purchaser'],
        'approver': value['approver'],
        'category': value['category'],
        'prod_category': value['prodCategory'],
        'vendor': value['vendor'],
    };
}

