/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.105
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Tenant
 */
export interface Tenant {
    /**
     * 
     * @type {number}
     * @memberof Tenant
     */
    readonly id: number;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    readonly ulid: string;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    name: string;
    /**
     * 
     * @type {Date}
     * @memberof Tenant
     */
    readonly createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Tenant
     */
    readonly updatedAt: Date;
}

/**
 * Check if a given object implements the Tenant interface.
 */
export function instanceOfTenant(value: object): value is Tenant {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('ulid' in value) || value['ulid'] === undefined) return false;
    if (!('code' in value) || value['code'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function TenantFromJSON(json: any): Tenant {
    return TenantFromJSONTyped(json, false);
}

export function TenantFromJSONTyped(json: any, ignoreDiscriminator: boolean): Tenant {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'ulid': json['ulid'],
        'code': json['code'],
        'name': json['name'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
    };
}

export function TenantToJSON(json: any): Tenant {
    return TenantToJSONTyped(json, false);
}

export function TenantToJSONTyped(value?: Omit<Tenant, 'id'|'ulid'|'created_at'|'updated_at'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'code': value['code'],
        'name': value['name'],
    };
}

