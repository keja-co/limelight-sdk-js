/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.113
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ExternalSignatureService } from './ExternalSignatureService';
import {
    ExternalSignatureServiceFromJSON,
    ExternalSignatureServiceFromJSONTyped,
    ExternalSignatureServiceToJSON,
    ExternalSignatureServiceToJSONTyped,
} from './ExternalSignatureService';

/**
 * 
 * @export
 * @interface ExternalSignatureConfiguration
 */
export interface ExternalSignatureConfiguration {
    /**
     * External signature service to use (e.g., 'dropboxsign', 'docusign', 'adobe', etc.)
     * @type {ExternalSignatureService}
     * @memberof ExternalSignatureConfiguration
     */
    service: ExternalSignatureService;
    /**
     * 
     * @type {string}
     * @memberof ExternalSignatureConfiguration
     */
    serviceUrl?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ExternalSignatureConfiguration
     */
    formId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ExternalSignatureConfiguration
     */
    templateId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ExternalSignatureConfiguration
     */
    clientId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ExternalSignatureConfiguration
     */
    clientSecret?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ExternalSignatureConfiguration
     */
    apiKey?: string | null;
    /**
     * Whether users can draw their signature using the external service
     * @type {boolean}
     * @memberof ExternalSignatureConfiguration
     */
    allowDrawing?: boolean;
    /**
     * Whether users can upload an image of their signature using the external service
     * @type {boolean}
     * @memberof ExternalSignatureConfiguration
     */
    allowUpload?: boolean;
    /**
     * Whether users can type their signature using the external service
     * @type {boolean}
     * @memberof ExternalSignatureConfiguration
     */
    allowTyping?: boolean;
}



/**
 * Check if a given object implements the ExternalSignatureConfiguration interface.
 */
export function instanceOfExternalSignatureConfiguration(value: object): value is ExternalSignatureConfiguration {
    if (!('service' in value) || value['service'] === undefined) return false;
    return true;
}

export function ExternalSignatureConfigurationFromJSON(json: any): ExternalSignatureConfiguration {
    return ExternalSignatureConfigurationFromJSONTyped(json, false);
}

export function ExternalSignatureConfigurationFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExternalSignatureConfiguration {
    if (json == null) {
        return json;
    }
    return {
        
        'service': ExternalSignatureServiceFromJSON(json['service']),
        'serviceUrl': json['service_url'] == null ? undefined : json['service_url'],
        'formId': json['form_id'] == null ? undefined : json['form_id'],
        'templateId': json['template_id'] == null ? undefined : json['template_id'],
        'clientId': json['client_id'] == null ? undefined : json['client_id'],
        'clientSecret': json['client_secret'] == null ? undefined : json['client_secret'],
        'apiKey': json['api_key'] == null ? undefined : json['api_key'],
        'allowDrawing': json['allow_drawing'] == null ? undefined : json['allow_drawing'],
        'allowUpload': json['allow_upload'] == null ? undefined : json['allow_upload'],
        'allowTyping': json['allow_typing'] == null ? undefined : json['allow_typing'],
    };
}

export function ExternalSignatureConfigurationToJSON(json: any): ExternalSignatureConfiguration {
    return ExternalSignatureConfigurationToJSONTyped(json, false);
}

export function ExternalSignatureConfigurationToJSONTyped(value?: ExternalSignatureConfiguration | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'service': ExternalSignatureServiceToJSON(value['service']),
        'service_url': value['serviceUrl'],
        'form_id': value['formId'],
        'template_id': value['templateId'],
        'client_id': value['clientId'],
        'client_secret': value['clientSecret'],
        'api_key': value['apiKey'],
        'allow_drawing': value['allowDrawing'],
        'allow_upload': value['allowUpload'],
        'allow_typing': value['allowTyping'],
    };
}

