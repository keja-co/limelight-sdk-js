/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.94
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ActionTypeEnum } from './ActionTypeEnum';
import {
    ActionTypeEnumFromJSON,
    ActionTypeEnumFromJSONTyped,
    ActionTypeEnumToJSON,
    ActionTypeEnumToJSONTyped,
} from './ActionTypeEnum';

/**
 * 
 * @export
 * @interface AuditLog
 */
export interface AuditLog {
    /**
     * 
     * @type {number}
     * @memberof AuditLog
     */
    readonly id: number;
    /**
     * 
     * @type {Date}
     * @memberof AuditLog
     */
    readonly createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof AuditLog
     */
    readonly updatedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof AuditLog
     */
    archiveAt?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof AuditLog
     */
    readonly timestamp: Date;
    /**
     * 
     * @type {ActionTypeEnum}
     * @memberof AuditLog
     */
    actionType: ActionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AuditLog
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof AuditLog
     */
    targetObject: string;
    /**
     * 
     * @type {any}
     * @memberof AuditLog
     */
    beforeState: any | null;
    /**
     * 
     * @type {any}
     * @memberof AuditLog
     */
    afterState: any | null;
    /**
     * 
     * @type {number}
     * @memberof AuditLog
     */
    tenant: number;
    /**
     * 
     * @type {number}
     * @memberof AuditLog
     */
    createdBy?: number | null;
    /**
     * 
     * @type {number}
     * @memberof AuditLog
     */
    updatedBy?: number | null;
    /**
     * 
     * @type {number}
     * @memberof AuditLog
     */
    user: number;
}



/**
 * Check if a given object implements the AuditLog interface.
 */
export function instanceOfAuditLog(value: object): value is AuditLog {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    if (!('actionType' in value) || value['actionType'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('targetObject' in value) || value['targetObject'] === undefined) return false;
    if (!('beforeState' in value) || value['beforeState'] === undefined) return false;
    if (!('afterState' in value) || value['afterState'] === undefined) return false;
    if (!('tenant' in value) || value['tenant'] === undefined) return false;
    if (!('user' in value) || value['user'] === undefined) return false;
    return true;
}

export function AuditLogFromJSON(json: any): AuditLog {
    return AuditLogFromJSONTyped(json, false);
}

export function AuditLogFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuditLog {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'archiveAt': json['archive_at'] == null ? undefined : (new Date(json['archive_at'])),
        'timestamp': (new Date(json['timestamp'])),
        'actionType': ActionTypeEnumFromJSON(json['action_type']),
        'description': json['description'],
        'targetObject': json['target_object'],
        'beforeState': json['before_state'],
        'afterState': json['after_state'],
        'tenant': json['tenant'],
        'createdBy': json['created_by'] == null ? undefined : json['created_by'],
        'updatedBy': json['updated_by'] == null ? undefined : json['updated_by'],
        'user': json['user'],
    };
}

export function AuditLogToJSON(json: any): AuditLog {
    return AuditLogToJSONTyped(json, false);
}

export function AuditLogToJSONTyped(value?: Omit<AuditLog, 'id'|'created_at'|'updated_at'|'timestamp'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'archive_at': value['archiveAt'] === null ? null : ((value['archiveAt'] as any)?.toISOString()),
        'action_type': ActionTypeEnumToJSON(value['actionType']),
        'description': value['description'],
        'target_object': value['targetObject'],
        'before_state': value['beforeState'],
        'after_state': value['afterState'],
        'tenant': value['tenant'],
        'created_by': value['createdBy'],
        'updated_by': value['updatedBy'],
        'user': value['user'],
    };
}

