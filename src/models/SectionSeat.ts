/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.99
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Section } from './Section';
import {
    SectionFromJSON,
    SectionFromJSONTyped,
    SectionToJSON,
    SectionToJSONTyped,
} from './Section';

/**
 * 
 * @export
 * @interface SectionSeat
 */
export interface SectionSeat {
    /**
     * 
     * @type {number}
     * @memberof SectionSeat
     */
    readonly id: number;
    /**
     * 
     * @type {Section}
     * @memberof SectionSeat
     */
    readonly section: Section;
    /**
     * 
     * @type {Date}
     * @memberof SectionSeat
     */
    readonly createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof SectionSeat
     */
    readonly updatedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof SectionSeat
     */
    readonly archiveAt: Date | null;
    /**
     * Seat Code, example: 1, 2, 3 etc. This should be unique within the row.
     * @type {string}
     * @memberof SectionSeat
     */
    seatCode: string;
    /**
     * Row identifier for the seat, example: A, B, C, etc.
     * @type {string}
     * @memberof SectionSeat
     */
    row: string;
    /**
     * Additional notes about the seat, if any.
     * @type {string}
     * @memberof SectionSeat
     */
    notes?: string;
    /**
     * Indicates if the seat has an obstructed view. True if obstructed, False otherwise. Add obstruction notes in the notes field.
     * @type {boolean}
     * @memberof SectionSeat
     */
    obstructedView?: boolean;
    /**
     * X position for display purposes, used for layout rendering.
     * @type {number}
     * @memberof SectionSeat
     */
    displayXPosition?: number;
    /**
     * Y position for display purposes, used for layout rendering.
     * @type {number}
     * @memberof SectionSeat
     */
    displayYPosition?: number;
    /**
     * Indicates if the seat is accessible for individuals with disabilities. Include accessibility notes in the notes field.
     * @type {boolean}
     * @memberof SectionSeat
     */
    accessible?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SectionSeat
     */
    readonly tenant: number;
    /**
     * 
     * @type {number}
     * @memberof SectionSeat
     */
    readonly createdBy: number | null;
    /**
     * 
     * @type {number}
     * @memberof SectionSeat
     */
    readonly updatedBy: number | null;
}

/**
 * Check if a given object implements the SectionSeat interface.
 */
export function instanceOfSectionSeat(value: object): value is SectionSeat {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('section' in value) || value['section'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('archiveAt' in value) || value['archiveAt'] === undefined) return false;
    if (!('seatCode' in value) || value['seatCode'] === undefined) return false;
    if (!('row' in value) || value['row'] === undefined) return false;
    if (!('tenant' in value) || value['tenant'] === undefined) return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined) return false;
    if (!('updatedBy' in value) || value['updatedBy'] === undefined) return false;
    return true;
}

export function SectionSeatFromJSON(json: any): SectionSeat {
    return SectionSeatFromJSONTyped(json, false);
}

export function SectionSeatFromJSONTyped(json: any, ignoreDiscriminator: boolean): SectionSeat {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'section': SectionFromJSON(json['section']),
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'archiveAt': (json['archive_at'] == null ? null : new Date(json['archive_at'])),
        'seatCode': json['seat_code'],
        'row': json['row'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'obstructedView': json['obstructed_view'] == null ? undefined : json['obstructed_view'],
        'displayXPosition': json['display_x_position'] == null ? undefined : json['display_x_position'],
        'displayYPosition': json['display_y_position'] == null ? undefined : json['display_y_position'],
        'accessible': json['accessible'] == null ? undefined : json['accessible'],
        'tenant': json['tenant'],
        'createdBy': json['created_by'],
        'updatedBy': json['updated_by'],
    };
}

export function SectionSeatToJSON(json: any): SectionSeat {
    return SectionSeatToJSONTyped(json, false);
}

export function SectionSeatToJSONTyped(value?: Omit<SectionSeat, 'id'|'section'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'seat_code': value['seatCode'],
        'row': value['row'],
        'notes': value['notes'],
        'obstructed_view': value['obstructedView'],
        'display_x_position': value['displayXPosition'],
        'display_y_position': value['displayYPosition'],
        'accessible': value['accessible'],
    };
}

