/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.105
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RehearsalWithParticipantRead } from './RehearsalWithParticipantRead';
import {
    RehearsalWithParticipantReadFromJSON,
    RehearsalWithParticipantReadFromJSONTyped,
    RehearsalWithParticipantReadToJSON,
    RehearsalWithParticipantReadToJSONTyped,
} from './RehearsalWithParticipantRead';
import type { Performance } from './Performance';
import {
    PerformanceFromJSON,
    PerformanceFromJSONTyped,
    PerformanceToJSON,
    PerformanceToJSONTyped,
} from './Performance';

/**
 * 
 * @export
 * @interface MemberEvents
 */
export interface MemberEvents {
    /**
     * 
     * @type {Array<RehearsalWithParticipantRead>}
     * @memberof MemberEvents
     */
    rehearsals: Array<RehearsalWithParticipantRead>;
    /**
     * 
     * @type {Array<Performance>}
     * @memberof MemberEvents
     */
    performances: Array<Performance>;
}

/**
 * Check if a given object implements the MemberEvents interface.
 */
export function instanceOfMemberEvents(value: object): value is MemberEvents {
    if (!('rehearsals' in value) || value['rehearsals'] === undefined) return false;
    if (!('performances' in value) || value['performances'] === undefined) return false;
    return true;
}

export function MemberEventsFromJSON(json: any): MemberEvents {
    return MemberEventsFromJSONTyped(json, false);
}

export function MemberEventsFromJSONTyped(json: any, ignoreDiscriminator: boolean): MemberEvents {
    if (json == null) {
        return json;
    }
    return {
        
        'rehearsals': ((json['rehearsals'] as Array<any>).map(RehearsalWithParticipantReadFromJSON)),
        'performances': ((json['performances'] as Array<any>).map(PerformanceFromJSON)),
    };
}

export function MemberEventsToJSON(json: any): MemberEvents {
    return MemberEventsToJSONTyped(json, false);
}

export function MemberEventsToJSONTyped(value?: MemberEvents | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'rehearsals': ((value['rehearsals'] as Array<any>).map(RehearsalWithParticipantReadToJSON)),
        'performances': ((value['performances'] as Array<any>).map(PerformanceToJSON)),
    };
}

