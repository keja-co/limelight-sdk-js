/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.85
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Address } from './Address';
import {
    AddressFromJSON,
    AddressFromJSONTyped,
    AddressToJSON,
    AddressToJSONTyped,
} from './Address';

/**
 * 
 * @export
 * @interface Venue
 */
export interface Venue {
    /**
     * 
     * @type {number}
     * @memberof Venue
     */
    readonly id: number;
    /**
     * 
     * @type {Address}
     * @memberof Venue
     */
    address: Address;
    /**
     * 
     * @type {Date}
     * @memberof Venue
     */
    readonly createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Venue
     */
    readonly updatedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Venue
     */
    readonly archiveAt: Date | null;
    /**
     * Name of the venue
     * @type {string}
     * @memberof Venue
     */
    name: string;
    /**
     * Additional notes about the venue
     * @type {string}
     * @memberof Venue
     */
    notes?: string;
    /**
     * Contact person for the venue
     * @type {string}
     * @memberof Venue
     */
    contactName?: string;
    /**
     * Email address for the venue contact
     * @type {string}
     * @memberof Venue
     */
    contactEmail?: string;
    /**
     * Contact person for the venue contact
     * @type {string}
     * @memberof Venue
     */
    contactPhone?: string;
    /**
     * Is the venue currently active?
     * @type {boolean}
     * @memberof Venue
     */
    isActive?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Venue
     */
    readonly tenant: number;
    /**
     * 
     * @type {number}
     * @memberof Venue
     */
    readonly createdBy: number | null;
    /**
     * 
     * @type {number}
     * @memberof Venue
     */
    readonly updatedBy: number | null;
    /**
     * Tags associated with the venue
     * @type {Array<number>}
     * @memberof Venue
     */
    tags: Array<number>;
}

/**
 * Check if a given object implements the Venue interface.
 */
export function instanceOfVenue(value: object): value is Venue {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('address' in value) || value['address'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('archiveAt' in value) || value['archiveAt'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('tenant' in value) || value['tenant'] === undefined) return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined) return false;
    if (!('updatedBy' in value) || value['updatedBy'] === undefined) return false;
    if (!('tags' in value) || value['tags'] === undefined) return false;
    return true;
}

export function VenueFromJSON(json: any): Venue {
    return VenueFromJSONTyped(json, false);
}

export function VenueFromJSONTyped(json: any, ignoreDiscriminator: boolean): Venue {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'address': AddressFromJSON(json['address']),
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'archiveAt': (json['archive_at'] == null ? null : new Date(json['archive_at'])),
        'name': json['name'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'contactName': json['contact_name'] == null ? undefined : json['contact_name'],
        'contactEmail': json['contact_email'] == null ? undefined : json['contact_email'],
        'contactPhone': json['contact_phone'] == null ? undefined : json['contact_phone'],
        'isActive': json['is_active'] == null ? undefined : json['is_active'],
        'tenant': json['tenant'],
        'createdBy': json['created_by'],
        'updatedBy': json['updated_by'],
        'tags': json['tags'],
    };
}

export function VenueToJSON(json: any): Venue {
    return VenueToJSONTyped(json, false);
}

export function VenueToJSONTyped(value?: Omit<Venue, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'address': AddressToJSON(value['address']),
        'name': value['name'],
        'notes': value['notes'],
        'contact_name': value['contactName'],
        'contact_email': value['contactEmail'],
        'contact_phone': value['contactPhone'],
        'is_active': value['isActive'],
        'tags': value['tags'],
    };
}

