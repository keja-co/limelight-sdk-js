/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.93
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Serializer for the Signup model.
 * @export
 * @interface Signup
 */
export interface Signup {
    /**
     * 
     * @type {number}
     * @memberof Signup
     */
    readonly id: number;
    /**
     * 
     * @type {Date}
     * @memberof Signup
     */
    readonly createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Signup
     */
    readonly updatedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Signup
     */
    readonly archiveAt: Date | null;
    /**
     * First name of the user signing up
     * @type {string}
     * @memberof Signup
     */
    firstName?: string | null;
    /**
     * Last name of the user signing up
     * @type {string}
     * @memberof Signup
     */
    lastName?: string | null;
    /**
     * Email address of the user signing up
     * @type {string}
     * @memberof Signup
     */
    email?: string | null;
    /**
     * Phone number of the user signing up
     * @type {string}
     * @memberof Signup
     */
    phone?: string | null;
    /**
     * Notes for the signup. Supports markdown.
     * @type {string}
     * @memberof Signup
     */
    notes?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Signup
     */
    readonly tenant: number;
    /**
     * 
     * @type {number}
     * @memberof Signup
     */
    readonly createdBy: number | null;
    /**
     * 
     * @type {number}
     * @memberof Signup
     */
    readonly updatedBy: number | null;
    /**
     * 
     * @type {number}
     * @memberof Signup
     */
    slot: number;
    /**
     * If the participant has an account, this will be set to the user. If not, it will be null and the first_name, last_name, email, and phone fields will be used to identify the participant.
     * @type {number}
     * @memberof Signup
     */
    user?: number | null;
}

/**
 * Check if a given object implements the Signup interface.
 */
export function instanceOfSignup(value: object): value is Signup {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('archiveAt' in value) || value['archiveAt'] === undefined) return false;
    if (!('tenant' in value) || value['tenant'] === undefined) return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined) return false;
    if (!('updatedBy' in value) || value['updatedBy'] === undefined) return false;
    if (!('slot' in value) || value['slot'] === undefined) return false;
    return true;
}

export function SignupFromJSON(json: any): Signup {
    return SignupFromJSONTyped(json, false);
}

export function SignupFromJSONTyped(json: any, ignoreDiscriminator: boolean): Signup {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'archiveAt': (json['archive_at'] == null ? null : new Date(json['archive_at'])),
        'firstName': json['first_name'] == null ? undefined : json['first_name'],
        'lastName': json['last_name'] == null ? undefined : json['last_name'],
        'email': json['email'] == null ? undefined : json['email'],
        'phone': json['phone'] == null ? undefined : json['phone'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'tenant': json['tenant'],
        'createdBy': json['created_by'],
        'updatedBy': json['updated_by'],
        'slot': json['slot'],
        'user': json['user'] == null ? undefined : json['user'],
    };
}

export function SignupToJSON(json: any): Signup {
    return SignupToJSONTyped(json, false);
}

export function SignupToJSONTyped(value?: Omit<Signup, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'first_name': value['firstName'],
        'last_name': value['lastName'],
        'email': value['email'],
        'phone': value['phone'],
        'notes': value['notes'],
        'slot': value['slot'],
        'user': value['user'],
    };
}

