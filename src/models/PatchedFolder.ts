/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.106
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Subfolder } from './Subfolder';
import {
    SubfolderFromJSON,
    SubfolderFromJSONTyped,
    SubfolderToJSON,
    SubfolderToJSONTyped,
} from './Subfolder';

/**
 * 
 * @export
 * @interface PatchedFolder
 */
export interface PatchedFolder {
    /**
     * 
     * @type {number}
     * @memberof PatchedFolder
     */
    readonly id?: number;
    /**
     * 
     * @type {Array<Subfolder>}
     * @memberof PatchedFolder
     */
    subfolders?: Array<Subfolder>;
    /**
     * 
     * @type {Date}
     * @memberof PatchedFolder
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PatchedFolder
     */
    readonly updatedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PatchedFolder
     */
    readonly archiveAt?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedFolder
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedFolder
     */
    readonly tenant?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedFolder
     */
    readonly createdBy?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedFolder
     */
    readonly updatedBy?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedFolder
     */
    repo?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedFolder
     */
    parent?: number | null;
}

/**
 * Check if a given object implements the PatchedFolder interface.
 */
export function instanceOfPatchedFolder(value: object): value is PatchedFolder {
    return true;
}

export function PatchedFolderFromJSON(json: any): PatchedFolder {
    return PatchedFolderFromJSONTyped(json, false);
}

export function PatchedFolderFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchedFolder {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'subfolders': json['subfolders'] == null ? undefined : ((json['subfolders'] as Array<any>).map(SubfolderFromJSON)),
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
        'archiveAt': json['archive_at'] == null ? undefined : (new Date(json['archive_at'])),
        'name': json['name'] == null ? undefined : json['name'],
        'tenant': json['tenant'] == null ? undefined : json['tenant'],
        'createdBy': json['created_by'] == null ? undefined : json['created_by'],
        'updatedBy': json['updated_by'] == null ? undefined : json['updated_by'],
        'repo': json['repo'] == null ? undefined : json['repo'],
        'parent': json['parent'] == null ? undefined : json['parent'],
    };
}

export function PatchedFolderToJSON(json: any): PatchedFolder {
    return PatchedFolderToJSONTyped(json, false);
}

export function PatchedFolderToJSONTyped(value?: Omit<PatchedFolder, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'subfolders': value['subfolders'] == null ? undefined : ((value['subfolders'] as Array<any>).map(SubfolderToJSON)),
        'name': value['name'],
        'repo': value['repo'],
        'parent': value['parent'],
    };
}

