/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.102
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DocumentStatusEnum } from './DocumentStatusEnum';
import {
    DocumentStatusEnumFromJSON,
    DocumentStatusEnumFromJSONTyped,
    DocumentStatusEnumToJSON,
    DocumentStatusEnumToJSONTyped,
} from './DocumentStatusEnum';

/**
 * 
 * @export
 * @interface Document
 */
export interface Document {
    /**
     * 
     * @type {number}
     * @memberof Document
     */
    readonly id: number;
    /**
     * 
     * @type {Date}
     * @memberof Document
     */
    readonly createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Document
     */
    readonly updatedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Document
     */
    readonly archiveAt: Date | null;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    description?: string;
    /**
     * 
     * @type {DocumentStatusEnum}
     * @memberof Document
     */
    status?: DocumentStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof Document
     */
    readonly tenant: number;
    /**
     * 
     * @type {number}
     * @memberof Document
     */
    readonly createdBy: number | null;
    /**
     * 
     * @type {number}
     * @memberof Document
     */
    readonly updatedBy: number | null;
    /**
     * 
     * @type {number}
     * @memberof Document
     */
    production?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Document
     */
    author?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Document
     */
    readonly repo: number;
    /**
     * 
     * @type {number}
     * @memberof Document
     */
    folder?: number | null;
    /**
     * The document that supersedes this one, if any
     * @type {number}
     * @memberof Document
     */
    supersededBy?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof Document
     */
    tags: Array<number>;
}



/**
 * Check if a given object implements the Document interface.
 */
export function instanceOfDocument(value: object): value is Document {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('archiveAt' in value) || value['archiveAt'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('tenant' in value) || value['tenant'] === undefined) return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined) return false;
    if (!('updatedBy' in value) || value['updatedBy'] === undefined) return false;
    if (!('repo' in value) || value['repo'] === undefined) return false;
    if (!('tags' in value) || value['tags'] === undefined) return false;
    return true;
}

export function DocumentFromJSON(json: any): Document {
    return DocumentFromJSONTyped(json, false);
}

export function DocumentFromJSONTyped(json: any, ignoreDiscriminator: boolean): Document {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'archiveAt': (json['archive_at'] == null ? null : new Date(json['archive_at'])),
        'title': json['title'],
        'description': json['description'] == null ? undefined : json['description'],
        'status': json['status'] == null ? undefined : DocumentStatusEnumFromJSON(json['status']),
        'tenant': json['tenant'],
        'createdBy': json['created_by'],
        'updatedBy': json['updated_by'],
        'production': json['production'] == null ? undefined : json['production'],
        'author': json['author'] == null ? undefined : json['author'],
        'repo': json['repo'],
        'folder': json['folder'] == null ? undefined : json['folder'],
        'supersededBy': json['superseded_by'] == null ? undefined : json['superseded_by'],
        'tags': json['tags'],
    };
}

export function DocumentToJSON(json: any): Document {
    return DocumentToJSONTyped(json, false);
}

export function DocumentToJSONTyped(value?: Omit<Document, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'|'repo'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'title': value['title'],
        'description': value['description'],
        'status': DocumentStatusEnumToJSON(value['status']),
        'production': value['production'],
        'author': value['author'],
        'folder': value['folder'],
        'superseded_by': value['supersededBy'],
        'tags': value['tags'],
    };
}

