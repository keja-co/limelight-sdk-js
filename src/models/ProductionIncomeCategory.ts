/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.113
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ProductionIncomeCategory
 */
export interface ProductionIncomeCategory {
    /**
     * 
     * @type {number}
     * @memberof ProductionIncomeCategory
     */
    readonly id: number;
    /**
     * 
     * @type {string}
     * @memberof ProductionIncomeCategory
     */
    readonly productionName: string;
    /**
     * 
     * @type {string}
     * @memberof ProductionIncomeCategory
     */
    readonly incomeCategoryName: string;
    /**
     * 
     * @type {string}
     * @memberof ProductionIncomeCategory
     */
    readonly incomeTypeLabel: string;
    /**
     * 
     * @type {Date}
     * @memberof ProductionIncomeCategory
     */
    readonly createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof ProductionIncomeCategory
     */
    readonly updatedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof ProductionIncomeCategory
     */
    readonly archiveAt: Date | null;
    /**
     * 
     * @type {string}
     * @memberof ProductionIncomeCategory
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof ProductionIncomeCategory
     */
    lineCode: number;
    /**
     * 
     * @type {string}
     * @memberof ProductionIncomeCategory
     */
    budget: string;
    /**
     * 
     * @type {string}
     * @memberof ProductionIncomeCategory
     */
    notes?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductionIncomeCategory
     */
    readonly tenant: number;
    /**
     * 
     * @type {number}
     * @memberof ProductionIncomeCategory
     */
    readonly createdBy: number | null;
    /**
     * 
     * @type {number}
     * @memberof ProductionIncomeCategory
     */
    readonly updatedBy: number | null;
    /**
     * 
     * @type {number}
     * @memberof ProductionIncomeCategory
     */
    production: number;
    /**
     * 
     * @type {number}
     * @memberof ProductionIncomeCategory
     */
    incomeCategory?: number | null;
}

/**
 * Check if a given object implements the ProductionIncomeCategory interface.
 */
export function instanceOfProductionIncomeCategory(value: object): value is ProductionIncomeCategory {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('productionName' in value) || value['productionName'] === undefined) return false;
    if (!('incomeCategoryName' in value) || value['incomeCategoryName'] === undefined) return false;
    if (!('incomeTypeLabel' in value) || value['incomeTypeLabel'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('archiveAt' in value) || value['archiveAt'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('lineCode' in value) || value['lineCode'] === undefined) return false;
    if (!('budget' in value) || value['budget'] === undefined) return false;
    if (!('tenant' in value) || value['tenant'] === undefined) return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined) return false;
    if (!('updatedBy' in value) || value['updatedBy'] === undefined) return false;
    if (!('production' in value) || value['production'] === undefined) return false;
    return true;
}

export function ProductionIncomeCategoryFromJSON(json: any): ProductionIncomeCategory {
    return ProductionIncomeCategoryFromJSONTyped(json, false);
}

export function ProductionIncomeCategoryFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductionIncomeCategory {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'productionName': json['production_name'],
        'incomeCategoryName': json['income_category_name'],
        'incomeTypeLabel': json['income_type_label'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'archiveAt': (json['archive_at'] == null ? null : new Date(json['archive_at'])),
        'name': json['name'],
        'lineCode': json['line_code'],
        'budget': json['budget'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'tenant': json['tenant'],
        'createdBy': json['created_by'],
        'updatedBy': json['updated_by'],
        'production': json['production'],
        'incomeCategory': json['income_category'] == null ? undefined : json['income_category'],
    };
}

export function ProductionIncomeCategoryToJSON(json: any): ProductionIncomeCategory {
    return ProductionIncomeCategoryToJSONTyped(json, false);
}

export function ProductionIncomeCategoryToJSONTyped(value?: Omit<ProductionIncomeCategory, 'id'|'production_name'|'income_category_name'|'income_type_label'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'line_code': value['lineCode'],
        'budget': value['budget'],
        'notes': value['notes'],
        'production': value['production'],
        'income_category': value['incomeCategory'],
    };
}

