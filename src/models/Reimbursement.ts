/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.94
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ReimbursementStatusEnum } from './ReimbursementStatusEnum';
import {
    ReimbursementStatusEnumFromJSON,
    ReimbursementStatusEnumFromJSONTyped,
    ReimbursementStatusEnumToJSON,
    ReimbursementStatusEnumToJSONTyped,
} from './ReimbursementStatusEnum';

/**
 * 
 * @export
 * @interface Reimbursement
 */
export interface Reimbursement {
    /**
     * 
     * @type {number}
     * @memberof Reimbursement
     */
    readonly id: number;
    /**
     * 
     * @type {Date}
     * @memberof Reimbursement
     */
    readonly createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Reimbursement
     */
    readonly updatedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Reimbursement
     */
    readonly archiveAt: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof Reimbursement
     */
    approvedDateTime?: Date;
    /**
     * 
     * @type {string}
     * @memberof Reimbursement
     */
    amount: string;
    /**
     * 
     * @type {Date}
     * @memberof Reimbursement
     */
    scheduledDate?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof Reimbursement
     */
    processedDate?: Date | null;
    /**
     * 
     * @type {ReimbursementStatusEnum}
     * @memberof Reimbursement
     */
    status?: ReimbursementStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Reimbursement
     */
    paymentReference?: string;
    /**
     * 
     * @type {string}
     * @memberof Reimbursement
     */
    notes?: string;
    /**
     * 
     * @type {number}
     * @memberof Reimbursement
     */
    readonly tenant: number;
    /**
     * 
     * @type {number}
     * @memberof Reimbursement
     */
    readonly createdBy: number | null;
    /**
     * 
     * @type {number}
     * @memberof Reimbursement
     */
    readonly updatedBy: number | null;
    /**
     * 
     * @type {number}
     * @memberof Reimbursement
     */
    payee?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Reimbursement
     */
    approver?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Reimbursement
     */
    expense?: number | null;
}



/**
 * Check if a given object implements the Reimbursement interface.
 */
export function instanceOfReimbursement(value: object): value is Reimbursement {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('archiveAt' in value) || value['archiveAt'] === undefined) return false;
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('tenant' in value) || value['tenant'] === undefined) return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined) return false;
    if (!('updatedBy' in value) || value['updatedBy'] === undefined) return false;
    return true;
}

export function ReimbursementFromJSON(json: any): Reimbursement {
    return ReimbursementFromJSONTyped(json, false);
}

export function ReimbursementFromJSONTyped(json: any, ignoreDiscriminator: boolean): Reimbursement {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'archiveAt': (json['archive_at'] == null ? null : new Date(json['archive_at'])),
        'approvedDateTime': json['approved_date_time'] == null ? undefined : (new Date(json['approved_date_time'])),
        'amount': json['amount'],
        'scheduledDate': json['scheduled_date'] == null ? undefined : (new Date(json['scheduled_date'])),
        'processedDate': json['processed_date'] == null ? undefined : (new Date(json['processed_date'])),
        'status': json['status'] == null ? undefined : ReimbursementStatusEnumFromJSON(json['status']),
        'paymentReference': json['payment_reference'] == null ? undefined : json['payment_reference'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'tenant': json['tenant'],
        'createdBy': json['created_by'],
        'updatedBy': json['updated_by'],
        'payee': json['payee'] == null ? undefined : json['payee'],
        'approver': json['approver'] == null ? undefined : json['approver'],
        'expense': json['expense'] == null ? undefined : json['expense'],
    };
}

export function ReimbursementToJSON(json: any): Reimbursement {
    return ReimbursementToJSONTyped(json, false);
}

export function ReimbursementToJSONTyped(value?: Omit<Reimbursement, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'approved_date_time': value['approvedDateTime'] == null ? undefined : ((value['approvedDateTime']).toISOString()),
        'amount': value['amount'],
        'scheduled_date': value['scheduledDate'] === null ? null : ((value['scheduledDate'] as any)?.toISOString().substring(0,10)),
        'processed_date': value['processedDate'] === null ? null : ((value['processedDate'] as any)?.toISOString().substring(0,10)),
        'status': ReimbursementStatusEnumToJSON(value['status']),
        'payment_reference': value['paymentReference'],
        'notes': value['notes'],
        'payee': value['payee'],
        'approver': value['approver'],
        'expense': value['expense'],
    };
}

