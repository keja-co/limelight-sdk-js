/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.106
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RehearsalWithParticipantRead
 */
export interface RehearsalWithParticipantRead {
    /**
     * 
     * @type {number}
     * @memberof RehearsalWithParticipantRead
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof RehearsalWithParticipantRead
     */
    production: number;
    /**
     * 
     * @type {Date}
     * @memberof RehearsalWithParticipantRead
     */
    startDatetime: Date;
    /**
     * 
     * @type {Date}
     * @memberof RehearsalWithParticipantRead
     */
    endDatetime: Date;
    /**
     * 
     * @type {number}
     * @memberof RehearsalWithParticipantRead
     */
    venue: number | null;
    /**
     * 
     * @type {string}
     * @memberof RehearsalWithParticipantRead
     */
    notes: string;
    /**
     * 
     * @type {boolean}
     * @memberof RehearsalWithParticipantRead
     */
    participantIsRequired: boolean;
    /**
     * 
     * @type {number}
     * @memberof RehearsalWithParticipantRead
     */
    participantId: number;
}

/**
 * Check if a given object implements the RehearsalWithParticipantRead interface.
 */
export function instanceOfRehearsalWithParticipantRead(value: object): value is RehearsalWithParticipantRead {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('production' in value) || value['production'] === undefined) return false;
    if (!('startDatetime' in value) || value['startDatetime'] === undefined) return false;
    if (!('endDatetime' in value) || value['endDatetime'] === undefined) return false;
    if (!('venue' in value) || value['venue'] === undefined) return false;
    if (!('notes' in value) || value['notes'] === undefined) return false;
    if (!('participantIsRequired' in value) || value['participantIsRequired'] === undefined) return false;
    if (!('participantId' in value) || value['participantId'] === undefined) return false;
    return true;
}

export function RehearsalWithParticipantReadFromJSON(json: any): RehearsalWithParticipantRead {
    return RehearsalWithParticipantReadFromJSONTyped(json, false);
}

export function RehearsalWithParticipantReadFromJSONTyped(json: any, ignoreDiscriminator: boolean): RehearsalWithParticipantRead {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'production': json['production'],
        'startDatetime': (new Date(json['start_datetime'])),
        'endDatetime': (new Date(json['end_datetime'])),
        'venue': json['venue'],
        'notes': json['notes'],
        'participantIsRequired': json['participant_is_required'],
        'participantId': json['participant_id'],
    };
}

export function RehearsalWithParticipantReadToJSON(json: any): RehearsalWithParticipantRead {
    return RehearsalWithParticipantReadToJSONTyped(json, false);
}

export function RehearsalWithParticipantReadToJSONTyped(value?: RehearsalWithParticipantRead | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'production': value['production'],
        'start_datetime': ((value['startDatetime']).toISOString()),
        'end_datetime': ((value['endDatetime']).toISOString()),
        'venue': value['venue'],
        'notes': value['notes'],
        'participant_is_required': value['participantIsRequired'],
        'participant_id': value['participantId'],
    };
}

