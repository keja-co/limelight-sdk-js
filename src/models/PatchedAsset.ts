/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.111
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AssetTypeEnum } from './AssetTypeEnum';
import {
    AssetTypeEnumFromJSON,
    AssetTypeEnumFromJSONTyped,
    AssetTypeEnumToJSON,
    AssetTypeEnumToJSONTyped,
} from './AssetTypeEnum';
import type { ConditionEnum } from './ConditionEnum';
import {
    ConditionEnumFromJSON,
    ConditionEnumFromJSONTyped,
    ConditionEnumToJSON,
    ConditionEnumToJSONTyped,
} from './ConditionEnum';

/**
 * 
 * @export
 * @interface PatchedAsset
 */
export interface PatchedAsset {
    /**
     * 
     * @type {number}
     * @memberof PatchedAsset
     */
    readonly id?: number;
    /**
     * Return True if the asset currently has an active assignment now.
     * 
     * Active means: start_date <= now AND (end_date IS NULL OR end_date >= now)
     * @type {boolean}
     * @memberof PatchedAsset
     */
    readonly isAssigned?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof PatchedAsset
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PatchedAsset
     */
    readonly updatedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PatchedAsset
     */
    readonly archiveAt?: Date | null;
    /**
     * Name of the asset
     * @type {string}
     * @memberof PatchedAsset
     */
    name?: string;
    /**
     * Type of the asset, either company or personal
     * 
     * * `company` - Company Property
     * * `personal` - Personal Property
     * @type {AssetTypeEnum}
     * @memberof PatchedAsset
     */
    type?: AssetTypeEnum;
    /**
     * Description of the asset
     * @type {string}
     * @memberof PatchedAsset
     */
    description?: string | null;
    /**
     * Additional notes about the asset
     * @type {string}
     * @memberof PatchedAsset
     */
    notes?: string | null;
    /**
     * Monetary value of the asset
     * @type {string}
     * @memberof PatchedAsset
     */
    value?: string | null;
    /**
     * Condition of the asset
     * 
     * * `new` - New
     * * `good` - Good
     * * `fair` - Fair
     * * `poor` - Poor
     * * `damaged` - Damaged
     * * `out_of_service` - Out of Service
     * @type {ConditionEnum}
     * @memberof PatchedAsset
     */
    condition?: ConditionEnum;
    /**
     * 
     * @type {number}
     * @memberof PatchedAsset
     */
    readonly tenant?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedAsset
     */
    readonly createdBy?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedAsset
     */
    readonly updatedBy?: number | null;
    /**
     * User who owns the asset
     * @type {number}
     * @memberof PatchedAsset
     */
    owningUser?: number | null;
}



/**
 * Check if a given object implements the PatchedAsset interface.
 */
export function instanceOfPatchedAsset(value: object): value is PatchedAsset {
    return true;
}

export function PatchedAssetFromJSON(json: any): PatchedAsset {
    return PatchedAssetFromJSONTyped(json, false);
}

export function PatchedAssetFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchedAsset {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'isAssigned': json['is_assigned'] == null ? undefined : json['is_assigned'],
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
        'archiveAt': json['archive_at'] == null ? undefined : (new Date(json['archive_at'])),
        'name': json['name'] == null ? undefined : json['name'],
        'type': json['type'] == null ? undefined : AssetTypeEnumFromJSON(json['type']),
        'description': json['description'] == null ? undefined : json['description'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'value': json['value'] == null ? undefined : json['value'],
        'condition': json['condition'] == null ? undefined : ConditionEnumFromJSON(json['condition']),
        'tenant': json['tenant'] == null ? undefined : json['tenant'],
        'createdBy': json['created_by'] == null ? undefined : json['created_by'],
        'updatedBy': json['updated_by'] == null ? undefined : json['updated_by'],
        'owningUser': json['owning_user'] == null ? undefined : json['owning_user'],
    };
}

export function PatchedAssetToJSON(json: any): PatchedAsset {
    return PatchedAssetToJSONTyped(json, false);
}

export function PatchedAssetToJSONTyped(value?: Omit<PatchedAsset, 'id'|'is_assigned'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'type': AssetTypeEnumToJSON(value['type']),
        'description': value['description'],
        'notes': value['notes'],
        'value': value['value'],
        'condition': ConditionEnumToJSON(value['condition']),
        'owning_user': value['owningUser'],
    };
}

