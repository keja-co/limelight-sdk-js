/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.77
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PatchedRehearsalParticipant
 */
export interface PatchedRehearsalParticipant {
    /**
     * 
     * @type {number}
     * @memberof PatchedRehearsalParticipant
     */
    readonly id?: number;
    /**
     * 
     * @type {Date}
     * @memberof PatchedRehearsalParticipant
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PatchedRehearsalParticipant
     */
    readonly updatedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PatchedRehearsalParticipant
     */
    readonly archiveAt?: Date | null;
    /**
     * Indicates if the participant is required for this rehearsal (as some members may be added to a rehearsal but not be required to attend).
     * @type {boolean}
     * @memberof PatchedRehearsalParticipant
     */
    isRequired?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PatchedRehearsalParticipant
     */
    notes?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedRehearsalParticipant
     */
    readonly tenant?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedRehearsalParticipant
     */
    readonly createdBy?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedRehearsalParticipant
     */
    readonly updatedBy?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedRehearsalParticipant
     */
    rehearsal?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedRehearsalParticipant
     */
    member?: number;
}

/**
 * Check if a given object implements the PatchedRehearsalParticipant interface.
 */
export function instanceOfPatchedRehearsalParticipant(value: object): value is PatchedRehearsalParticipant {
    return true;
}

export function PatchedRehearsalParticipantFromJSON(json: any): PatchedRehearsalParticipant {
    return PatchedRehearsalParticipantFromJSONTyped(json, false);
}

export function PatchedRehearsalParticipantFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchedRehearsalParticipant {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
        'archiveAt': json['archive_at'] == null ? undefined : (new Date(json['archive_at'])),
        'isRequired': json['is_required'] == null ? undefined : json['is_required'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'tenant': json['tenant'] == null ? undefined : json['tenant'],
        'createdBy': json['created_by'] == null ? undefined : json['created_by'],
        'updatedBy': json['updated_by'] == null ? undefined : json['updated_by'],
        'rehearsal': json['rehearsal'] == null ? undefined : json['rehearsal'],
        'member': json['member'] == null ? undefined : json['member'],
    };
}

export function PatchedRehearsalParticipantToJSON(json: any): PatchedRehearsalParticipant {
    return PatchedRehearsalParticipantToJSONTyped(json, false);
}

export function PatchedRehearsalParticipantToJSONTyped(value?: Omit<PatchedRehearsalParticipant, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'is_required': value['isRequired'],
        'notes': value['notes'],
        'rehearsal': value['rehearsal'],
        'member': value['member'],
    };
}

