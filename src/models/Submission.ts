/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.107
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Submission
 */
export interface Submission {
    /**
     * 
     * @type {number}
     * @memberof Submission
     */
    readonly id: number;
    /**
     * 
     * @type {Date}
     * @memberof Submission
     */
    readonly createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Submission
     */
    readonly updatedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Submission
     */
    readonly archiveAt: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof Submission
     */
    readonly submittedDateTime: Date;
    /**
     * 
     * @type {number}
     * @memberof Submission
     */
    readonly tenant: number;
    /**
     * 
     * @type {number}
     * @memberof Submission
     */
    readonly createdBy: number | null;
    /**
     * 
     * @type {number}
     * @memberof Submission
     */
    readonly updatedBy: number | null;
    /**
     * 
     * @type {number}
     * @memberof Submission
     */
    form: number;
    /**
     * 
     * @type {number}
     * @memberof Submission
     */
    member?: number | null;
}

/**
 * Check if a given object implements the Submission interface.
 */
export function instanceOfSubmission(value: object): value is Submission {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('archiveAt' in value) || value['archiveAt'] === undefined) return false;
    if (!('submittedDateTime' in value) || value['submittedDateTime'] === undefined) return false;
    if (!('tenant' in value) || value['tenant'] === undefined) return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined) return false;
    if (!('updatedBy' in value) || value['updatedBy'] === undefined) return false;
    if (!('form' in value) || value['form'] === undefined) return false;
    return true;
}

export function SubmissionFromJSON(json: any): Submission {
    return SubmissionFromJSONTyped(json, false);
}

export function SubmissionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Submission {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'archiveAt': (json['archive_at'] == null ? null : new Date(json['archive_at'])),
        'submittedDateTime': (new Date(json['submitted_date_time'])),
        'tenant': json['tenant'],
        'createdBy': json['created_by'],
        'updatedBy': json['updated_by'],
        'form': json['form'],
        'member': json['member'] == null ? undefined : json['member'],
    };
}

export function SubmissionToJSON(json: any): Submission {
    return SubmissionToJSONTyped(json, false);
}

export function SubmissionToJSONTyped(value?: Omit<Submission, 'id'|'created_at'|'updated_at'|'archive_at'|'submitted_date_time'|'tenant'|'created_by'|'updated_by'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'form': value['form'],
        'member': value['member'],
    };
}

