/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.93
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PatchedDocumentVersion
 */
export interface PatchedDocumentVersion {
    /**
     * 
     * @type {number}
     * @memberof PatchedDocumentVersion
     */
    readonly id?: number;
    /**
     * 
     * @type {Date}
     * @memberof PatchedDocumentVersion
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PatchedDocumentVersion
     */
    readonly updatedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PatchedDocumentVersion
     */
    readonly archiveAt?: Date | null;
    /**
     * The version of the document
     * @type {number}
     * @memberof PatchedDocumentVersion
     */
    readonly version?: number;
    /**
     * URL to the document file
     * @type {string}
     * @memberof PatchedDocumentVersion
     */
    fileUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedDocumentVersion
     */
    versionNotes?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedDocumentVersion
     */
    readonly tenant?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedDocumentVersion
     */
    readonly createdBy?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedDocumentVersion
     */
    readonly updatedBy?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedDocumentVersion
     */
    document?: number;
}

/**
 * Check if a given object implements the PatchedDocumentVersion interface.
 */
export function instanceOfPatchedDocumentVersion(value: object): value is PatchedDocumentVersion {
    return true;
}

export function PatchedDocumentVersionFromJSON(json: any): PatchedDocumentVersion {
    return PatchedDocumentVersionFromJSONTyped(json, false);
}

export function PatchedDocumentVersionFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchedDocumentVersion {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
        'archiveAt': json['archive_at'] == null ? undefined : (new Date(json['archive_at'])),
        'version': json['version'] == null ? undefined : json['version'],
        'fileUrl': json['file_url'] == null ? undefined : json['file_url'],
        'versionNotes': json['version_notes'] == null ? undefined : json['version_notes'],
        'tenant': json['tenant'] == null ? undefined : json['tenant'],
        'createdBy': json['created_by'] == null ? undefined : json['created_by'],
        'updatedBy': json['updated_by'] == null ? undefined : json['updated_by'],
        'document': json['document'] == null ? undefined : json['document'],
    };
}

export function PatchedDocumentVersionToJSON(json: any): PatchedDocumentVersion {
    return PatchedDocumentVersionToJSONTyped(json, false);
}

export function PatchedDocumentVersionToJSONTyped(value?: Omit<PatchedDocumentVersion, 'id'|'created_at'|'updated_at'|'archive_at'|'version'|'tenant'|'created_by'|'updated_by'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'file_url': value['fileUrl'],
        'version_notes': value['versionNotes'],
        'document': value['document'],
    };
}

