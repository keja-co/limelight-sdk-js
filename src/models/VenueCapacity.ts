/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.90
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface VenueCapacity
 */
export interface VenueCapacity {
    /**
     * 
     * @type {number}
     * @memberof VenueCapacity
     */
    readonly id: number;
    /**
     * 
     * @type {Date}
     * @memberof VenueCapacity
     */
    readonly createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof VenueCapacity
     */
    readonly updatedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof VenueCapacity
     */
    readonly archiveAt: Date | null;
    /**
     * Seating mode of the venue
     * @type {string}
     * @memberof VenueCapacity
     */
    seatingMode: string;
    /**
     * Total seating capacity of the venue in this mode
     * @type {number}
     * @memberof VenueCapacity
     */
    capacity: number;
    /**
     * Additional notes about the capacity
     * @type {string}
     * @memberof VenueCapacity
     */
    notes?: string;
    /**
     * 
     * @type {number}
     * @memberof VenueCapacity
     */
    readonly tenant: number;
    /**
     * 
     * @type {number}
     * @memberof VenueCapacity
     */
    readonly createdBy: number | null;
    /**
     * 
     * @type {number}
     * @memberof VenueCapacity
     */
    readonly updatedBy: number | null;
    /**
     * Venue for which the capacity is defined
     * @type {number}
     * @memberof VenueCapacity
     */
    venue: number;
}

/**
 * Check if a given object implements the VenueCapacity interface.
 */
export function instanceOfVenueCapacity(value: object): value is VenueCapacity {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('archiveAt' in value) || value['archiveAt'] === undefined) return false;
    if (!('seatingMode' in value) || value['seatingMode'] === undefined) return false;
    if (!('capacity' in value) || value['capacity'] === undefined) return false;
    if (!('tenant' in value) || value['tenant'] === undefined) return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined) return false;
    if (!('updatedBy' in value) || value['updatedBy'] === undefined) return false;
    if (!('venue' in value) || value['venue'] === undefined) return false;
    return true;
}

export function VenueCapacityFromJSON(json: any): VenueCapacity {
    return VenueCapacityFromJSONTyped(json, false);
}

export function VenueCapacityFromJSONTyped(json: any, ignoreDiscriminator: boolean): VenueCapacity {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'archiveAt': (json['archive_at'] == null ? null : new Date(json['archive_at'])),
        'seatingMode': json['seating_mode'],
        'capacity': json['capacity'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'tenant': json['tenant'],
        'createdBy': json['created_by'],
        'updatedBy': json['updated_by'],
        'venue': json['venue'],
    };
}

export function VenueCapacityToJSON(json: any): VenueCapacity {
    return VenueCapacityToJSONTyped(json, false);
}

export function VenueCapacityToJSONTyped(value?: Omit<VenueCapacity, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'seating_mode': value['seatingMode'],
        'capacity': value['capacity'],
        'notes': value['notes'],
        'venue': value['venue'],
    };
}

