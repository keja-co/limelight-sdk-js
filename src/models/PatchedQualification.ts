/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.106
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PatchedQualification
 */
export interface PatchedQualification {
    /**
     * 
     * @type {number}
     * @memberof PatchedQualification
     */
    readonly id?: number;
    /**
     * 
     * @type {Date}
     * @memberof PatchedQualification
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PatchedQualification
     */
    readonly updatedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PatchedQualification
     */
    readonly archiveAt?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedQualification
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedQualification
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedQualification
     */
    readonly tenant?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedQualification
     */
    readonly createdBy?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedQualification
     */
    readonly updatedBy?: number | null;
}

/**
 * Check if a given object implements the PatchedQualification interface.
 */
export function instanceOfPatchedQualification(value: object): value is PatchedQualification {
    return true;
}

export function PatchedQualificationFromJSON(json: any): PatchedQualification {
    return PatchedQualificationFromJSONTyped(json, false);
}

export function PatchedQualificationFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchedQualification {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
        'archiveAt': json['archive_at'] == null ? undefined : (new Date(json['archive_at'])),
        'name': json['name'] == null ? undefined : json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'tenant': json['tenant'] == null ? undefined : json['tenant'],
        'createdBy': json['created_by'] == null ? undefined : json['created_by'],
        'updatedBy': json['updated_by'] == null ? undefined : json['updated_by'],
    };
}

export function PatchedQualificationToJSON(json: any): PatchedQualification {
    return PatchedQualificationToJSONTyped(json, false);
}

export function PatchedQualificationToJSONTyped(value?: Omit<PatchedQualification, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'description': value['description'],
    };
}

