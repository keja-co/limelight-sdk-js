/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.110
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TicketStatusEnum } from './TicketStatusEnum';
import {
    TicketStatusEnumFromJSON,
    TicketStatusEnumFromJSONTyped,
    TicketStatusEnumToJSON,
    TicketStatusEnumToJSONTyped,
} from './TicketStatusEnum';
import type { Purchase } from './Purchase';
import {
    PurchaseFromJSON,
    PurchaseFromJSONTyped,
    PurchaseToJSON,
    PurchaseToJSONTyped,
} from './Purchase';
import type { SectionSeat } from './SectionSeat';
import {
    SectionSeatFromJSON,
    SectionSeatFromJSONTyped,
    SectionSeatToJSON,
    SectionSeatToJSONTyped,
} from './SectionSeat';
import type { TicketType } from './TicketType';
import {
    TicketTypeFromJSON,
    TicketTypeFromJSONTyped,
    TicketTypeToJSON,
    TicketTypeToJSONTyped,
} from './TicketType';

/**
 * 
 * @export
 * @interface Ticket
 */
export interface Ticket {
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    readonly id: number;
    /**
     * 
     * @type {SectionSeat}
     * @memberof Ticket
     */
    readonly sectionSeat: SectionSeat;
    /**
     * 
     * @type {TicketType}
     * @memberof Ticket
     */
    readonly ticketType: TicketType;
    /**
     * 
     * @type {Purchase}
     * @memberof Ticket
     */
    readonly purchase: Purchase;
    /**
     * 
     * @type {Date}
     * @memberof Ticket
     */
    readonly createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Ticket
     */
    readonly updatedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Ticket
     */
    readonly archiveAt: Date | null;
    /**
     * Unique identifier for the ticket, used for tracking and validation.
     * @type {string}
     * @memberof Ticket
     */
    readonly ticketUuid: string;
    /**
     * Current status of the ticket.
     * 
     * * `active` - Active
     * * `used` - Used
     * * `refunded` - Refunded
     * * `cancelled` - Cancelled
     * * `transferred` - Transferred
     * @type {TicketStatusEnum}
     * @memberof Ticket
     */
    status?: TicketStatusEnum;
    /**
     * Price of the ticket at the time of purchase.
     * @type {string}
     * @memberof Ticket
     */
    price: string;
    /**
     * Timestamp when the ticket was checked in. Null if not checked in.
     * @type {Date}
     * @memberof Ticket
     */
    checkedInAt?: Date | null;
    /**
     * Alias used by the user who checked in the ticket. Useful for tracking check-ins by staff or volunteers who may not have a user account, or integrations which use a system account.
     * @type {string}
     * @memberof Ticket
     */
    checkedInByAlias?: string;
    /**
     * Location where the ticket was checked in. Useful for tracking check-ins at different points of entry or systems.
     * @type {string}
     * @memberof Ticket
     */
    checkedInLocation?: string;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    readonly tenant: number;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    readonly createdBy: number | null;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    readonly updatedBy: number | null;
    /**
     * The performance for which this ticket is valid.
     * @type {number}
     * @memberof Ticket
     */
    performance: number;
    /**
     * The section for this ticket
     * @type {number}
     * @memberof Ticket
     */
    section: number;
    /**
     * The specific seat for this ticket.
     * @type {number}
     * @memberof Ticket
     */
    seat?: number | null;
    /**
     * User who checked in the ticket. Null if not checked in.
     * @type {number}
     * @memberof Ticket
     */
    checkedInByUser?: number | null;
}



/**
 * Check if a given object implements the Ticket interface.
 */
export function instanceOfTicket(value: object): value is Ticket {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('sectionSeat' in value) || value['sectionSeat'] === undefined) return false;
    if (!('ticketType' in value) || value['ticketType'] === undefined) return false;
    if (!('purchase' in value) || value['purchase'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('archiveAt' in value) || value['archiveAt'] === undefined) return false;
    if (!('ticketUuid' in value) || value['ticketUuid'] === undefined) return false;
    if (!('price' in value) || value['price'] === undefined) return false;
    if (!('tenant' in value) || value['tenant'] === undefined) return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined) return false;
    if (!('updatedBy' in value) || value['updatedBy'] === undefined) return false;
    if (!('performance' in value) || value['performance'] === undefined) return false;
    if (!('section' in value) || value['section'] === undefined) return false;
    return true;
}

export function TicketFromJSON(json: any): Ticket {
    return TicketFromJSONTyped(json, false);
}

export function TicketFromJSONTyped(json: any, ignoreDiscriminator: boolean): Ticket {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'sectionSeat': SectionSeatFromJSON(json['section_seat']),
        'ticketType': TicketTypeFromJSON(json['ticket_type']),
        'purchase': PurchaseFromJSON(json['purchase']),
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'archiveAt': (json['archive_at'] == null ? null : new Date(json['archive_at'])),
        'ticketUuid': json['ticket_uuid'],
        'status': json['status'] == null ? undefined : TicketStatusEnumFromJSON(json['status']),
        'price': json['price'],
        'checkedInAt': json['checked_in_at'] == null ? undefined : (new Date(json['checked_in_at'])),
        'checkedInByAlias': json['checked_in_by_alias'] == null ? undefined : json['checked_in_by_alias'],
        'checkedInLocation': json['checked_in_location'] == null ? undefined : json['checked_in_location'],
        'tenant': json['tenant'],
        'createdBy': json['created_by'],
        'updatedBy': json['updated_by'],
        'performance': json['performance'],
        'section': json['section'],
        'seat': json['seat'] == null ? undefined : json['seat'],
        'checkedInByUser': json['checked_in_by_user'] == null ? undefined : json['checked_in_by_user'],
    };
}

export function TicketToJSON(json: any): Ticket {
    return TicketToJSONTyped(json, false);
}

export function TicketToJSONTyped(value?: Omit<Ticket, 'id'|'section_seat'|'ticket_type'|'purchase'|'created_at'|'updated_at'|'archive_at'|'ticket_uuid'|'tenant'|'created_by'|'updated_by'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'status': TicketStatusEnumToJSON(value['status']),
        'price': value['price'],
        'checked_in_at': value['checkedInAt'] === null ? null : ((value['checkedInAt'] as any)?.toISOString()),
        'checked_in_by_alias': value['checkedInByAlias'],
        'checked_in_location': value['checkedInLocation'],
        'performance': value['performance'],
        'section': value['section'],
        'seat': value['seat'],
        'checked_in_by_user': value['checkedInByUser'],
    };
}

