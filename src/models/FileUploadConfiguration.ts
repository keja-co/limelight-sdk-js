/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.75
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FileType } from './FileType';
import {
    FileTypeFromJSON,
    FileTypeFromJSONTyped,
    FileTypeToJSON,
    FileTypeToJSONTyped,
} from './FileType';

/**
 * 
 * @export
 * @interface FileUploadConfiguration
 */
export interface FileUploadConfiguration {
    /**
     * List of allowed file types (e.g., 'image', 'document', 'video', 'audio', 'all')
     * @type {Array<FileType>}
     * @memberof FileUploadConfiguration
     */
    allowedFileTypes?: Array<FileType>;
    /**
     * Maximum file size in bytes (default is 10MB, cannot be more than 100MB)
     * @type {number}
     * @memberof FileUploadConfiguration
     */
    maxFileSize?: number;
    /**
     * Whether multiple file uploads are allowed
     * @type {boolean}
     * @memberof FileUploadConfiguration
     */
    allowMultiple?: boolean;
}

/**
 * Check if a given object implements the FileUploadConfiguration interface.
 */
export function instanceOfFileUploadConfiguration(value: object): value is FileUploadConfiguration {
    return true;
}

export function FileUploadConfigurationFromJSON(json: any): FileUploadConfiguration {
    return FileUploadConfigurationFromJSONTyped(json, false);
}

export function FileUploadConfigurationFromJSONTyped(json: any, ignoreDiscriminator: boolean): FileUploadConfiguration {
    if (json == null) {
        return json;
    }
    return {
        
        'allowedFileTypes': json['allowed_file_types'] == null ? undefined : ((json['allowed_file_types'] as Array<any>).map(FileTypeFromJSON)),
        'maxFileSize': json['max_file_size'] == null ? undefined : json['max_file_size'],
        'allowMultiple': json['allow_multiple'] == null ? undefined : json['allow_multiple'],
    };
}

export function FileUploadConfigurationToJSON(json: any): FileUploadConfiguration {
    return FileUploadConfigurationToJSONTyped(json, false);
}

export function FileUploadConfigurationToJSONTyped(value?: FileUploadConfiguration | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'allowed_file_types': value['allowedFileTypes'] == null ? undefined : ((value['allowedFileTypes'] as Array<any>).map(FileTypeToJSON)),
        'max_file_size': value['maxFileSize'],
        'allow_multiple': value['allowMultiple'],
    };
}

