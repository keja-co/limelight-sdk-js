/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.98
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaginatedTenantList,
  PatchedTenant,
  Tenant,
} from '../models/index';
import {
    PaginatedTenantListFromJSON,
    PaginatedTenantListToJSON,
    PatchedTenantFromJSON,
    PatchedTenantToJSON,
    TenantFromJSON,
    TenantToJSON,
} from '../models/index';

export interface ApiTenantV1TenantsCreateRequest {
    tenant: Omit<Tenant, 'id'|'ulid'|'created_at'|'updated_at'>;
}

export interface ApiTenantV1TenantsDestroyRequest {
    ulid: string;
}

export interface ApiTenantV1TenantsListRequest {
    code?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiTenantV1TenantsPartialUpdateRequest {
    ulid: string;
    patchedTenant?: Omit<PatchedTenant, 'id'|'ulid'|'created_at'|'updated_at'>;
}

export interface ApiTenantV1TenantsRetrieveRequest {
    ulid: string;
}

export interface ApiTenantV1TenantsUpdateRequest {
    ulid: string;
    tenant: Omit<Tenant, 'id'|'ulid'|'created_at'|'updated_at'>;
}

/**
 * 
 */
export class TenantApi extends runtime.BaseAPI {

    /**
     * Create a new tenant in the system.
     * Create a new tenant
     */
    async apiTenantV1TenantsCreateRaw(requestParameters: ApiTenantV1TenantsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tenant>> {
        if (requestParameters['tenant'] == null) {
            throw new runtime.RequiredError(
                'tenant',
                'Required parameter "tenant" was null or undefined when calling apiTenantV1TenantsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/tenant/v1/tenants/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TenantToJSON(requestParameters['tenant']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantFromJSON(jsonValue));
    }

    /**
     * Create a new tenant in the system.
     * Create a new tenant
     */
    async apiTenantV1TenantsCreate(requestParameters: ApiTenantV1TenantsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tenant> {
        const response = await this.apiTenantV1TenantsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a tenant from the system by its ULID.
     * Delete a tenant
     */
    async apiTenantV1TenantsDestroyRaw(requestParameters: ApiTenantV1TenantsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ulid'] == null) {
            throw new runtime.RequiredError(
                'ulid',
                'Required parameter "ulid" was null or undefined when calling apiTenantV1TenantsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/tenant/v1/tenants/{ulid}/`;
        urlPath = urlPath.replace(`{${"ulid"}}`, encodeURIComponent(String(requestParameters['ulid'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a tenant from the system by its ULID.
     * Delete a tenant
     */
    async apiTenantV1TenantsDestroy(requestParameters: ApiTenantV1TenantsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiTenantV1TenantsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a list of all tenants in the system. Optionally filter by ?code prefix.
     * List all tenants
     */
    async apiTenantV1TenantsListRaw(requestParameters: ApiTenantV1TenantsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedTenantList>> {
        const queryParameters: any = {};

        if (requestParameters['code'] != null) {
            queryParameters['code'] = requestParameters['code'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/tenant/v1/tenants/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedTenantListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all tenants in the system. Optionally filter by ?code prefix.
     * List all tenants
     */
    async apiTenantV1TenantsList(requestParameters: ApiTenantV1TenantsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedTenantList> {
        const response = await this.apiTenantV1TenantsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update specific fields of an existing tenant without affecting others.
     * Partially update a tenant
     */
    async apiTenantV1TenantsPartialUpdateRaw(requestParameters: ApiTenantV1TenantsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tenant>> {
        if (requestParameters['ulid'] == null) {
            throw new runtime.RequiredError(
                'ulid',
                'Required parameter "ulid" was null or undefined when calling apiTenantV1TenantsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/tenant/v1/tenants/{ulid}/`;
        urlPath = urlPath.replace(`{${"ulid"}}`, encodeURIComponent(String(requestParameters['ulid'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedTenantToJSON(requestParameters['patchedTenant']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantFromJSON(jsonValue));
    }

    /**
     * Update specific fields of an existing tenant without affecting others.
     * Partially update a tenant
     */
    async apiTenantV1TenantsPartialUpdate(requestParameters: ApiTenantV1TenantsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tenant> {
        const response = await this.apiTenantV1TenantsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed information about a specific tenant by its ULID.
     * Retrieve a specific tenant
     */
    async apiTenantV1TenantsRetrieveRaw(requestParameters: ApiTenantV1TenantsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tenant>> {
        if (requestParameters['ulid'] == null) {
            throw new runtime.RequiredError(
                'ulid',
                'Required parameter "ulid" was null or undefined when calling apiTenantV1TenantsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/tenant/v1/tenants/{ulid}/`;
        urlPath = urlPath.replace(`{${"ulid"}}`, encodeURIComponent(String(requestParameters['ulid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a specific tenant by its ULID.
     * Retrieve a specific tenant
     */
    async apiTenantV1TenantsRetrieve(requestParameters: ApiTenantV1TenantsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tenant> {
        const response = await this.apiTenantV1TenantsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify the details of an existing tenant by its ULID.
     * Update an existing tenant
     */
    async apiTenantV1TenantsUpdateRaw(requestParameters: ApiTenantV1TenantsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tenant>> {
        if (requestParameters['ulid'] == null) {
            throw new runtime.RequiredError(
                'ulid',
                'Required parameter "ulid" was null or undefined when calling apiTenantV1TenantsUpdate().'
            );
        }

        if (requestParameters['tenant'] == null) {
            throw new runtime.RequiredError(
                'tenant',
                'Required parameter "tenant" was null or undefined when calling apiTenantV1TenantsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/tenant/v1/tenants/{ulid}/`;
        urlPath = urlPath.replace(`{${"ulid"}}`, encodeURIComponent(String(requestParameters['ulid'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TenantToJSON(requestParameters['tenant']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantFromJSON(jsonValue));
    }

    /**
     * Modify the details of an existing tenant by its ULID.
     * Update an existing tenant
     */
    async apiTenantV1TenantsUpdate(requestParameters: ApiTenantV1TenantsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tenant> {
        const response = await this.apiTenantV1TenantsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
