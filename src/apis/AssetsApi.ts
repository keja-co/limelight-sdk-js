/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.108
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Asset,
  Assignment,
  PaginatedAssetList,
  PaginatedAssignmentList,
  PatchedAsset,
  PatchedAssignment,
} from '../models/index';
import {
    AssetFromJSON,
    AssetToJSON,
    AssignmentFromJSON,
    AssignmentToJSON,
    PaginatedAssetListFromJSON,
    PaginatedAssetListToJSON,
    PaginatedAssignmentListFromJSON,
    PaginatedAssignmentListToJSON,
    PatchedAssetFromJSON,
    PatchedAssetToJSON,
    PatchedAssignmentFromJSON,
    PatchedAssignmentToJSON,
} from '../models/index';

export interface AssetsV1AssetsAssignmentsCreateRequest {
    assetId: number;
    tenantRef: string;
    assignment: Omit<Assignment, 'id'|'user_name'|'production_name'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface AssetsV1AssetsAssignmentsDestroyRequest {
    assetId: number;
    id: number;
    tenantRef: string;
}

export interface AssetsV1AssetsAssignmentsListRequest {
    assetId: number;
    tenantRef: string;
    page?: number;
    pageSize?: number;
}

export interface AssetsV1AssetsAssignmentsPartialUpdateRequest {
    assetId: number;
    id: number;
    tenantRef: string;
    patchedAssignment?: Omit<PatchedAssignment, 'id'|'user_name'|'production_name'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface AssetsV1AssetsAssignmentsRetrieveRequest {
    assetId: number;
    id: number;
    tenantRef: string;
}

export interface AssetsV1AssetsAssignmentsUpdateRequest {
    assetId: number;
    id: number;
    tenantRef: string;
    assignment: Omit<Assignment, 'id'|'user_name'|'production_name'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface AssetsV1AssetsCreateRequest {
    tenantRef: string;
    asset: Omit<Asset, 'id'|'is_assigned'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface AssetsV1AssetsDestroyRequest {
    id: number;
    tenantRef: string;
}

export interface AssetsV1AssetsListRequest {
    tenantRef: string;
    condition?: string;
    name?: string;
    nameIcontains?: string;
    nameIstartswith?: string;
    page?: number;
    pageSize?: number;
    type?: string;
}

export interface AssetsV1AssetsPartialUpdateRequest {
    id: number;
    tenantRef: string;
    patchedAsset?: Omit<PatchedAsset, 'id'|'is_assigned'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface AssetsV1AssetsRetrieveRequest {
    id: number;
    tenantRef: string;
}

export interface AssetsV1AssetsUpdateRequest {
    id: number;
    tenantRef: string;
    asset: Omit<Asset, 'id'|'is_assigned'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

/**
 * 
 */
export class AssetsApi extends runtime.BaseAPI {

    /**
     * Add a new assignment to a specific asset.
     * Create a new assignment for an asset
     */
    async assetsV1AssetsAssignmentsCreateRaw(requestParameters: AssetsV1AssetsAssignmentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Assignment>> {
        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling assetsV1AssetsAssignmentsCreate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling assetsV1AssetsAssignmentsCreate().'
            );
        }

        if (requestParameters['assignment'] == null) {
            throw new runtime.RequiredError(
                'assignment',
                'Required parameter "assignment" was null or undefined when calling assetsV1AssetsAssignmentsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/assets/v1/assets/{asset_id}/assignments/`;
        urlPath = urlPath.replace(`{${"asset_id"}}`, encodeURIComponent(String(requestParameters['assetId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssignmentToJSON(requestParameters['assignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssignmentFromJSON(jsonValue));
    }

    /**
     * Add a new assignment to a specific asset.
     * Create a new assignment for an asset
     */
    async assetsV1AssetsAssignmentsCreate(requestParameters: AssetsV1AssetsAssignmentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Assignment> {
        const response = await this.assetsV1AssetsAssignmentsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove an assignment from the system by its ID.
     * Delete an assignment
     */
    async assetsV1AssetsAssignmentsDestroyRaw(requestParameters: AssetsV1AssetsAssignmentsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling assetsV1AssetsAssignmentsDestroy().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling assetsV1AssetsAssignmentsDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling assetsV1AssetsAssignmentsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/assets/v1/assets/{asset_id}/assignments/{id}/`;
        urlPath = urlPath.replace(`{${"asset_id"}}`, encodeURIComponent(String(requestParameters['assetId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove an assignment from the system by its ID.
     * Delete an assignment
     */
    async assetsV1AssetsAssignmentsDestroy(requestParameters: AssetsV1AssetsAssignmentsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assetsV1AssetsAssignmentsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a list of all assignments associated with a specific asset.
     * List all assignments for an asset
     */
    async assetsV1AssetsAssignmentsListRaw(requestParameters: AssetsV1AssetsAssignmentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedAssignmentList>> {
        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling assetsV1AssetsAssignmentsList().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling assetsV1AssetsAssignmentsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/assets/v1/assets/{asset_id}/assignments/`;
        urlPath = urlPath.replace(`{${"asset_id"}}`, encodeURIComponent(String(requestParameters['assetId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedAssignmentListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all assignments associated with a specific asset.
     * List all assignments for an asset
     */
    async assetsV1AssetsAssignmentsList(requestParameters: AssetsV1AssetsAssignmentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedAssignmentList> {
        const response = await this.assetsV1AssetsAssignmentsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update specific fields of an existing assignment without affecting others.
     * Partially update an assignment
     */
    async assetsV1AssetsAssignmentsPartialUpdateRaw(requestParameters: AssetsV1AssetsAssignmentsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Assignment>> {
        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling assetsV1AssetsAssignmentsPartialUpdate().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling assetsV1AssetsAssignmentsPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling assetsV1AssetsAssignmentsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/assets/v1/assets/{asset_id}/assignments/{id}/`;
        urlPath = urlPath.replace(`{${"asset_id"}}`, encodeURIComponent(String(requestParameters['assetId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedAssignmentToJSON(requestParameters['patchedAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssignmentFromJSON(jsonValue));
    }

    /**
     * Update specific fields of an existing assignment without affecting others.
     * Partially update an assignment
     */
    async assetsV1AssetsAssignmentsPartialUpdate(requestParameters: AssetsV1AssetsAssignmentsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Assignment> {
        const response = await this.assetsV1AssetsAssignmentsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed information about a specific assignment by its ID.
     * Retrieve a specific assignment
     */
    async assetsV1AssetsAssignmentsRetrieveRaw(requestParameters: AssetsV1AssetsAssignmentsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Assignment>> {
        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling assetsV1AssetsAssignmentsRetrieve().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling assetsV1AssetsAssignmentsRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling assetsV1AssetsAssignmentsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/assets/v1/assets/{asset_id}/assignments/{id}/`;
        urlPath = urlPath.replace(`{${"asset_id"}}`, encodeURIComponent(String(requestParameters['assetId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssignmentFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a specific assignment by its ID.
     * Retrieve a specific assignment
     */
    async assetsV1AssetsAssignmentsRetrieve(requestParameters: AssetsV1AssetsAssignmentsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Assignment> {
        const response = await this.assetsV1AssetsAssignmentsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify the details of an existing assignment by its ID.
     * Update an existing assignment
     */
    async assetsV1AssetsAssignmentsUpdateRaw(requestParameters: AssetsV1AssetsAssignmentsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Assignment>> {
        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling assetsV1AssetsAssignmentsUpdate().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling assetsV1AssetsAssignmentsUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling assetsV1AssetsAssignmentsUpdate().'
            );
        }

        if (requestParameters['assignment'] == null) {
            throw new runtime.RequiredError(
                'assignment',
                'Required parameter "assignment" was null or undefined when calling assetsV1AssetsAssignmentsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/assets/v1/assets/{asset_id}/assignments/{id}/`;
        urlPath = urlPath.replace(`{${"asset_id"}}`, encodeURIComponent(String(requestParameters['assetId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AssignmentToJSON(requestParameters['assignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssignmentFromJSON(jsonValue));
    }

    /**
     * Modify the details of an existing assignment by its ID.
     * Update an existing assignment
     */
    async assetsV1AssetsAssignmentsUpdate(requestParameters: AssetsV1AssetsAssignmentsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Assignment> {
        const response = await this.assetsV1AssetsAssignmentsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a new asset to the system.
     * Create a new asset
     */
    async assetsV1AssetsCreateRaw(requestParameters: AssetsV1AssetsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Asset>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling assetsV1AssetsCreate().'
            );
        }

        if (requestParameters['asset'] == null) {
            throw new runtime.RequiredError(
                'asset',
                'Required parameter "asset" was null or undefined when calling assetsV1AssetsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/assets/v1/assets/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssetToJSON(requestParameters['asset']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetFromJSON(jsonValue));
    }

    /**
     * Add a new asset to the system.
     * Create a new asset
     */
    async assetsV1AssetsCreate(requestParameters: AssetsV1AssetsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Asset> {
        const response = await this.assetsV1AssetsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove an asset from the system by its ID.
     * Delete an asset
     */
    async assetsV1AssetsDestroyRaw(requestParameters: AssetsV1AssetsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling assetsV1AssetsDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling assetsV1AssetsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/assets/v1/assets/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove an asset from the system by its ID.
     * Delete an asset
     */
    async assetsV1AssetsDestroy(requestParameters: AssetsV1AssetsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assetsV1AssetsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a list of all assets in the system.
     * List all assets
     */
    async assetsV1AssetsListRaw(requestParameters: AssetsV1AssetsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedAssetList>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling assetsV1AssetsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['condition'] != null) {
            queryParameters['condition'] = requestParameters['condition'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['nameIcontains'] != null) {
            queryParameters['name__icontains'] = requestParameters['nameIcontains'];
        }

        if (requestParameters['nameIstartswith'] != null) {
            queryParameters['name__istartswith'] = requestParameters['nameIstartswith'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/assets/v1/assets/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedAssetListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all assets in the system.
     * List all assets
     */
    async assetsV1AssetsList(requestParameters: AssetsV1AssetsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedAssetList> {
        const response = await this.assetsV1AssetsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update specific fields of an existing asset without affecting others.
     * Partially update an asset
     */
    async assetsV1AssetsPartialUpdateRaw(requestParameters: AssetsV1AssetsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Asset>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling assetsV1AssetsPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling assetsV1AssetsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/assets/v1/assets/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedAssetToJSON(requestParameters['patchedAsset']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetFromJSON(jsonValue));
    }

    /**
     * Update specific fields of an existing asset without affecting others.
     * Partially update an asset
     */
    async assetsV1AssetsPartialUpdate(requestParameters: AssetsV1AssetsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Asset> {
        const response = await this.assetsV1AssetsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed information about a specific asset by its ID.
     * Retrieve a specific asset
     */
    async assetsV1AssetsRetrieveRaw(requestParameters: AssetsV1AssetsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Asset>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling assetsV1AssetsRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling assetsV1AssetsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/assets/v1/assets/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a specific asset by its ID.
     * Retrieve a specific asset
     */
    async assetsV1AssetsRetrieve(requestParameters: AssetsV1AssetsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Asset> {
        const response = await this.assetsV1AssetsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify the details of an existing asset by its ID.
     * Update an existing asset
     */
    async assetsV1AssetsUpdateRaw(requestParameters: AssetsV1AssetsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Asset>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling assetsV1AssetsUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling assetsV1AssetsUpdate().'
            );
        }

        if (requestParameters['asset'] == null) {
            throw new runtime.RequiredError(
                'asset',
                'Required parameter "asset" was null or undefined when calling assetsV1AssetsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/assets/v1/assets/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AssetToJSON(requestParameters['asset']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetFromJSON(jsonValue));
    }

    /**
     * Modify the details of an existing asset by its ID.
     * Update an existing asset
     */
    async assetsV1AssetsUpdate(requestParameters: AssetsV1AssetsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Asset> {
        const response = await this.assetsV1AssetsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
