/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.113
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaginatedPerformanceList,
  PaginatedProductionCategoryAssignmentList,
  PaginatedProductionCategoryList,
  PaginatedProductionListList,
  PaginatedProductionMemberList,
  PaginatedProductionRoleAssignmentList,
  PaginatedProductionVenueList,
  PaginatedRehearsalList,
  PaginatedRehearsalParticipantList,
  PatchedPerformance,
  PatchedProduction,
  PatchedProductionCategory,
  PatchedProductionCategoryAssignment,
  PatchedProductionMember,
  PatchedProductionRoleAssignment,
  PatchedProductionVenue,
  PatchedRehearsal,
  PatchedRehearsalParticipant,
  Performance,
  Production,
  ProductionCategory,
  ProductionCategoryAssignment,
  ProductionMember,
  ProductionRoleAssignment,
  ProductionVenue,
  Rehearsal,
  RehearsalParticipant,
} from '../models/index';
import {
    PaginatedPerformanceListFromJSON,
    PaginatedPerformanceListToJSON,
    PaginatedProductionCategoryAssignmentListFromJSON,
    PaginatedProductionCategoryAssignmentListToJSON,
    PaginatedProductionCategoryListFromJSON,
    PaginatedProductionCategoryListToJSON,
    PaginatedProductionListListFromJSON,
    PaginatedProductionListListToJSON,
    PaginatedProductionMemberListFromJSON,
    PaginatedProductionMemberListToJSON,
    PaginatedProductionRoleAssignmentListFromJSON,
    PaginatedProductionRoleAssignmentListToJSON,
    PaginatedProductionVenueListFromJSON,
    PaginatedProductionVenueListToJSON,
    PaginatedRehearsalListFromJSON,
    PaginatedRehearsalListToJSON,
    PaginatedRehearsalParticipantListFromJSON,
    PaginatedRehearsalParticipantListToJSON,
    PatchedPerformanceFromJSON,
    PatchedPerformanceToJSON,
    PatchedProductionFromJSON,
    PatchedProductionToJSON,
    PatchedProductionCategoryFromJSON,
    PatchedProductionCategoryToJSON,
    PatchedProductionCategoryAssignmentFromJSON,
    PatchedProductionCategoryAssignmentToJSON,
    PatchedProductionMemberFromJSON,
    PatchedProductionMemberToJSON,
    PatchedProductionRoleAssignmentFromJSON,
    PatchedProductionRoleAssignmentToJSON,
    PatchedProductionVenueFromJSON,
    PatchedProductionVenueToJSON,
    PatchedRehearsalFromJSON,
    PatchedRehearsalToJSON,
    PatchedRehearsalParticipantFromJSON,
    PatchedRehearsalParticipantToJSON,
    PerformanceFromJSON,
    PerformanceToJSON,
    ProductionFromJSON,
    ProductionToJSON,
    ProductionCategoryFromJSON,
    ProductionCategoryToJSON,
    ProductionCategoryAssignmentFromJSON,
    ProductionCategoryAssignmentToJSON,
    ProductionMemberFromJSON,
    ProductionMemberToJSON,
    ProductionRoleAssignmentFromJSON,
    ProductionRoleAssignmentToJSON,
    ProductionVenueFromJSON,
    ProductionVenueToJSON,
    RehearsalFromJSON,
    RehearsalToJSON,
    RehearsalParticipantFromJSON,
    RehearsalParticipantToJSON,
} from '../models/index';

export interface ProductionV1CategoriesAssignmentsCreateRequest {
    categoryId: number;
    tenantRef: string;
    productionCategoryAssignment: Omit<ProductionCategoryAssignment, 'id'|'category_name'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface ProductionV1CategoriesAssignmentsDestroyRequest {
    categoryId: number;
    id: number;
    tenantRef: string;
}

export interface ProductionV1CategoriesAssignmentsListRequest {
    categoryId: number;
    tenantRef: string;
    page?: number;
    pageSize?: number;
}

export interface ProductionV1CategoriesAssignmentsPartialUpdateRequest {
    categoryId: number;
    id: number;
    tenantRef: string;
    patchedProductionCategoryAssignment?: Omit<PatchedProductionCategoryAssignment, 'id'|'category_name'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface ProductionV1CategoriesAssignmentsRetrieveRequest {
    categoryId: number;
    id: number;
    tenantRef: string;
}

export interface ProductionV1CategoriesAssignmentsUpdateRequest {
    categoryId: number;
    id: number;
    tenantRef: string;
    productionCategoryAssignment: Omit<ProductionCategoryAssignment, 'id'|'category_name'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface ProductionV1CategoriesCreateRequest {
    tenantRef: string;
    productionCategory: Omit<ProductionCategory, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface ProductionV1CategoriesDestroyRequest {
    id: number;
    tenantRef: string;
}

export interface ProductionV1CategoriesListRequest {
    tenantRef: string;
    page?: number;
    pageSize?: number;
}

export interface ProductionV1CategoriesPartialUpdateRequest {
    id: number;
    tenantRef: string;
    patchedProductionCategory?: Omit<PatchedProductionCategory, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface ProductionV1CategoriesRetrieveRequest {
    id: number;
    tenantRef: string;
}

export interface ProductionV1CategoriesUpdateRequest {
    id: number;
    tenantRef: string;
    productionCategory: Omit<ProductionCategory, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface ProductionV1ProductionsCategoriesAssignmentsListRequest {
    productionId: number;
    tenantRef: string;
    page?: number;
    pageSize?: number;
}

export interface ProductionV1ProductionsCategoriesCreateRequest {
    productionId: number;
    tenantRef: string;
    productionCategoryAssignment: Omit<ProductionCategoryAssignment, 'id'|'category_name'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface ProductionV1ProductionsCategoriesDestroyRequest {
    id: number;
    productionId: number;
    tenantRef: string;
}

export interface ProductionV1ProductionsCategoriesPartialUpdateRequest {
    id: number;
    productionId: number;
    tenantRef: string;
    patchedProductionCategoryAssignment?: Omit<PatchedProductionCategoryAssignment, 'id'|'category_name'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface ProductionV1ProductionsCategoriesRetrieveRequest {
    id: number;
    productionId: number;
    tenantRef: string;
}

export interface ProductionV1ProductionsCategoriesUpdateRequest {
    id: number;
    productionId: number;
    tenantRef: string;
    productionCategoryAssignment: Omit<ProductionCategoryAssignment, 'id'|'category_name'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface ProductionV1ProductionsCreateRequest {
    tenantRef: string;
    production: Omit<Production, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface ProductionV1ProductionsDestroyRequest {
    id: number;
    tenantRef: string;
}

export interface ProductionV1ProductionsListRequest {
    tenantRef: string;
    category?: number;
    director?: number;
    endDateLte?: Date;
    hasFuturePerformances?: boolean;
    name?: string;
    nameIcontains?: string;
    nameIstartswith?: string;
    page?: number;
    pageSize?: number;
    primaryCategory?: number;
    startDateGte?: Date;
    statusIexact?: string;
    venue?: number;
}

export interface ProductionV1ProductionsMembersCreateRequest {
    productionId: number;
    tenantRef: string;
    productionMember: Omit<ProductionMember, 'id'|'tenant'|'created_at'|'updated_at'|'archive_at'|'created_by'|'updated_by'|'member_name'>;
}

export interface ProductionV1ProductionsMembersDestroyRequest {
    id: number;
    productionId: number;
    tenantRef: string;
}

export interface ProductionV1ProductionsMembersListRequest {
    productionId: number;
    tenantRef: string;
    page?: number;
    pageSize?: number;
}

export interface ProductionV1ProductionsMembersPartialUpdateRequest {
    id: number;
    productionId: number;
    tenantRef: string;
    patchedProductionMember?: Omit<PatchedProductionMember, 'id'|'tenant'|'created_at'|'updated_at'|'archive_at'|'created_by'|'updated_by'|'member_name'>;
}

export interface ProductionV1ProductionsMembersRetrieveRequest {
    id: number;
    productionId: number;
    tenantRef: string;
}

export interface ProductionV1ProductionsMembersRolesCreateRequest {
    memberId: number;
    productionId: number;
    tenantRef: string;
    productionRoleAssignment: Omit<ProductionRoleAssignment, 'id'|'member_name'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface ProductionV1ProductionsMembersRolesDestroyRequest {
    id: number;
    memberId: number;
    productionId: number;
    tenantRef: string;
}

export interface ProductionV1ProductionsMembersRolesListRequest {
    memberId: number;
    productionId: number;
    tenantRef: string;
    page?: number;
    pageSize?: number;
    role?: ProductionV1ProductionsMembersRolesListRoleEnum;
}

export interface ProductionV1ProductionsMembersRolesPartialUpdateRequest {
    id: number;
    memberId: number;
    productionId: number;
    tenantRef: string;
    patchedProductionRoleAssignment?: Omit<PatchedProductionRoleAssignment, 'id'|'member_name'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface ProductionV1ProductionsMembersRolesRetrieveRequest {
    id: number;
    memberId: number;
    productionId: number;
    tenantRef: string;
}

export interface ProductionV1ProductionsMembersRolesUpdateRequest {
    id: number;
    memberId: number;
    productionId: number;
    tenantRef: string;
    productionRoleAssignment: Omit<ProductionRoleAssignment, 'id'|'member_name'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface ProductionV1ProductionsMembersUpdateRequest {
    id: number;
    productionId: number;
    tenantRef: string;
    productionMember: Omit<ProductionMember, 'id'|'tenant'|'created_at'|'updated_at'|'archive_at'|'created_by'|'updated_by'|'member_name'>;
}

export interface ProductionV1ProductionsPartialUpdateRequest {
    id: number;
    tenantRef: string;
    patchedProduction?: Omit<PatchedProduction, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface ProductionV1ProductionsPerformancesCreateRequest {
    productionId: number;
    tenantRef: string;
    performance: Omit<Performance, 'id'|'venue_name'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface ProductionV1ProductionsPerformancesDestroyRequest {
    id: number;
    productionId: number;
    tenantRef: string;
}

export interface ProductionV1ProductionsPerformancesListRequest {
    productionId: number;
    tenantRef: string;
    page?: number;
    pageSize?: number;
}

export interface ProductionV1ProductionsPerformancesPartialUpdateRequest {
    id: number;
    productionId: number;
    tenantRef: string;
    patchedPerformance?: Omit<PatchedPerformance, 'id'|'venue_name'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface ProductionV1ProductionsPerformancesRetrieveRequest {
    id: number;
    productionId: number;
    tenantRef: string;
}

export interface ProductionV1ProductionsPerformancesUpdateRequest {
    id: number;
    productionId: number;
    tenantRef: string;
    performance: Omit<Performance, 'id'|'venue_name'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface ProductionV1ProductionsRehearsalsCreateRequest {
    productionId: number;
    tenantRef: string;
    rehearsal: Omit<Rehearsal, 'id'|'venue_name'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface ProductionV1ProductionsRehearsalsDestroyRequest {
    id: number;
    productionId: number;
    tenantRef: string;
}

export interface ProductionV1ProductionsRehearsalsListRequest {
    productionId: number;
    tenantRef: string;
    page?: number;
    pageSize?: number;
}

export interface ProductionV1ProductionsRehearsalsPartialUpdateRequest {
    id: number;
    productionId: number;
    tenantRef: string;
    patchedRehearsal?: Omit<PatchedRehearsal, 'id'|'venue_name'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface ProductionV1ProductionsRehearsalsParticipantsCreateRequest {
    productionId: number;
    rehearsalId: number;
    tenantRef: string;
    rehearsalParticipant: Omit<RehearsalParticipant, 'id'|'member_name'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface ProductionV1ProductionsRehearsalsParticipantsDestroyRequest {
    id: number;
    productionId: number;
    rehearsalId: number;
    tenantRef: string;
}

export interface ProductionV1ProductionsRehearsalsParticipantsListRequest {
    productionId: number;
    rehearsalId: number;
    tenantRef: string;
    page?: number;
    pageSize?: number;
}

export interface ProductionV1ProductionsRehearsalsParticipantsPartialUpdateRequest {
    id: number;
    productionId: number;
    rehearsalId: number;
    tenantRef: string;
    patchedRehearsalParticipant?: Omit<PatchedRehearsalParticipant, 'id'|'member_name'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface ProductionV1ProductionsRehearsalsParticipantsRetrieveRequest {
    id: number;
    productionId: number;
    rehearsalId: number;
    tenantRef: string;
}

export interface ProductionV1ProductionsRehearsalsParticipantsUpdateRequest {
    id: number;
    productionId: number;
    rehearsalId: number;
    tenantRef: string;
    rehearsalParticipant: Omit<RehearsalParticipant, 'id'|'member_name'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface ProductionV1ProductionsRehearsalsRetrieveRequest {
    id: number;
    productionId: number;
    tenantRef: string;
}

export interface ProductionV1ProductionsRehearsalsUpdateRequest {
    id: number;
    productionId: number;
    tenantRef: string;
    rehearsal: Omit<Rehearsal, 'id'|'venue_name'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface ProductionV1ProductionsRetrieveRequest {
    id: number;
    tenantRef: string;
}

export interface ProductionV1ProductionsRolesCreateRequest {
    productionId: number;
    tenantRef: string;
    productionRoleAssignment: Omit<ProductionRoleAssignment, 'id'|'member_name'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface ProductionV1ProductionsRolesDestroyRequest {
    id: number;
    productionId: number;
    tenantRef: string;
}

export interface ProductionV1ProductionsRolesListRequest {
    productionId: number;
    tenantRef: string;
    page?: number;
    pageSize?: number;
    role?: ProductionV1ProductionsRolesListRoleEnum;
}

export interface ProductionV1ProductionsRolesPartialUpdateRequest {
    id: number;
    productionId: number;
    tenantRef: string;
    patchedProductionRoleAssignment?: Omit<PatchedProductionRoleAssignment, 'id'|'member_name'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface ProductionV1ProductionsRolesRetrieveRequest {
    id: number;
    productionId: number;
    tenantRef: string;
}

export interface ProductionV1ProductionsRolesUpdateRequest {
    id: number;
    productionId: number;
    tenantRef: string;
    productionRoleAssignment: Omit<ProductionRoleAssignment, 'id'|'member_name'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface ProductionV1ProductionsUpdateRequest {
    id: number;
    tenantRef: string;
    production: Omit<Production, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface ProductionV1VenuesCreateRequest {
    tenantRef: string;
    productionVenue: Omit<ProductionVenue, 'id'|'venue_name'|'short_address'|'is_primary'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface ProductionV1VenuesDestroyRequest {
    id: number;
    tenantRef: string;
}

export interface ProductionV1VenuesListRequest {
    tenantRef: string;
    page?: number;
    pageSize?: number;
    production?: number;
}

export interface ProductionV1VenuesPartialUpdateRequest {
    id: number;
    tenantRef: string;
    patchedProductionVenue?: Omit<PatchedProductionVenue, 'id'|'venue_name'|'short_address'|'is_primary'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface ProductionV1VenuesRetrieveRequest {
    id: number;
    tenantRef: string;
}

export interface ProductionV1VenuesUpdateRequest {
    id: number;
    tenantRef: string;
    productionVenue: Omit<ProductionVenue, 'id'|'venue_name'|'short_address'|'is_primary'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

/**
 * 
 */
export class ProductionApi extends runtime.BaseAPI {

    /**
     * Create a new production category assignment.
     * Create a Production Category Assignment
     */
    async productionV1CategoriesAssignmentsCreateRaw(requestParameters: ProductionV1CategoriesAssignmentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCategoryAssignment>> {
        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling productionV1CategoriesAssignmentsCreate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1CategoriesAssignmentsCreate().'
            );
        }

        if (requestParameters['productionCategoryAssignment'] == null) {
            throw new runtime.RequiredError(
                'productionCategoryAssignment',
                'Required parameter "productionCategoryAssignment" was null or undefined when calling productionV1CategoriesAssignmentsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/production/v1/categories/{category_id}/assignments/`;
        urlPath = urlPath.replace(`{${"category_id"}}`, encodeURIComponent(String(requestParameters['categoryId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionCategoryAssignmentToJSON(requestParameters['productionCategoryAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionCategoryAssignmentFromJSON(jsonValue));
    }

    /**
     * Create a new production category assignment.
     * Create a Production Category Assignment
     */
    async productionV1CategoriesAssignmentsCreate(requestParameters: ProductionV1CategoriesAssignmentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCategoryAssignment> {
        const response = await this.productionV1CategoriesAssignmentsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a specific production category assignment.
     * Delete a Production Category Assignment
     */
    async productionV1CategoriesAssignmentsDestroyRaw(requestParameters: ProductionV1CategoriesAssignmentsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling productionV1CategoriesAssignmentsDestroy().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1CategoriesAssignmentsDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1CategoriesAssignmentsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/production/v1/categories/{category_id}/assignments/{id}/`;
        urlPath = urlPath.replace(`{${"category_id"}}`, encodeURIComponent(String(requestParameters['categoryId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a specific production category assignment.
     * Delete a Production Category Assignment
     */
    async productionV1CategoriesAssignmentsDestroy(requestParameters: ProductionV1CategoriesAssignmentsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.productionV1CategoriesAssignmentsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve all category assignments for a production.
     * List Production Category Assignments
     */
    async productionV1CategoriesAssignmentsListRaw(requestParameters: ProductionV1CategoriesAssignmentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProductionCategoryAssignmentList>> {
        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling productionV1CategoriesAssignmentsList().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1CategoriesAssignmentsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/production/v1/categories/{category_id}/assignments/`;
        urlPath = urlPath.replace(`{${"category_id"}}`, encodeURIComponent(String(requestParameters['categoryId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedProductionCategoryAssignmentListFromJSON(jsonValue));
    }

    /**
     * Retrieve all category assignments for a production.
     * List Production Category Assignments
     */
    async productionV1CategoriesAssignmentsList(requestParameters: ProductionV1CategoriesAssignmentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProductionCategoryAssignmentList> {
        const response = await this.productionV1CategoriesAssignmentsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Partially update an existing production category assignment.
     * Partially Update a Production Category Assignment
     */
    async productionV1CategoriesAssignmentsPartialUpdateRaw(requestParameters: ProductionV1CategoriesAssignmentsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCategoryAssignment>> {
        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling productionV1CategoriesAssignmentsPartialUpdate().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1CategoriesAssignmentsPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1CategoriesAssignmentsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/production/v1/categories/{category_id}/assignments/{id}/`;
        urlPath = urlPath.replace(`{${"category_id"}}`, encodeURIComponent(String(requestParameters['categoryId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedProductionCategoryAssignmentToJSON(requestParameters['patchedProductionCategoryAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionCategoryAssignmentFromJSON(jsonValue));
    }

    /**
     * Partially update an existing production category assignment.
     * Partially Update a Production Category Assignment
     */
    async productionV1CategoriesAssignmentsPartialUpdate(requestParameters: ProductionV1CategoriesAssignmentsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCategoryAssignment> {
        const response = await this.productionV1CategoriesAssignmentsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a specific production category assignment.
     * Retrieve a Production Category Assignment
     */
    async productionV1CategoriesAssignmentsRetrieveRaw(requestParameters: ProductionV1CategoriesAssignmentsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCategoryAssignment>> {
        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling productionV1CategoriesAssignmentsRetrieve().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1CategoriesAssignmentsRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1CategoriesAssignmentsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/production/v1/categories/{category_id}/assignments/{id}/`;
        urlPath = urlPath.replace(`{${"category_id"}}`, encodeURIComponent(String(requestParameters['categoryId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionCategoryAssignmentFromJSON(jsonValue));
    }

    /**
     * Retrieve a specific production category assignment.
     * Retrieve a Production Category Assignment
     */
    async productionV1CategoriesAssignmentsRetrieve(requestParameters: ProductionV1CategoriesAssignmentsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCategoryAssignment> {
        const response = await this.productionV1CategoriesAssignmentsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing production category assignment.
     * Update a Production Category Assignment
     */
    async productionV1CategoriesAssignmentsUpdateRaw(requestParameters: ProductionV1CategoriesAssignmentsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCategoryAssignment>> {
        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling productionV1CategoriesAssignmentsUpdate().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1CategoriesAssignmentsUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1CategoriesAssignmentsUpdate().'
            );
        }

        if (requestParameters['productionCategoryAssignment'] == null) {
            throw new runtime.RequiredError(
                'productionCategoryAssignment',
                'Required parameter "productionCategoryAssignment" was null or undefined when calling productionV1CategoriesAssignmentsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/production/v1/categories/{category_id}/assignments/{id}/`;
        urlPath = urlPath.replace(`{${"category_id"}}`, encodeURIComponent(String(requestParameters['categoryId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionCategoryAssignmentToJSON(requestParameters['productionCategoryAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionCategoryAssignmentFromJSON(jsonValue));
    }

    /**
     * Update an existing production category assignment.
     * Update a Production Category Assignment
     */
    async productionV1CategoriesAssignmentsUpdate(requestParameters: ProductionV1CategoriesAssignmentsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCategoryAssignment> {
        const response = await this.productionV1CategoriesAssignmentsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new production category.
     * Create a Production Category
     */
    async productionV1CategoriesCreateRaw(requestParameters: ProductionV1CategoriesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCategory>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1CategoriesCreate().'
            );
        }

        if (requestParameters['productionCategory'] == null) {
            throw new runtime.RequiredError(
                'productionCategory',
                'Required parameter "productionCategory" was null or undefined when calling productionV1CategoriesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/production/v1/categories/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionCategoryToJSON(requestParameters['productionCategory']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionCategoryFromJSON(jsonValue));
    }

    /**
     * Create a new production category.
     * Create a Production Category
     */
    async productionV1CategoriesCreate(requestParameters: ProductionV1CategoriesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCategory> {
        const response = await this.productionV1CategoriesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a specific production category.
     * Delete a Production Category
     */
    async productionV1CategoriesDestroyRaw(requestParameters: ProductionV1CategoriesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1CategoriesDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1CategoriesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/production/v1/categories/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a specific production category.
     * Delete a Production Category
     */
    async productionV1CategoriesDestroy(requestParameters: ProductionV1CategoriesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.productionV1CategoriesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve all production categories.
     * List Production Categories
     */
    async productionV1CategoriesListRaw(requestParameters: ProductionV1CategoriesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProductionCategoryList>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1CategoriesList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/production/v1/categories/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedProductionCategoryListFromJSON(jsonValue));
    }

    /**
     * Retrieve all production categories.
     * List Production Categories
     */
    async productionV1CategoriesList(requestParameters: ProductionV1CategoriesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProductionCategoryList> {
        const response = await this.productionV1CategoriesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Partially update an existing production category.
     * Partially Update a Production Category
     */
    async productionV1CategoriesPartialUpdateRaw(requestParameters: ProductionV1CategoriesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCategory>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1CategoriesPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1CategoriesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/production/v1/categories/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedProductionCategoryToJSON(requestParameters['patchedProductionCategory']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionCategoryFromJSON(jsonValue));
    }

    /**
     * Partially update an existing production category.
     * Partially Update a Production Category
     */
    async productionV1CategoriesPartialUpdate(requestParameters: ProductionV1CategoriesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCategory> {
        const response = await this.productionV1CategoriesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a specific production category.
     * Retrieve a Production Category
     */
    async productionV1CategoriesRetrieveRaw(requestParameters: ProductionV1CategoriesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCategory>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1CategoriesRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1CategoriesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/production/v1/categories/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionCategoryFromJSON(jsonValue));
    }

    /**
     * Retrieve a specific production category.
     * Retrieve a Production Category
     */
    async productionV1CategoriesRetrieve(requestParameters: ProductionV1CategoriesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCategory> {
        const response = await this.productionV1CategoriesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing production category.
     * Update a Production Category
     */
    async productionV1CategoriesUpdateRaw(requestParameters: ProductionV1CategoriesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCategory>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1CategoriesUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1CategoriesUpdate().'
            );
        }

        if (requestParameters['productionCategory'] == null) {
            throw new runtime.RequiredError(
                'productionCategory',
                'Required parameter "productionCategory" was null or undefined when calling productionV1CategoriesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/production/v1/categories/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionCategoryToJSON(requestParameters['productionCategory']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionCategoryFromJSON(jsonValue));
    }

    /**
     * Update an existing production category.
     * Update a Production Category
     */
    async productionV1CategoriesUpdate(requestParameters: ProductionV1CategoriesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCategory> {
        const response = await this.productionV1CategoriesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all category assignments for a production.
     * List Production Category Assignments (by production)
     */
    async productionV1ProductionsCategoriesAssignmentsListRaw(requestParameters: ProductionV1ProductionsCategoriesAssignmentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProductionCategoryAssignmentList>> {
        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsCategoriesAssignmentsList().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsCategoriesAssignmentsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/categories/`;
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedProductionCategoryAssignmentListFromJSON(jsonValue));
    }

    /**
     * Retrieve all category assignments for a production.
     * List Production Category Assignments (by production)
     */
    async productionV1ProductionsCategoriesAssignmentsList(requestParameters: ProductionV1ProductionsCategoriesAssignmentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProductionCategoryAssignmentList> {
        const response = await this.productionV1ProductionsCategoriesAssignmentsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new production category assignment.
     * Create a Production Category Assignment (by production)
     */
    async productionV1ProductionsCategoriesCreateRaw(requestParameters: ProductionV1ProductionsCategoriesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCategoryAssignment>> {
        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsCategoriesCreate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsCategoriesCreate().'
            );
        }

        if (requestParameters['productionCategoryAssignment'] == null) {
            throw new runtime.RequiredError(
                'productionCategoryAssignment',
                'Required parameter "productionCategoryAssignment" was null or undefined when calling productionV1ProductionsCategoriesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/categories/`;
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionCategoryAssignmentToJSON(requestParameters['productionCategoryAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionCategoryAssignmentFromJSON(jsonValue));
    }

    /**
     * Create a new production category assignment.
     * Create a Production Category Assignment (by production)
     */
    async productionV1ProductionsCategoriesCreate(requestParameters: ProductionV1ProductionsCategoriesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCategoryAssignment> {
        const response = await this.productionV1ProductionsCategoriesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a specific production category assignment.
     * Delete a Production Category Assignment (by production)
     */
    async productionV1ProductionsCategoriesDestroyRaw(requestParameters: ProductionV1ProductionsCategoriesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProductionsCategoriesDestroy().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsCategoriesDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsCategoriesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/categories/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a specific production category assignment.
     * Delete a Production Category Assignment (by production)
     */
    async productionV1ProductionsCategoriesDestroy(requestParameters: ProductionV1ProductionsCategoriesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.productionV1ProductionsCategoriesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Partially update an existing production category assignment.
     * Partially Update a Production Category Assignment (by production)
     */
    async productionV1ProductionsCategoriesPartialUpdateRaw(requestParameters: ProductionV1ProductionsCategoriesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCategoryAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProductionsCategoriesPartialUpdate().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsCategoriesPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsCategoriesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/categories/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedProductionCategoryAssignmentToJSON(requestParameters['patchedProductionCategoryAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionCategoryAssignmentFromJSON(jsonValue));
    }

    /**
     * Partially update an existing production category assignment.
     * Partially Update a Production Category Assignment (by production)
     */
    async productionV1ProductionsCategoriesPartialUpdate(requestParameters: ProductionV1ProductionsCategoriesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCategoryAssignment> {
        const response = await this.productionV1ProductionsCategoriesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a specific production category assignment.
     * Retrieve a Production Category Assignment (by production)
     */
    async productionV1ProductionsCategoriesRetrieveRaw(requestParameters: ProductionV1ProductionsCategoriesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCategoryAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProductionsCategoriesRetrieve().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsCategoriesRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsCategoriesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/categories/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionCategoryAssignmentFromJSON(jsonValue));
    }

    /**
     * Retrieve a specific production category assignment.
     * Retrieve a Production Category Assignment (by production)
     */
    async productionV1ProductionsCategoriesRetrieve(requestParameters: ProductionV1ProductionsCategoriesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCategoryAssignment> {
        const response = await this.productionV1ProductionsCategoriesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing production category assignment.
     * Update a Production Category Assignment (by production)
     */
    async productionV1ProductionsCategoriesUpdateRaw(requestParameters: ProductionV1ProductionsCategoriesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCategoryAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProductionsCategoriesUpdate().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsCategoriesUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsCategoriesUpdate().'
            );
        }

        if (requestParameters['productionCategoryAssignment'] == null) {
            throw new runtime.RequiredError(
                'productionCategoryAssignment',
                'Required parameter "productionCategoryAssignment" was null or undefined when calling productionV1ProductionsCategoriesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/categories/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionCategoryAssignmentToJSON(requestParameters['productionCategoryAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionCategoryAssignmentFromJSON(jsonValue));
    }

    /**
     * Update an existing production category assignment.
     * Update a Production Category Assignment (by production)
     */
    async productionV1ProductionsCategoriesUpdate(requestParameters: ProductionV1ProductionsCategoriesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCategoryAssignment> {
        const response = await this.productionV1ProductionsCategoriesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new production.
     * Create a Production
     */
    async productionV1ProductionsCreateRaw(requestParameters: ProductionV1ProductionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Production>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsCreate().'
            );
        }

        if (requestParameters['production'] == null) {
            throw new runtime.RequiredError(
                'production',
                'Required parameter "production" was null or undefined when calling productionV1ProductionsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionToJSON(requestParameters['production']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionFromJSON(jsonValue));
    }

    /**
     * Create a new production.
     * Create a Production
     */
    async productionV1ProductionsCreate(requestParameters: ProductionV1ProductionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Production> {
        const response = await this.productionV1ProductionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a specific production.
     * Delete a Production
     */
    async productionV1ProductionsDestroyRaw(requestParameters: ProductionV1ProductionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProductionsDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a specific production.
     * Delete a Production
     */
    async productionV1ProductionsDestroy(requestParameters: ProductionV1ProductionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.productionV1ProductionsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve all productions.
     * List Productions
     */
    async productionV1ProductionsListRaw(requestParameters: ProductionV1ProductionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProductionListList>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['category'] != null) {
            queryParameters['category'] = requestParameters['category'];
        }

        if (requestParameters['director'] != null) {
            queryParameters['director'] = requestParameters['director'];
        }

        if (requestParameters['endDateLte'] != null) {
            queryParameters['end_date_lte'] = (requestParameters['endDateLte'] as any).toISOString();
        }

        if (requestParameters['hasFuturePerformances'] != null) {
            queryParameters['has_future_performances'] = requestParameters['hasFuturePerformances'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['nameIcontains'] != null) {
            queryParameters['name__icontains'] = requestParameters['nameIcontains'];
        }

        if (requestParameters['nameIstartswith'] != null) {
            queryParameters['name__istartswith'] = requestParameters['nameIstartswith'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['primaryCategory'] != null) {
            queryParameters['primary_category'] = requestParameters['primaryCategory'];
        }

        if (requestParameters['startDateGte'] != null) {
            queryParameters['start_date_gte'] = (requestParameters['startDateGte'] as any).toISOString();
        }

        if (requestParameters['statusIexact'] != null) {
            queryParameters['status__iexact'] = requestParameters['statusIexact'];
        }

        if (requestParameters['venue'] != null) {
            queryParameters['venue'] = requestParameters['venue'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedProductionListListFromJSON(jsonValue));
    }

    /**
     * Retrieve all productions.
     * List Productions
     */
    async productionV1ProductionsList(requestParameters: ProductionV1ProductionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProductionListList> {
        const response = await this.productionV1ProductionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new production member.
     * Create a Production Member
     */
    async productionV1ProductionsMembersCreateRaw(requestParameters: ProductionV1ProductionsMembersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionMember>> {
        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsMembersCreate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsMembersCreate().'
            );
        }

        if (requestParameters['productionMember'] == null) {
            throw new runtime.RequiredError(
                'productionMember',
                'Required parameter "productionMember" was null or undefined when calling productionV1ProductionsMembersCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/members/`;
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionMemberToJSON(requestParameters['productionMember']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionMemberFromJSON(jsonValue));
    }

    /**
     * Create a new production member.
     * Create a Production Member
     */
    async productionV1ProductionsMembersCreate(requestParameters: ProductionV1ProductionsMembersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionMember> {
        const response = await this.productionV1ProductionsMembersCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a specific production member.
     * Delete a Production Member
     */
    async productionV1ProductionsMembersDestroyRaw(requestParameters: ProductionV1ProductionsMembersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProductionsMembersDestroy().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsMembersDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsMembersDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/members/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a specific production member.
     * Delete a Production Member
     */
    async productionV1ProductionsMembersDestroy(requestParameters: ProductionV1ProductionsMembersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.productionV1ProductionsMembersDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve all members of a production.
     * List Production Members
     */
    async productionV1ProductionsMembersListRaw(requestParameters: ProductionV1ProductionsMembersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProductionMemberList>> {
        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsMembersList().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsMembersList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/members/`;
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedProductionMemberListFromJSON(jsonValue));
    }

    /**
     * Retrieve all members of a production.
     * List Production Members
     */
    async productionV1ProductionsMembersList(requestParameters: ProductionV1ProductionsMembersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProductionMemberList> {
        const response = await this.productionV1ProductionsMembersListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Partially update an existing production member.
     * Partially Update a Production Member
     */
    async productionV1ProductionsMembersPartialUpdateRaw(requestParameters: ProductionV1ProductionsMembersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionMember>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProductionsMembersPartialUpdate().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsMembersPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsMembersPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/members/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedProductionMemberToJSON(requestParameters['patchedProductionMember']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionMemberFromJSON(jsonValue));
    }

    /**
     * Partially update an existing production member.
     * Partially Update a Production Member
     */
    async productionV1ProductionsMembersPartialUpdate(requestParameters: ProductionV1ProductionsMembersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionMember> {
        const response = await this.productionV1ProductionsMembersPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a specific production member.
     * Retrieve a Production Member
     */
    async productionV1ProductionsMembersRetrieveRaw(requestParameters: ProductionV1ProductionsMembersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionMember>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProductionsMembersRetrieve().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsMembersRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsMembersRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/members/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionMemberFromJSON(jsonValue));
    }

    /**
     * Retrieve a specific production member.
     * Retrieve a Production Member
     */
    async productionV1ProductionsMembersRetrieve(requestParameters: ProductionV1ProductionsMembersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionMember> {
        const response = await this.productionV1ProductionsMembersRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new role assignment for a production member.
     * Create a Member Role Assignment
     */
    async productionV1ProductionsMembersRolesCreateRaw(requestParameters: ProductionV1ProductionsMembersRolesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionRoleAssignment>> {
        if (requestParameters['memberId'] == null) {
            throw new runtime.RequiredError(
                'memberId',
                'Required parameter "memberId" was null or undefined when calling productionV1ProductionsMembersRolesCreate().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsMembersRolesCreate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsMembersRolesCreate().'
            );
        }

        if (requestParameters['productionRoleAssignment'] == null) {
            throw new runtime.RequiredError(
                'productionRoleAssignment',
                'Required parameter "productionRoleAssignment" was null or undefined when calling productionV1ProductionsMembersRolesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/members/{member_id}/roles/`;
        urlPath = urlPath.replace(`{${"member_id"}}`, encodeURIComponent(String(requestParameters['memberId'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionRoleAssignmentToJSON(requestParameters['productionRoleAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionRoleAssignmentFromJSON(jsonValue));
    }

    /**
     * Create a new role assignment for a production member.
     * Create a Member Role Assignment
     */
    async productionV1ProductionsMembersRolesCreate(requestParameters: ProductionV1ProductionsMembersRolesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionRoleAssignment> {
        const response = await this.productionV1ProductionsMembersRolesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a specific role assignment for a production member.
     * Delete a Member Role Assignment
     */
    async productionV1ProductionsMembersRolesDestroyRaw(requestParameters: ProductionV1ProductionsMembersRolesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProductionsMembersRolesDestroy().'
            );
        }

        if (requestParameters['memberId'] == null) {
            throw new runtime.RequiredError(
                'memberId',
                'Required parameter "memberId" was null or undefined when calling productionV1ProductionsMembersRolesDestroy().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsMembersRolesDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsMembersRolesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/members/{member_id}/roles/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"member_id"}}`, encodeURIComponent(String(requestParameters['memberId'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a specific role assignment for a production member.
     * Delete a Member Role Assignment
     */
    async productionV1ProductionsMembersRolesDestroy(requestParameters: ProductionV1ProductionsMembersRolesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.productionV1ProductionsMembersRolesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve all role assignments for a specific production member.
     * List Member Role Assignments
     */
    async productionV1ProductionsMembersRolesListRaw(requestParameters: ProductionV1ProductionsMembersRolesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProductionRoleAssignmentList>> {
        if (requestParameters['memberId'] == null) {
            throw new runtime.RequiredError(
                'memberId',
                'Required parameter "memberId" was null or undefined when calling productionV1ProductionsMembersRolesList().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsMembersRolesList().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsMembersRolesList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['role'] != null) {
            queryParameters['role'] = requestParameters['role'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/members/{member_id}/roles/`;
        urlPath = urlPath.replace(`{${"member_id"}}`, encodeURIComponent(String(requestParameters['memberId'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedProductionRoleAssignmentListFromJSON(jsonValue));
    }

    /**
     * Retrieve all role assignments for a specific production member.
     * List Member Role Assignments
     */
    async productionV1ProductionsMembersRolesList(requestParameters: ProductionV1ProductionsMembersRolesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProductionRoleAssignmentList> {
        const response = await this.productionV1ProductionsMembersRolesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Partially update an existing role assignment for a production member.
     * Partially Update a Member Role Assignment
     */
    async productionV1ProductionsMembersRolesPartialUpdateRaw(requestParameters: ProductionV1ProductionsMembersRolesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionRoleAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProductionsMembersRolesPartialUpdate().'
            );
        }

        if (requestParameters['memberId'] == null) {
            throw new runtime.RequiredError(
                'memberId',
                'Required parameter "memberId" was null or undefined when calling productionV1ProductionsMembersRolesPartialUpdate().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsMembersRolesPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsMembersRolesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/members/{member_id}/roles/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"member_id"}}`, encodeURIComponent(String(requestParameters['memberId'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedProductionRoleAssignmentToJSON(requestParameters['patchedProductionRoleAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionRoleAssignmentFromJSON(jsonValue));
    }

    /**
     * Partially update an existing role assignment for a production member.
     * Partially Update a Member Role Assignment
     */
    async productionV1ProductionsMembersRolesPartialUpdate(requestParameters: ProductionV1ProductionsMembersRolesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionRoleAssignment> {
        const response = await this.productionV1ProductionsMembersRolesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a specific role assignment for a production member.
     * Retrieve a Member Role Assignment
     */
    async productionV1ProductionsMembersRolesRetrieveRaw(requestParameters: ProductionV1ProductionsMembersRolesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionRoleAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProductionsMembersRolesRetrieve().'
            );
        }

        if (requestParameters['memberId'] == null) {
            throw new runtime.RequiredError(
                'memberId',
                'Required parameter "memberId" was null or undefined when calling productionV1ProductionsMembersRolesRetrieve().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsMembersRolesRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsMembersRolesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/members/{member_id}/roles/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"member_id"}}`, encodeURIComponent(String(requestParameters['memberId'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionRoleAssignmentFromJSON(jsonValue));
    }

    /**
     * Retrieve a specific role assignment for a production member.
     * Retrieve a Member Role Assignment
     */
    async productionV1ProductionsMembersRolesRetrieve(requestParameters: ProductionV1ProductionsMembersRolesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionRoleAssignment> {
        const response = await this.productionV1ProductionsMembersRolesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing role assignment for a production member.
     * Update a Member Role Assignment
     */
    async productionV1ProductionsMembersRolesUpdateRaw(requestParameters: ProductionV1ProductionsMembersRolesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionRoleAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProductionsMembersRolesUpdate().'
            );
        }

        if (requestParameters['memberId'] == null) {
            throw new runtime.RequiredError(
                'memberId',
                'Required parameter "memberId" was null or undefined when calling productionV1ProductionsMembersRolesUpdate().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsMembersRolesUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsMembersRolesUpdate().'
            );
        }

        if (requestParameters['productionRoleAssignment'] == null) {
            throw new runtime.RequiredError(
                'productionRoleAssignment',
                'Required parameter "productionRoleAssignment" was null or undefined when calling productionV1ProductionsMembersRolesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/members/{member_id}/roles/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"member_id"}}`, encodeURIComponent(String(requestParameters['memberId'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionRoleAssignmentToJSON(requestParameters['productionRoleAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionRoleAssignmentFromJSON(jsonValue));
    }

    /**
     * Update an existing role assignment for a production member.
     * Update a Member Role Assignment
     */
    async productionV1ProductionsMembersRolesUpdate(requestParameters: ProductionV1ProductionsMembersRolesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionRoleAssignment> {
        const response = await this.productionV1ProductionsMembersRolesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing production member.
     * Update a Production Member
     */
    async productionV1ProductionsMembersUpdateRaw(requestParameters: ProductionV1ProductionsMembersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionMember>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProductionsMembersUpdate().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsMembersUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsMembersUpdate().'
            );
        }

        if (requestParameters['productionMember'] == null) {
            throw new runtime.RequiredError(
                'productionMember',
                'Required parameter "productionMember" was null or undefined when calling productionV1ProductionsMembersUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/members/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionMemberToJSON(requestParameters['productionMember']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionMemberFromJSON(jsonValue));
    }

    /**
     * Update an existing production member.
     * Update a Production Member
     */
    async productionV1ProductionsMembersUpdate(requestParameters: ProductionV1ProductionsMembersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionMember> {
        const response = await this.productionV1ProductionsMembersUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Partially update an existing production.
     * Partially Update a Production
     */
    async productionV1ProductionsPartialUpdateRaw(requestParameters: ProductionV1ProductionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Production>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProductionsPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedProductionToJSON(requestParameters['patchedProduction']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionFromJSON(jsonValue));
    }

    /**
     * Partially update an existing production.
     * Partially Update a Production
     */
    async productionV1ProductionsPartialUpdate(requestParameters: ProductionV1ProductionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Production> {
        const response = await this.productionV1ProductionsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new performance.
     * Create a Performance
     */
    async productionV1ProductionsPerformancesCreateRaw(requestParameters: ProductionV1ProductionsPerformancesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Performance>> {
        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsPerformancesCreate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsPerformancesCreate().'
            );
        }

        if (requestParameters['performance'] == null) {
            throw new runtime.RequiredError(
                'performance',
                'Required parameter "performance" was null or undefined when calling productionV1ProductionsPerformancesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/performances/`;
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PerformanceToJSON(requestParameters['performance']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PerformanceFromJSON(jsonValue));
    }

    /**
     * Create a new performance.
     * Create a Performance
     */
    async productionV1ProductionsPerformancesCreate(requestParameters: ProductionV1ProductionsPerformancesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Performance> {
        const response = await this.productionV1ProductionsPerformancesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a specific performance.
     * Delete a Performance
     */
    async productionV1ProductionsPerformancesDestroyRaw(requestParameters: ProductionV1ProductionsPerformancesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProductionsPerformancesDestroy().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsPerformancesDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsPerformancesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/performances/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a specific performance.
     * Delete a Performance
     */
    async productionV1ProductionsPerformancesDestroy(requestParameters: ProductionV1ProductionsPerformancesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.productionV1ProductionsPerformancesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve all performances for a production.
     * List Performances
     */
    async productionV1ProductionsPerformancesListRaw(requestParameters: ProductionV1ProductionsPerformancesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPerformanceList>> {
        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsPerformancesList().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsPerformancesList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/performances/`;
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPerformanceListFromJSON(jsonValue));
    }

    /**
     * Retrieve all performances for a production.
     * List Performances
     */
    async productionV1ProductionsPerformancesList(requestParameters: ProductionV1ProductionsPerformancesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPerformanceList> {
        const response = await this.productionV1ProductionsPerformancesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Partially update an existing performance.
     * Partially Update a Performance
     */
    async productionV1ProductionsPerformancesPartialUpdateRaw(requestParameters: ProductionV1ProductionsPerformancesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Performance>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProductionsPerformancesPartialUpdate().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsPerformancesPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsPerformancesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/performances/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedPerformanceToJSON(requestParameters['patchedPerformance']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PerformanceFromJSON(jsonValue));
    }

    /**
     * Partially update an existing performance.
     * Partially Update a Performance
     */
    async productionV1ProductionsPerformancesPartialUpdate(requestParameters: ProductionV1ProductionsPerformancesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Performance> {
        const response = await this.productionV1ProductionsPerformancesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a specific performance.
     * Retrieve a Performance
     */
    async productionV1ProductionsPerformancesRetrieveRaw(requestParameters: ProductionV1ProductionsPerformancesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Performance>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProductionsPerformancesRetrieve().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsPerformancesRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsPerformancesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/performances/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PerformanceFromJSON(jsonValue));
    }

    /**
     * Retrieve a specific performance.
     * Retrieve a Performance
     */
    async productionV1ProductionsPerformancesRetrieve(requestParameters: ProductionV1ProductionsPerformancesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Performance> {
        const response = await this.productionV1ProductionsPerformancesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing performance.
     * Update a Performance
     */
    async productionV1ProductionsPerformancesUpdateRaw(requestParameters: ProductionV1ProductionsPerformancesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Performance>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProductionsPerformancesUpdate().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsPerformancesUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsPerformancesUpdate().'
            );
        }

        if (requestParameters['performance'] == null) {
            throw new runtime.RequiredError(
                'performance',
                'Required parameter "performance" was null or undefined when calling productionV1ProductionsPerformancesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/performances/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PerformanceToJSON(requestParameters['performance']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PerformanceFromJSON(jsonValue));
    }

    /**
     * Update an existing performance.
     * Update a Performance
     */
    async productionV1ProductionsPerformancesUpdate(requestParameters: ProductionV1ProductionsPerformancesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Performance> {
        const response = await this.productionV1ProductionsPerformancesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new rehearsal.
     * Create a Rehearsal
     */
    async productionV1ProductionsRehearsalsCreateRaw(requestParameters: ProductionV1ProductionsRehearsalsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rehearsal>> {
        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsRehearsalsCreate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsRehearsalsCreate().'
            );
        }

        if (requestParameters['rehearsal'] == null) {
            throw new runtime.RequiredError(
                'rehearsal',
                'Required parameter "rehearsal" was null or undefined when calling productionV1ProductionsRehearsalsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/rehearsals/`;
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RehearsalToJSON(requestParameters['rehearsal']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RehearsalFromJSON(jsonValue));
    }

    /**
     * Create a new rehearsal.
     * Create a Rehearsal
     */
    async productionV1ProductionsRehearsalsCreate(requestParameters: ProductionV1ProductionsRehearsalsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rehearsal> {
        const response = await this.productionV1ProductionsRehearsalsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a specific rehearsal.
     * Delete a Rehearsal
     */
    async productionV1ProductionsRehearsalsDestroyRaw(requestParameters: ProductionV1ProductionsRehearsalsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProductionsRehearsalsDestroy().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsRehearsalsDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsRehearsalsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/rehearsals/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a specific rehearsal.
     * Delete a Rehearsal
     */
    async productionV1ProductionsRehearsalsDestroy(requestParameters: ProductionV1ProductionsRehearsalsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.productionV1ProductionsRehearsalsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve all rehearsals for a production.
     * List Rehearsals
     */
    async productionV1ProductionsRehearsalsListRaw(requestParameters: ProductionV1ProductionsRehearsalsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedRehearsalList>> {
        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsRehearsalsList().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsRehearsalsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/rehearsals/`;
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedRehearsalListFromJSON(jsonValue));
    }

    /**
     * Retrieve all rehearsals for a production.
     * List Rehearsals
     */
    async productionV1ProductionsRehearsalsList(requestParameters: ProductionV1ProductionsRehearsalsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedRehearsalList> {
        const response = await this.productionV1ProductionsRehearsalsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Partially update an existing rehearsal.
     * Partially Update a Rehearsal
     */
    async productionV1ProductionsRehearsalsPartialUpdateRaw(requestParameters: ProductionV1ProductionsRehearsalsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rehearsal>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProductionsRehearsalsPartialUpdate().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsRehearsalsPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsRehearsalsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/rehearsals/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedRehearsalToJSON(requestParameters['patchedRehearsal']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RehearsalFromJSON(jsonValue));
    }

    /**
     * Partially update an existing rehearsal.
     * Partially Update a Rehearsal
     */
    async productionV1ProductionsRehearsalsPartialUpdate(requestParameters: ProductionV1ProductionsRehearsalsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rehearsal> {
        const response = await this.productionV1ProductionsRehearsalsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new rehearsal participant.
     * Create a Rehearsal Participant
     */
    async productionV1ProductionsRehearsalsParticipantsCreateRaw(requestParameters: ProductionV1ProductionsRehearsalsParticipantsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RehearsalParticipant>> {
        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsRehearsalsParticipantsCreate().'
            );
        }

        if (requestParameters['rehearsalId'] == null) {
            throw new runtime.RequiredError(
                'rehearsalId',
                'Required parameter "rehearsalId" was null or undefined when calling productionV1ProductionsRehearsalsParticipantsCreate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsRehearsalsParticipantsCreate().'
            );
        }

        if (requestParameters['rehearsalParticipant'] == null) {
            throw new runtime.RequiredError(
                'rehearsalParticipant',
                'Required parameter "rehearsalParticipant" was null or undefined when calling productionV1ProductionsRehearsalsParticipantsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/rehearsals/{rehearsal_id}/participants/`;
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"rehearsal_id"}}`, encodeURIComponent(String(requestParameters['rehearsalId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RehearsalParticipantToJSON(requestParameters['rehearsalParticipant']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RehearsalParticipantFromJSON(jsonValue));
    }

    /**
     * Create a new rehearsal participant.
     * Create a Rehearsal Participant
     */
    async productionV1ProductionsRehearsalsParticipantsCreate(requestParameters: ProductionV1ProductionsRehearsalsParticipantsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RehearsalParticipant> {
        const response = await this.productionV1ProductionsRehearsalsParticipantsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a specific rehearsal participant.
     * Delete a Rehearsal Participant
     */
    async productionV1ProductionsRehearsalsParticipantsDestroyRaw(requestParameters: ProductionV1ProductionsRehearsalsParticipantsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProductionsRehearsalsParticipantsDestroy().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsRehearsalsParticipantsDestroy().'
            );
        }

        if (requestParameters['rehearsalId'] == null) {
            throw new runtime.RequiredError(
                'rehearsalId',
                'Required parameter "rehearsalId" was null or undefined when calling productionV1ProductionsRehearsalsParticipantsDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsRehearsalsParticipantsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/rehearsals/{rehearsal_id}/participants/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"rehearsal_id"}}`, encodeURIComponent(String(requestParameters['rehearsalId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a specific rehearsal participant.
     * Delete a Rehearsal Participant
     */
    async productionV1ProductionsRehearsalsParticipantsDestroy(requestParameters: ProductionV1ProductionsRehearsalsParticipantsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.productionV1ProductionsRehearsalsParticipantsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve all participants for a rehearsal.
     * List Rehearsal Participants
     */
    async productionV1ProductionsRehearsalsParticipantsListRaw(requestParameters: ProductionV1ProductionsRehearsalsParticipantsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedRehearsalParticipantList>> {
        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsRehearsalsParticipantsList().'
            );
        }

        if (requestParameters['rehearsalId'] == null) {
            throw new runtime.RequiredError(
                'rehearsalId',
                'Required parameter "rehearsalId" was null or undefined when calling productionV1ProductionsRehearsalsParticipantsList().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsRehearsalsParticipantsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/rehearsals/{rehearsal_id}/participants/`;
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"rehearsal_id"}}`, encodeURIComponent(String(requestParameters['rehearsalId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedRehearsalParticipantListFromJSON(jsonValue));
    }

    /**
     * Retrieve all participants for a rehearsal.
     * List Rehearsal Participants
     */
    async productionV1ProductionsRehearsalsParticipantsList(requestParameters: ProductionV1ProductionsRehearsalsParticipantsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedRehearsalParticipantList> {
        const response = await this.productionV1ProductionsRehearsalsParticipantsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Partially update an existing rehearsal participant.
     * Partially Update a Rehearsal Participant
     */
    async productionV1ProductionsRehearsalsParticipantsPartialUpdateRaw(requestParameters: ProductionV1ProductionsRehearsalsParticipantsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RehearsalParticipant>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProductionsRehearsalsParticipantsPartialUpdate().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsRehearsalsParticipantsPartialUpdate().'
            );
        }

        if (requestParameters['rehearsalId'] == null) {
            throw new runtime.RequiredError(
                'rehearsalId',
                'Required parameter "rehearsalId" was null or undefined when calling productionV1ProductionsRehearsalsParticipantsPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsRehearsalsParticipantsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/rehearsals/{rehearsal_id}/participants/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"rehearsal_id"}}`, encodeURIComponent(String(requestParameters['rehearsalId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedRehearsalParticipantToJSON(requestParameters['patchedRehearsalParticipant']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RehearsalParticipantFromJSON(jsonValue));
    }

    /**
     * Partially update an existing rehearsal participant.
     * Partially Update a Rehearsal Participant
     */
    async productionV1ProductionsRehearsalsParticipantsPartialUpdate(requestParameters: ProductionV1ProductionsRehearsalsParticipantsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RehearsalParticipant> {
        const response = await this.productionV1ProductionsRehearsalsParticipantsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a specific rehearsal participant.
     * Retrieve a Rehearsal Participant
     */
    async productionV1ProductionsRehearsalsParticipantsRetrieveRaw(requestParameters: ProductionV1ProductionsRehearsalsParticipantsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RehearsalParticipant>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProductionsRehearsalsParticipantsRetrieve().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsRehearsalsParticipantsRetrieve().'
            );
        }

        if (requestParameters['rehearsalId'] == null) {
            throw new runtime.RequiredError(
                'rehearsalId',
                'Required parameter "rehearsalId" was null or undefined when calling productionV1ProductionsRehearsalsParticipantsRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsRehearsalsParticipantsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/rehearsals/{rehearsal_id}/participants/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"rehearsal_id"}}`, encodeURIComponent(String(requestParameters['rehearsalId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RehearsalParticipantFromJSON(jsonValue));
    }

    /**
     * Retrieve a specific rehearsal participant.
     * Retrieve a Rehearsal Participant
     */
    async productionV1ProductionsRehearsalsParticipantsRetrieve(requestParameters: ProductionV1ProductionsRehearsalsParticipantsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RehearsalParticipant> {
        const response = await this.productionV1ProductionsRehearsalsParticipantsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing rehearsal participant.
     * Update a Rehearsal Participant
     */
    async productionV1ProductionsRehearsalsParticipantsUpdateRaw(requestParameters: ProductionV1ProductionsRehearsalsParticipantsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RehearsalParticipant>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProductionsRehearsalsParticipantsUpdate().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsRehearsalsParticipantsUpdate().'
            );
        }

        if (requestParameters['rehearsalId'] == null) {
            throw new runtime.RequiredError(
                'rehearsalId',
                'Required parameter "rehearsalId" was null or undefined when calling productionV1ProductionsRehearsalsParticipantsUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsRehearsalsParticipantsUpdate().'
            );
        }

        if (requestParameters['rehearsalParticipant'] == null) {
            throw new runtime.RequiredError(
                'rehearsalParticipant',
                'Required parameter "rehearsalParticipant" was null or undefined when calling productionV1ProductionsRehearsalsParticipantsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/rehearsals/{rehearsal_id}/participants/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"rehearsal_id"}}`, encodeURIComponent(String(requestParameters['rehearsalId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RehearsalParticipantToJSON(requestParameters['rehearsalParticipant']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RehearsalParticipantFromJSON(jsonValue));
    }

    /**
     * Update an existing rehearsal participant.
     * Update a Rehearsal Participant
     */
    async productionV1ProductionsRehearsalsParticipantsUpdate(requestParameters: ProductionV1ProductionsRehearsalsParticipantsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RehearsalParticipant> {
        const response = await this.productionV1ProductionsRehearsalsParticipantsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a specific rehearsal.
     * Retrieve a Rehearsal
     */
    async productionV1ProductionsRehearsalsRetrieveRaw(requestParameters: ProductionV1ProductionsRehearsalsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rehearsal>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProductionsRehearsalsRetrieve().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsRehearsalsRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsRehearsalsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/rehearsals/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RehearsalFromJSON(jsonValue));
    }

    /**
     * Retrieve a specific rehearsal.
     * Retrieve a Rehearsal
     */
    async productionV1ProductionsRehearsalsRetrieve(requestParameters: ProductionV1ProductionsRehearsalsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rehearsal> {
        const response = await this.productionV1ProductionsRehearsalsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing rehearsal.
     * Update a Rehearsal
     */
    async productionV1ProductionsRehearsalsUpdateRaw(requestParameters: ProductionV1ProductionsRehearsalsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rehearsal>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProductionsRehearsalsUpdate().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsRehearsalsUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsRehearsalsUpdate().'
            );
        }

        if (requestParameters['rehearsal'] == null) {
            throw new runtime.RequiredError(
                'rehearsal',
                'Required parameter "rehearsal" was null or undefined when calling productionV1ProductionsRehearsalsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/rehearsals/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RehearsalToJSON(requestParameters['rehearsal']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RehearsalFromJSON(jsonValue));
    }

    /**
     * Update an existing rehearsal.
     * Update a Rehearsal
     */
    async productionV1ProductionsRehearsalsUpdate(requestParameters: ProductionV1ProductionsRehearsalsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rehearsal> {
        const response = await this.productionV1ProductionsRehearsalsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a specific production.
     * Retrieve a Production
     */
    async productionV1ProductionsRetrieveRaw(requestParameters: ProductionV1ProductionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Production>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProductionsRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionFromJSON(jsonValue));
    }

    /**
     * Retrieve a specific production.
     * Retrieve a Production
     */
    async productionV1ProductionsRetrieve(requestParameters: ProductionV1ProductionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Production> {
        const response = await this.productionV1ProductionsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Base ViewSet for tenant-aware models.  Responsibilities: - Inherit tenant-aware behavior (scoped get_queryset, perform_create sets tenant) - Extend here with cross-cutting defaults common to most apps (e.g., pagination, permissions)
     */
    async productionV1ProductionsRolesCreateRaw(requestParameters: ProductionV1ProductionsRolesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionRoleAssignment>> {
        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsRolesCreate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsRolesCreate().'
            );
        }

        if (requestParameters['productionRoleAssignment'] == null) {
            throw new runtime.RequiredError(
                'productionRoleAssignment',
                'Required parameter "productionRoleAssignment" was null or undefined when calling productionV1ProductionsRolesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/roles/`;
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionRoleAssignmentToJSON(requestParameters['productionRoleAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionRoleAssignmentFromJSON(jsonValue));
    }

    /**
     * Base ViewSet for tenant-aware models.  Responsibilities: - Inherit tenant-aware behavior (scoped get_queryset, perform_create sets tenant) - Extend here with cross-cutting defaults common to most apps (e.g., pagination, permissions)
     */
    async productionV1ProductionsRolesCreate(requestParameters: ProductionV1ProductionsRolesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionRoleAssignment> {
        const response = await this.productionV1ProductionsRolesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Base ViewSet for tenant-aware models.  Responsibilities: - Inherit tenant-aware behavior (scoped get_queryset, perform_create sets tenant) - Extend here with cross-cutting defaults common to most apps (e.g., pagination, permissions)
     */
    async productionV1ProductionsRolesDestroyRaw(requestParameters: ProductionV1ProductionsRolesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProductionsRolesDestroy().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsRolesDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsRolesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/roles/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Base ViewSet for tenant-aware models.  Responsibilities: - Inherit tenant-aware behavior (scoped get_queryset, perform_create sets tenant) - Extend here with cross-cutting defaults common to most apps (e.g., pagination, permissions)
     */
    async productionV1ProductionsRolesDestroy(requestParameters: ProductionV1ProductionsRolesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.productionV1ProductionsRolesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve all role assignments for a production (across all members).
     * List Production Role Assignments (by production)
     */
    async productionV1ProductionsRolesListRaw(requestParameters: ProductionV1ProductionsRolesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProductionRoleAssignmentList>> {
        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsRolesList().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsRolesList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['role'] != null) {
            queryParameters['role'] = requestParameters['role'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/roles/`;
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedProductionRoleAssignmentListFromJSON(jsonValue));
    }

    /**
     * Retrieve all role assignments for a production (across all members).
     * List Production Role Assignments (by production)
     */
    async productionV1ProductionsRolesList(requestParameters: ProductionV1ProductionsRolesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProductionRoleAssignmentList> {
        const response = await this.productionV1ProductionsRolesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Base ViewSet for tenant-aware models.  Responsibilities: - Inherit tenant-aware behavior (scoped get_queryset, perform_create sets tenant) - Extend here with cross-cutting defaults common to most apps (e.g., pagination, permissions)
     */
    async productionV1ProductionsRolesPartialUpdateRaw(requestParameters: ProductionV1ProductionsRolesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionRoleAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProductionsRolesPartialUpdate().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsRolesPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsRolesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/roles/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedProductionRoleAssignmentToJSON(requestParameters['patchedProductionRoleAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionRoleAssignmentFromJSON(jsonValue));
    }

    /**
     * Base ViewSet for tenant-aware models.  Responsibilities: - Inherit tenant-aware behavior (scoped get_queryset, perform_create sets tenant) - Extend here with cross-cutting defaults common to most apps (e.g., pagination, permissions)
     */
    async productionV1ProductionsRolesPartialUpdate(requestParameters: ProductionV1ProductionsRolesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionRoleAssignment> {
        const response = await this.productionV1ProductionsRolesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Base ViewSet for tenant-aware models.  Responsibilities: - Inherit tenant-aware behavior (scoped get_queryset, perform_create sets tenant) - Extend here with cross-cutting defaults common to most apps (e.g., pagination, permissions)
     */
    async productionV1ProductionsRolesRetrieveRaw(requestParameters: ProductionV1ProductionsRolesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionRoleAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProductionsRolesRetrieve().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsRolesRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsRolesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/roles/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionRoleAssignmentFromJSON(jsonValue));
    }

    /**
     * Base ViewSet for tenant-aware models.  Responsibilities: - Inherit tenant-aware behavior (scoped get_queryset, perform_create sets tenant) - Extend here with cross-cutting defaults common to most apps (e.g., pagination, permissions)
     */
    async productionV1ProductionsRolesRetrieve(requestParameters: ProductionV1ProductionsRolesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionRoleAssignment> {
        const response = await this.productionV1ProductionsRolesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Base ViewSet for tenant-aware models.  Responsibilities: - Inherit tenant-aware behavior (scoped get_queryset, perform_create sets tenant) - Extend here with cross-cutting defaults common to most apps (e.g., pagination, permissions)
     */
    async productionV1ProductionsRolesUpdateRaw(requestParameters: ProductionV1ProductionsRolesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionRoleAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProductionsRolesUpdate().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling productionV1ProductionsRolesUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsRolesUpdate().'
            );
        }

        if (requestParameters['productionRoleAssignment'] == null) {
            throw new runtime.RequiredError(
                'productionRoleAssignment',
                'Required parameter "productionRoleAssignment" was null or undefined when calling productionV1ProductionsRolesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{production_id}/roles/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionRoleAssignmentToJSON(requestParameters['productionRoleAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionRoleAssignmentFromJSON(jsonValue));
    }

    /**
     * Base ViewSet for tenant-aware models.  Responsibilities: - Inherit tenant-aware behavior (scoped get_queryset, perform_create sets tenant) - Extend here with cross-cutting defaults common to most apps (e.g., pagination, permissions)
     */
    async productionV1ProductionsRolesUpdate(requestParameters: ProductionV1ProductionsRolesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionRoleAssignment> {
        const response = await this.productionV1ProductionsRolesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing production.
     * Update a Production
     */
    async productionV1ProductionsUpdateRaw(requestParameters: ProductionV1ProductionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Production>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProductionsUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1ProductionsUpdate().'
            );
        }

        if (requestParameters['production'] == null) {
            throw new runtime.RequiredError(
                'production',
                'Required parameter "production" was null or undefined when calling productionV1ProductionsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/production/v1/productions/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionToJSON(requestParameters['production']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionFromJSON(jsonValue));
    }

    /**
     * Update an existing production.
     * Update a Production
     */
    async productionV1ProductionsUpdate(requestParameters: ProductionV1ProductionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Production> {
        const response = await this.productionV1ProductionsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new production venue.
     * Create a Production Venue
     */
    async productionV1VenuesCreateRaw(requestParameters: ProductionV1VenuesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionVenue>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1VenuesCreate().'
            );
        }

        if (requestParameters['productionVenue'] == null) {
            throw new runtime.RequiredError(
                'productionVenue',
                'Required parameter "productionVenue" was null or undefined when calling productionV1VenuesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/production/v1/venues/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionVenueToJSON(requestParameters['productionVenue']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionVenueFromJSON(jsonValue));
    }

    /**
     * Create a new production venue.
     * Create a Production Venue
     */
    async productionV1VenuesCreate(requestParameters: ProductionV1VenuesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionVenue> {
        const response = await this.productionV1VenuesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a specific production venue.
     * Delete a Production Venue
     */
    async productionV1VenuesDestroyRaw(requestParameters: ProductionV1VenuesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1VenuesDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1VenuesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/production/v1/venues/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a specific production venue.
     * Delete a Production Venue
     */
    async productionV1VenuesDestroy(requestParameters: ProductionV1VenuesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.productionV1VenuesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve all production venues.
     * List Production Venues
     */
    async productionV1VenuesListRaw(requestParameters: ProductionV1VenuesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProductionVenueList>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1VenuesList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['production'] != null) {
            queryParameters['production'] = requestParameters['production'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/production/v1/venues/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedProductionVenueListFromJSON(jsonValue));
    }

    /**
     * Retrieve all production venues.
     * List Production Venues
     */
    async productionV1VenuesList(requestParameters: ProductionV1VenuesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProductionVenueList> {
        const response = await this.productionV1VenuesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Partially update an existing production venue.
     * Partially Update a Production Venue
     */
    async productionV1VenuesPartialUpdateRaw(requestParameters: ProductionV1VenuesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionVenue>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1VenuesPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1VenuesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/production/v1/venues/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedProductionVenueToJSON(requestParameters['patchedProductionVenue']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionVenueFromJSON(jsonValue));
    }

    /**
     * Partially update an existing production venue.
     * Partially Update a Production Venue
     */
    async productionV1VenuesPartialUpdate(requestParameters: ProductionV1VenuesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionVenue> {
        const response = await this.productionV1VenuesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a specific production venue.
     * Retrieve a Production Venue
     */
    async productionV1VenuesRetrieveRaw(requestParameters: ProductionV1VenuesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionVenue>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1VenuesRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1VenuesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/production/v1/venues/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionVenueFromJSON(jsonValue));
    }

    /**
     * Retrieve a specific production venue.
     * Retrieve a Production Venue
     */
    async productionV1VenuesRetrieve(requestParameters: ProductionV1VenuesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionVenue> {
        const response = await this.productionV1VenuesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing production venue.
     * Update a Production Venue
     */
    async productionV1VenuesUpdateRaw(requestParameters: ProductionV1VenuesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionVenue>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1VenuesUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling productionV1VenuesUpdate().'
            );
        }

        if (requestParameters['productionVenue'] == null) {
            throw new runtime.RequiredError(
                'productionVenue',
                'Required parameter "productionVenue" was null or undefined when calling productionV1VenuesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/production/v1/venues/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionVenueToJSON(requestParameters['productionVenue']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionVenueFromJSON(jsonValue));
    }

    /**
     * Update an existing production venue.
     * Update a Production Venue
     */
    async productionV1VenuesUpdate(requestParameters: ProductionV1VenuesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionVenue> {
        const response = await this.productionV1VenuesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ProductionV1ProductionsMembersRolesListRoleEnum = {
    Actor: 'actor',
    AssistantChoreographer: 'assistant_choreographer',
    AssistantCostumeDesigner: 'assistant_costume_designer',
    AssistantDirector: 'assistant_director',
    AssistantLightingDesigner: 'assistant_lighting_designer',
    AssistantLightingOperator: 'assistant_lighting_operator',
    AssistantProducer: 'assistant_producer',
    AssistantSetDesigner: 'assistant_set_designer',
    AssistantSoundDesigner: 'assistant_sound_designer',
    AssistantSoundOperator: 'assistant_sound_operator',
    AssistantStageManager: 'assistant_stage_manager',
    Cast: 'cast',
    Choreographer: 'choreographer',
    CostumeDesigner: 'costume_designer',
    Crew: 'crew',
    DeputyStageManager: 'deputy_stage_manager',
    Designer: 'designer',
    Director: 'director',
    LightingDesigner: 'lighting_designer',
    LightingOperator: 'lighting_operator',
    Musician: 'musician',
    ProdManager: 'prod_manager',
    Producer: 'producer',
    SetDesigner: 'set_designer',
    SoundDesigner: 'sound_designer',
    SoundOperator: 'sound_operator',
    StageManager: 'stage_manager',
    Technician: 'technician',
    Volunteer: 'volunteer'
} as const;
export type ProductionV1ProductionsMembersRolesListRoleEnum = typeof ProductionV1ProductionsMembersRolesListRoleEnum[keyof typeof ProductionV1ProductionsMembersRolesListRoleEnum];
/**
 * @export
 */
export const ProductionV1ProductionsRolesListRoleEnum = {
    Actor: 'actor',
    AssistantChoreographer: 'assistant_choreographer',
    AssistantCostumeDesigner: 'assistant_costume_designer',
    AssistantDirector: 'assistant_director',
    AssistantLightingDesigner: 'assistant_lighting_designer',
    AssistantLightingOperator: 'assistant_lighting_operator',
    AssistantProducer: 'assistant_producer',
    AssistantSetDesigner: 'assistant_set_designer',
    AssistantSoundDesigner: 'assistant_sound_designer',
    AssistantSoundOperator: 'assistant_sound_operator',
    AssistantStageManager: 'assistant_stage_manager',
    Cast: 'cast',
    Choreographer: 'choreographer',
    CostumeDesigner: 'costume_designer',
    Crew: 'crew',
    DeputyStageManager: 'deputy_stage_manager',
    Designer: 'designer',
    Director: 'director',
    LightingDesigner: 'lighting_designer',
    LightingOperator: 'lighting_operator',
    Musician: 'musician',
    ProdManager: 'prod_manager',
    Producer: 'producer',
    SetDesigner: 'set_designer',
    SoundDesigner: 'sound_designer',
    SoundOperator: 'sound_operator',
    StageManager: 'stage_manager',
    Technician: 'technician',
    Volunteer: 'volunteer'
} as const;
export type ProductionV1ProductionsRolesListRoleEnum = typeof ProductionV1ProductionsRolesListRoleEnum[keyof typeof ProductionV1ProductionsRolesListRoleEnum];
