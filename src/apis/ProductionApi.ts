/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.62
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaginatedPerformanceList,
  PaginatedProductionCategoryAssignmentList,
  PaginatedProductionCategoryList,
  PaginatedProductionList,
  PaginatedProductionMemberList,
  PaginatedProductionRoleAssignmentList,
  PaginatedRehearsalList,
  PaginatedRehearsalParticipantList,
  PatchedPerformance,
  PatchedProduction,
  PatchedProductionCategory,
  PatchedProductionCategoryAssignment,
  PatchedProductionMember,
  PatchedProductionRoleAssignment,
  PatchedRehearsal,
  PatchedRehearsalParticipant,
  Performance,
  Production,
  ProductionCategory,
  ProductionCategoryAssignment,
  ProductionMember,
  ProductionRoleAssignment,
  Rehearsal,
  RehearsalParticipant,
} from '../models/index';
import {
    PaginatedPerformanceListFromJSON,
    PaginatedPerformanceListToJSON,
    PaginatedProductionCategoryAssignmentListFromJSON,
    PaginatedProductionCategoryAssignmentListToJSON,
    PaginatedProductionCategoryListFromJSON,
    PaginatedProductionCategoryListToJSON,
    PaginatedProductionListFromJSON,
    PaginatedProductionListToJSON,
    PaginatedProductionMemberListFromJSON,
    PaginatedProductionMemberListToJSON,
    PaginatedProductionRoleAssignmentListFromJSON,
    PaginatedProductionRoleAssignmentListToJSON,
    PaginatedRehearsalListFromJSON,
    PaginatedRehearsalListToJSON,
    PaginatedRehearsalParticipantListFromJSON,
    PaginatedRehearsalParticipantListToJSON,
    PatchedPerformanceFromJSON,
    PatchedPerformanceToJSON,
    PatchedProductionFromJSON,
    PatchedProductionToJSON,
    PatchedProductionCategoryFromJSON,
    PatchedProductionCategoryToJSON,
    PatchedProductionCategoryAssignmentFromJSON,
    PatchedProductionCategoryAssignmentToJSON,
    PatchedProductionMemberFromJSON,
    PatchedProductionMemberToJSON,
    PatchedProductionRoleAssignmentFromJSON,
    PatchedProductionRoleAssignmentToJSON,
    PatchedRehearsalFromJSON,
    PatchedRehearsalToJSON,
    PatchedRehearsalParticipantFromJSON,
    PatchedRehearsalParticipantToJSON,
    PerformanceFromJSON,
    PerformanceToJSON,
    ProductionFromJSON,
    ProductionToJSON,
    ProductionCategoryFromJSON,
    ProductionCategoryToJSON,
    ProductionCategoryAssignmentFromJSON,
    ProductionCategoryAssignmentToJSON,
    ProductionMemberFromJSON,
    ProductionMemberToJSON,
    ProductionRoleAssignmentFromJSON,
    ProductionRoleAssignmentToJSON,
    RehearsalFromJSON,
    RehearsalToJSON,
    RehearsalParticipantFromJSON,
    RehearsalParticipantToJSON,
} from '../models/index';

export interface ProductionV1PerformanceCreateRequest {
    performance: Omit<Performance, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ProductionV1PerformanceDestroyRequest {
    id: number;
}

export interface ProductionV1PerformanceListRequest {
    page?: number;
    pageSize?: number;
}

export interface ProductionV1PerformancePartialUpdateRequest {
    id: number;
    patchedPerformance?: Omit<PatchedPerformance, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ProductionV1PerformanceRetrieveRequest {
    id: number;
}

export interface ProductionV1PerformanceUpdateRequest {
    id: number;
    performance: Omit<Performance, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ProductionV1ProdCategoryAssignmentCreateRequest {
    productionCategoryAssignment: Omit<ProductionCategoryAssignment, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ProductionV1ProdCategoryAssignmentDestroyRequest {
    id: number;
}

export interface ProductionV1ProdCategoryAssignmentListRequest {
    page?: number;
    pageSize?: number;
}

export interface ProductionV1ProdCategoryAssignmentPartialUpdateRequest {
    id: number;
    patchedProductionCategoryAssignment?: Omit<PatchedProductionCategoryAssignment, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ProductionV1ProdCategoryAssignmentRetrieveRequest {
    id: number;
}

export interface ProductionV1ProdCategoryAssignmentUpdateRequest {
    id: number;
    productionCategoryAssignment: Omit<ProductionCategoryAssignment, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ProductionV1ProdCategoryCreateRequest {
    productionCategory: Omit<ProductionCategory, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ProductionV1ProdCategoryDestroyRequest {
    id: number;
}

export interface ProductionV1ProdCategoryListRequest {
    page?: number;
    pageSize?: number;
}

export interface ProductionV1ProdCategoryPartialUpdateRequest {
    id: number;
    patchedProductionCategory?: Omit<PatchedProductionCategory, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ProductionV1ProdCategoryRetrieveRequest {
    id: number;
}

export interface ProductionV1ProdCategoryUpdateRequest {
    id: number;
    productionCategory: Omit<ProductionCategory, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ProductionV1ProdMembersCreateRequest {
    productionMember: Omit<ProductionMember, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ProductionV1ProdMembersDestroyRequest {
    id: number;
}

export interface ProductionV1ProdMembersListRequest {
    page?: number;
    pageSize?: number;
}

export interface ProductionV1ProdMembersPartialUpdateRequest {
    id: number;
    patchedProductionMember?: Omit<PatchedProductionMember, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ProductionV1ProdMembersRetrieveRequest {
    id: number;
}

export interface ProductionV1ProdMembersUpdateRequest {
    id: number;
    productionMember: Omit<ProductionMember, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ProductionV1ProdRolesCreateRequest {
    productionRoleAssignment: Omit<ProductionRoleAssignment, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ProductionV1ProdRolesDestroyRequest {
    id: number;
}

export interface ProductionV1ProdRolesListRequest {
    page?: number;
    pageSize?: number;
}

export interface ProductionV1ProdRolesPartialUpdateRequest {
    id: number;
    patchedProductionRoleAssignment?: Omit<PatchedProductionRoleAssignment, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ProductionV1ProdRolesRetrieveRequest {
    id: number;
}

export interface ProductionV1ProdRolesUpdateRequest {
    id: number;
    productionRoleAssignment: Omit<ProductionRoleAssignment, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ProductionV1ProductionCreateRequest {
    production: Omit<Production, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ProductionV1ProductionDestroyRequest {
    id: number;
}

export interface ProductionV1ProductionListRequest {
    page?: number;
    pageSize?: number;
}

export interface ProductionV1ProductionPartialUpdateRequest {
    id: number;
    patchedProduction?: Omit<PatchedProduction, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ProductionV1ProductionRetrieveRequest {
    id: number;
}

export interface ProductionV1ProductionUpdateRequest {
    id: number;
    production: Omit<Production, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ProductionV1RehearsalCreateRequest {
    rehearsal: Omit<Rehearsal, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ProductionV1RehearsalDestroyRequest {
    id: number;
}

export interface ProductionV1RehearsalListRequest {
    page?: number;
    pageSize?: number;
}

export interface ProductionV1RehearsalPartialUpdateRequest {
    id: number;
    patchedRehearsal?: Omit<PatchedRehearsal, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ProductionV1RehearsalParticipantCreateRequest {
    rehearsalParticipant: Omit<RehearsalParticipant, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ProductionV1RehearsalParticipantDestroyRequest {
    id: number;
}

export interface ProductionV1RehearsalParticipantListRequest {
    page?: number;
    pageSize?: number;
}

export interface ProductionV1RehearsalParticipantPartialUpdateRequest {
    id: number;
    patchedRehearsalParticipant?: Omit<PatchedRehearsalParticipant, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ProductionV1RehearsalParticipantRetrieveRequest {
    id: number;
}

export interface ProductionV1RehearsalParticipantUpdateRequest {
    id: number;
    rehearsalParticipant: Omit<RehearsalParticipant, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ProductionV1RehearsalRetrieveRequest {
    id: number;
}

export interface ProductionV1RehearsalUpdateRequest {
    id: number;
    rehearsal: Omit<Rehearsal, 'id'|'created_at'|'updated_at'|'created_by'>;
}

/**
 * 
 */
export class ProductionApi extends runtime.BaseAPI {

    /**
     */
    async productionV1PerformanceCreateRaw(requestParameters: ProductionV1PerformanceCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Performance>> {
        if (requestParameters['performance'] == null) {
            throw new runtime.RequiredError(
                'performance',
                'Required parameter "performance" was null or undefined when calling productionV1PerformanceCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/production/v1/performance/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PerformanceToJSON(requestParameters['performance']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PerformanceFromJSON(jsonValue));
    }

    /**
     */
    async productionV1PerformanceCreate(requestParameters: ProductionV1PerformanceCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Performance> {
        const response = await this.productionV1PerformanceCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1PerformanceDestroyRaw(requestParameters: ProductionV1PerformanceDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1PerformanceDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/production/v1/performance/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async productionV1PerformanceDestroy(requestParameters: ProductionV1PerformanceDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.productionV1PerformanceDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async productionV1PerformanceListRaw(requestParameters: ProductionV1PerformanceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPerformanceList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/production/v1/performance/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPerformanceListFromJSON(jsonValue));
    }

    /**
     */
    async productionV1PerformanceList(requestParameters: ProductionV1PerformanceListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPerformanceList> {
        const response = await this.productionV1PerformanceListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1PerformancePartialUpdateRaw(requestParameters: ProductionV1PerformancePartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Performance>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1PerformancePartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/production/v1/performance/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedPerformanceToJSON(requestParameters['patchedPerformance']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PerformanceFromJSON(jsonValue));
    }

    /**
     */
    async productionV1PerformancePartialUpdate(requestParameters: ProductionV1PerformancePartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Performance> {
        const response = await this.productionV1PerformancePartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1PerformanceRetrieveRaw(requestParameters: ProductionV1PerformanceRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Performance>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1PerformanceRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/production/v1/performance/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PerformanceFromJSON(jsonValue));
    }

    /**
     */
    async productionV1PerformanceRetrieve(requestParameters: ProductionV1PerformanceRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Performance> {
        const response = await this.productionV1PerformanceRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1PerformanceUpdateRaw(requestParameters: ProductionV1PerformanceUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Performance>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1PerformanceUpdate().'
            );
        }

        if (requestParameters['performance'] == null) {
            throw new runtime.RequiredError(
                'performance',
                'Required parameter "performance" was null or undefined when calling productionV1PerformanceUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/production/v1/performance/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PerformanceToJSON(requestParameters['performance']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PerformanceFromJSON(jsonValue));
    }

    /**
     */
    async productionV1PerformanceUpdate(requestParameters: ProductionV1PerformanceUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Performance> {
        const response = await this.productionV1PerformanceUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1ProdCategoryAssignmentCreateRaw(requestParameters: ProductionV1ProdCategoryAssignmentCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCategoryAssignment>> {
        if (requestParameters['productionCategoryAssignment'] == null) {
            throw new runtime.RequiredError(
                'productionCategoryAssignment',
                'Required parameter "productionCategoryAssignment" was null or undefined when calling productionV1ProdCategoryAssignmentCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/production/v1/prod-category-assignment/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionCategoryAssignmentToJSON(requestParameters['productionCategoryAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionCategoryAssignmentFromJSON(jsonValue));
    }

    /**
     */
    async productionV1ProdCategoryAssignmentCreate(requestParameters: ProductionV1ProdCategoryAssignmentCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCategoryAssignment> {
        const response = await this.productionV1ProdCategoryAssignmentCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1ProdCategoryAssignmentDestroyRaw(requestParameters: ProductionV1ProdCategoryAssignmentDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProdCategoryAssignmentDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/production/v1/prod-category-assignment/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async productionV1ProdCategoryAssignmentDestroy(requestParameters: ProductionV1ProdCategoryAssignmentDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.productionV1ProdCategoryAssignmentDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async productionV1ProdCategoryAssignmentListRaw(requestParameters: ProductionV1ProdCategoryAssignmentListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProductionCategoryAssignmentList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/production/v1/prod-category-assignment/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedProductionCategoryAssignmentListFromJSON(jsonValue));
    }

    /**
     */
    async productionV1ProdCategoryAssignmentList(requestParameters: ProductionV1ProdCategoryAssignmentListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProductionCategoryAssignmentList> {
        const response = await this.productionV1ProdCategoryAssignmentListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1ProdCategoryAssignmentPartialUpdateRaw(requestParameters: ProductionV1ProdCategoryAssignmentPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCategoryAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProdCategoryAssignmentPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/production/v1/prod-category-assignment/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedProductionCategoryAssignmentToJSON(requestParameters['patchedProductionCategoryAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionCategoryAssignmentFromJSON(jsonValue));
    }

    /**
     */
    async productionV1ProdCategoryAssignmentPartialUpdate(requestParameters: ProductionV1ProdCategoryAssignmentPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCategoryAssignment> {
        const response = await this.productionV1ProdCategoryAssignmentPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1ProdCategoryAssignmentRetrieveRaw(requestParameters: ProductionV1ProdCategoryAssignmentRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCategoryAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProdCategoryAssignmentRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/production/v1/prod-category-assignment/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionCategoryAssignmentFromJSON(jsonValue));
    }

    /**
     */
    async productionV1ProdCategoryAssignmentRetrieve(requestParameters: ProductionV1ProdCategoryAssignmentRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCategoryAssignment> {
        const response = await this.productionV1ProdCategoryAssignmentRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1ProdCategoryAssignmentUpdateRaw(requestParameters: ProductionV1ProdCategoryAssignmentUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCategoryAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProdCategoryAssignmentUpdate().'
            );
        }

        if (requestParameters['productionCategoryAssignment'] == null) {
            throw new runtime.RequiredError(
                'productionCategoryAssignment',
                'Required parameter "productionCategoryAssignment" was null or undefined when calling productionV1ProdCategoryAssignmentUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/production/v1/prod-category-assignment/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionCategoryAssignmentToJSON(requestParameters['productionCategoryAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionCategoryAssignmentFromJSON(jsonValue));
    }

    /**
     */
    async productionV1ProdCategoryAssignmentUpdate(requestParameters: ProductionV1ProdCategoryAssignmentUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCategoryAssignment> {
        const response = await this.productionV1ProdCategoryAssignmentUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1ProdCategoryCreateRaw(requestParameters: ProductionV1ProdCategoryCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCategory>> {
        if (requestParameters['productionCategory'] == null) {
            throw new runtime.RequiredError(
                'productionCategory',
                'Required parameter "productionCategory" was null or undefined when calling productionV1ProdCategoryCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/production/v1/prod-category/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionCategoryToJSON(requestParameters['productionCategory']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionCategoryFromJSON(jsonValue));
    }

    /**
     */
    async productionV1ProdCategoryCreate(requestParameters: ProductionV1ProdCategoryCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCategory> {
        const response = await this.productionV1ProdCategoryCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1ProdCategoryDestroyRaw(requestParameters: ProductionV1ProdCategoryDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProdCategoryDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/production/v1/prod-category/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async productionV1ProdCategoryDestroy(requestParameters: ProductionV1ProdCategoryDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.productionV1ProdCategoryDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async productionV1ProdCategoryListRaw(requestParameters: ProductionV1ProdCategoryListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProductionCategoryList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/production/v1/prod-category/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedProductionCategoryListFromJSON(jsonValue));
    }

    /**
     */
    async productionV1ProdCategoryList(requestParameters: ProductionV1ProdCategoryListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProductionCategoryList> {
        const response = await this.productionV1ProdCategoryListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1ProdCategoryPartialUpdateRaw(requestParameters: ProductionV1ProdCategoryPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCategory>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProdCategoryPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/production/v1/prod-category/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedProductionCategoryToJSON(requestParameters['patchedProductionCategory']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionCategoryFromJSON(jsonValue));
    }

    /**
     */
    async productionV1ProdCategoryPartialUpdate(requestParameters: ProductionV1ProdCategoryPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCategory> {
        const response = await this.productionV1ProdCategoryPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1ProdCategoryRetrieveRaw(requestParameters: ProductionV1ProdCategoryRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCategory>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProdCategoryRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/production/v1/prod-category/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionCategoryFromJSON(jsonValue));
    }

    /**
     */
    async productionV1ProdCategoryRetrieve(requestParameters: ProductionV1ProdCategoryRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCategory> {
        const response = await this.productionV1ProdCategoryRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1ProdCategoryUpdateRaw(requestParameters: ProductionV1ProdCategoryUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCategory>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProdCategoryUpdate().'
            );
        }

        if (requestParameters['productionCategory'] == null) {
            throw new runtime.RequiredError(
                'productionCategory',
                'Required parameter "productionCategory" was null or undefined when calling productionV1ProdCategoryUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/production/v1/prod-category/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionCategoryToJSON(requestParameters['productionCategory']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionCategoryFromJSON(jsonValue));
    }

    /**
     */
    async productionV1ProdCategoryUpdate(requestParameters: ProductionV1ProdCategoryUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCategory> {
        const response = await this.productionV1ProdCategoryUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1ProdMembersCreateRaw(requestParameters: ProductionV1ProdMembersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionMember>> {
        if (requestParameters['productionMember'] == null) {
            throw new runtime.RequiredError(
                'productionMember',
                'Required parameter "productionMember" was null or undefined when calling productionV1ProdMembersCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/production/v1/prod-members/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionMemberToJSON(requestParameters['productionMember']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionMemberFromJSON(jsonValue));
    }

    /**
     */
    async productionV1ProdMembersCreate(requestParameters: ProductionV1ProdMembersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionMember> {
        const response = await this.productionV1ProdMembersCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1ProdMembersDestroyRaw(requestParameters: ProductionV1ProdMembersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProdMembersDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/production/v1/prod-members/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async productionV1ProdMembersDestroy(requestParameters: ProductionV1ProdMembersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.productionV1ProdMembersDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async productionV1ProdMembersListRaw(requestParameters: ProductionV1ProdMembersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProductionMemberList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/production/v1/prod-members/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedProductionMemberListFromJSON(jsonValue));
    }

    /**
     */
    async productionV1ProdMembersList(requestParameters: ProductionV1ProdMembersListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProductionMemberList> {
        const response = await this.productionV1ProdMembersListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1ProdMembersPartialUpdateRaw(requestParameters: ProductionV1ProdMembersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionMember>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProdMembersPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/production/v1/prod-members/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedProductionMemberToJSON(requestParameters['patchedProductionMember']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionMemberFromJSON(jsonValue));
    }

    /**
     */
    async productionV1ProdMembersPartialUpdate(requestParameters: ProductionV1ProdMembersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionMember> {
        const response = await this.productionV1ProdMembersPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1ProdMembersRetrieveRaw(requestParameters: ProductionV1ProdMembersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionMember>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProdMembersRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/production/v1/prod-members/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionMemberFromJSON(jsonValue));
    }

    /**
     */
    async productionV1ProdMembersRetrieve(requestParameters: ProductionV1ProdMembersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionMember> {
        const response = await this.productionV1ProdMembersRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1ProdMembersUpdateRaw(requestParameters: ProductionV1ProdMembersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionMember>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProdMembersUpdate().'
            );
        }

        if (requestParameters['productionMember'] == null) {
            throw new runtime.RequiredError(
                'productionMember',
                'Required parameter "productionMember" was null or undefined when calling productionV1ProdMembersUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/production/v1/prod-members/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionMemberToJSON(requestParameters['productionMember']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionMemberFromJSON(jsonValue));
    }

    /**
     */
    async productionV1ProdMembersUpdate(requestParameters: ProductionV1ProdMembersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionMember> {
        const response = await this.productionV1ProdMembersUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1ProdRolesCreateRaw(requestParameters: ProductionV1ProdRolesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionRoleAssignment>> {
        if (requestParameters['productionRoleAssignment'] == null) {
            throw new runtime.RequiredError(
                'productionRoleAssignment',
                'Required parameter "productionRoleAssignment" was null or undefined when calling productionV1ProdRolesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/production/v1/prod-roles/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionRoleAssignmentToJSON(requestParameters['productionRoleAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionRoleAssignmentFromJSON(jsonValue));
    }

    /**
     */
    async productionV1ProdRolesCreate(requestParameters: ProductionV1ProdRolesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionRoleAssignment> {
        const response = await this.productionV1ProdRolesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1ProdRolesDestroyRaw(requestParameters: ProductionV1ProdRolesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProdRolesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/production/v1/prod-roles/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async productionV1ProdRolesDestroy(requestParameters: ProductionV1ProdRolesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.productionV1ProdRolesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async productionV1ProdRolesListRaw(requestParameters: ProductionV1ProdRolesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProductionRoleAssignmentList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/production/v1/prod-roles/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedProductionRoleAssignmentListFromJSON(jsonValue));
    }

    /**
     */
    async productionV1ProdRolesList(requestParameters: ProductionV1ProdRolesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProductionRoleAssignmentList> {
        const response = await this.productionV1ProdRolesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1ProdRolesPartialUpdateRaw(requestParameters: ProductionV1ProdRolesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionRoleAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProdRolesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/production/v1/prod-roles/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedProductionRoleAssignmentToJSON(requestParameters['patchedProductionRoleAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionRoleAssignmentFromJSON(jsonValue));
    }

    /**
     */
    async productionV1ProdRolesPartialUpdate(requestParameters: ProductionV1ProdRolesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionRoleAssignment> {
        const response = await this.productionV1ProdRolesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1ProdRolesRetrieveRaw(requestParameters: ProductionV1ProdRolesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionRoleAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProdRolesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/production/v1/prod-roles/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionRoleAssignmentFromJSON(jsonValue));
    }

    /**
     */
    async productionV1ProdRolesRetrieve(requestParameters: ProductionV1ProdRolesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionRoleAssignment> {
        const response = await this.productionV1ProdRolesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1ProdRolesUpdateRaw(requestParameters: ProductionV1ProdRolesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionRoleAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProdRolesUpdate().'
            );
        }

        if (requestParameters['productionRoleAssignment'] == null) {
            throw new runtime.RequiredError(
                'productionRoleAssignment',
                'Required parameter "productionRoleAssignment" was null or undefined when calling productionV1ProdRolesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/production/v1/prod-roles/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionRoleAssignmentToJSON(requestParameters['productionRoleAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionRoleAssignmentFromJSON(jsonValue));
    }

    /**
     */
    async productionV1ProdRolesUpdate(requestParameters: ProductionV1ProdRolesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionRoleAssignment> {
        const response = await this.productionV1ProdRolesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1ProductionCreateRaw(requestParameters: ProductionV1ProductionCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Production>> {
        if (requestParameters['production'] == null) {
            throw new runtime.RequiredError(
                'production',
                'Required parameter "production" was null or undefined when calling productionV1ProductionCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/production/v1/production/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionToJSON(requestParameters['production']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionFromJSON(jsonValue));
    }

    /**
     */
    async productionV1ProductionCreate(requestParameters: ProductionV1ProductionCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Production> {
        const response = await this.productionV1ProductionCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1ProductionDestroyRaw(requestParameters: ProductionV1ProductionDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProductionDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/production/v1/production/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async productionV1ProductionDestroy(requestParameters: ProductionV1ProductionDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.productionV1ProductionDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async productionV1ProductionListRaw(requestParameters: ProductionV1ProductionListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProductionList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/production/v1/production/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedProductionListFromJSON(jsonValue));
    }

    /**
     */
    async productionV1ProductionList(requestParameters: ProductionV1ProductionListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProductionList> {
        const response = await this.productionV1ProductionListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1ProductionPartialUpdateRaw(requestParameters: ProductionV1ProductionPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Production>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProductionPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/production/v1/production/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedProductionToJSON(requestParameters['patchedProduction']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionFromJSON(jsonValue));
    }

    /**
     */
    async productionV1ProductionPartialUpdate(requestParameters: ProductionV1ProductionPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Production> {
        const response = await this.productionV1ProductionPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1ProductionRetrieveRaw(requestParameters: ProductionV1ProductionRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Production>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProductionRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/production/v1/production/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionFromJSON(jsonValue));
    }

    /**
     */
    async productionV1ProductionRetrieve(requestParameters: ProductionV1ProductionRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Production> {
        const response = await this.productionV1ProductionRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1ProductionUpdateRaw(requestParameters: ProductionV1ProductionUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Production>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1ProductionUpdate().'
            );
        }

        if (requestParameters['production'] == null) {
            throw new runtime.RequiredError(
                'production',
                'Required parameter "production" was null or undefined when calling productionV1ProductionUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/production/v1/production/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionToJSON(requestParameters['production']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionFromJSON(jsonValue));
    }

    /**
     */
    async productionV1ProductionUpdate(requestParameters: ProductionV1ProductionUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Production> {
        const response = await this.productionV1ProductionUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1RehearsalCreateRaw(requestParameters: ProductionV1RehearsalCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rehearsal>> {
        if (requestParameters['rehearsal'] == null) {
            throw new runtime.RequiredError(
                'rehearsal',
                'Required parameter "rehearsal" was null or undefined when calling productionV1RehearsalCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/production/v1/rehearsal/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RehearsalToJSON(requestParameters['rehearsal']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RehearsalFromJSON(jsonValue));
    }

    /**
     */
    async productionV1RehearsalCreate(requestParameters: ProductionV1RehearsalCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rehearsal> {
        const response = await this.productionV1RehearsalCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1RehearsalDestroyRaw(requestParameters: ProductionV1RehearsalDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1RehearsalDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/production/v1/rehearsal/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async productionV1RehearsalDestroy(requestParameters: ProductionV1RehearsalDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.productionV1RehearsalDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async productionV1RehearsalListRaw(requestParameters: ProductionV1RehearsalListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedRehearsalList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/production/v1/rehearsal/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedRehearsalListFromJSON(jsonValue));
    }

    /**
     */
    async productionV1RehearsalList(requestParameters: ProductionV1RehearsalListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedRehearsalList> {
        const response = await this.productionV1RehearsalListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1RehearsalPartialUpdateRaw(requestParameters: ProductionV1RehearsalPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rehearsal>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1RehearsalPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/production/v1/rehearsal/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedRehearsalToJSON(requestParameters['patchedRehearsal']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RehearsalFromJSON(jsonValue));
    }

    /**
     */
    async productionV1RehearsalPartialUpdate(requestParameters: ProductionV1RehearsalPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rehearsal> {
        const response = await this.productionV1RehearsalPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1RehearsalParticipantCreateRaw(requestParameters: ProductionV1RehearsalParticipantCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RehearsalParticipant>> {
        if (requestParameters['rehearsalParticipant'] == null) {
            throw new runtime.RequiredError(
                'rehearsalParticipant',
                'Required parameter "rehearsalParticipant" was null or undefined when calling productionV1RehearsalParticipantCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/production/v1/rehearsal-participant/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RehearsalParticipantToJSON(requestParameters['rehearsalParticipant']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RehearsalParticipantFromJSON(jsonValue));
    }

    /**
     */
    async productionV1RehearsalParticipantCreate(requestParameters: ProductionV1RehearsalParticipantCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RehearsalParticipant> {
        const response = await this.productionV1RehearsalParticipantCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1RehearsalParticipantDestroyRaw(requestParameters: ProductionV1RehearsalParticipantDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1RehearsalParticipantDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/production/v1/rehearsal-participant/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async productionV1RehearsalParticipantDestroy(requestParameters: ProductionV1RehearsalParticipantDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.productionV1RehearsalParticipantDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async productionV1RehearsalParticipantListRaw(requestParameters: ProductionV1RehearsalParticipantListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedRehearsalParticipantList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/production/v1/rehearsal-participant/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedRehearsalParticipantListFromJSON(jsonValue));
    }

    /**
     */
    async productionV1RehearsalParticipantList(requestParameters: ProductionV1RehearsalParticipantListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedRehearsalParticipantList> {
        const response = await this.productionV1RehearsalParticipantListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1RehearsalParticipantPartialUpdateRaw(requestParameters: ProductionV1RehearsalParticipantPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RehearsalParticipant>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1RehearsalParticipantPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/production/v1/rehearsal-participant/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedRehearsalParticipantToJSON(requestParameters['patchedRehearsalParticipant']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RehearsalParticipantFromJSON(jsonValue));
    }

    /**
     */
    async productionV1RehearsalParticipantPartialUpdate(requestParameters: ProductionV1RehearsalParticipantPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RehearsalParticipant> {
        const response = await this.productionV1RehearsalParticipantPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1RehearsalParticipantRetrieveRaw(requestParameters: ProductionV1RehearsalParticipantRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RehearsalParticipant>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1RehearsalParticipantRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/production/v1/rehearsal-participant/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RehearsalParticipantFromJSON(jsonValue));
    }

    /**
     */
    async productionV1RehearsalParticipantRetrieve(requestParameters: ProductionV1RehearsalParticipantRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RehearsalParticipant> {
        const response = await this.productionV1RehearsalParticipantRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1RehearsalParticipantUpdateRaw(requestParameters: ProductionV1RehearsalParticipantUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RehearsalParticipant>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1RehearsalParticipantUpdate().'
            );
        }

        if (requestParameters['rehearsalParticipant'] == null) {
            throw new runtime.RequiredError(
                'rehearsalParticipant',
                'Required parameter "rehearsalParticipant" was null or undefined when calling productionV1RehearsalParticipantUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/production/v1/rehearsal-participant/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RehearsalParticipantToJSON(requestParameters['rehearsalParticipant']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RehearsalParticipantFromJSON(jsonValue));
    }

    /**
     */
    async productionV1RehearsalParticipantUpdate(requestParameters: ProductionV1RehearsalParticipantUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RehearsalParticipant> {
        const response = await this.productionV1RehearsalParticipantUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1RehearsalRetrieveRaw(requestParameters: ProductionV1RehearsalRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rehearsal>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1RehearsalRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/production/v1/rehearsal/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RehearsalFromJSON(jsonValue));
    }

    /**
     */
    async productionV1RehearsalRetrieve(requestParameters: ProductionV1RehearsalRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rehearsal> {
        const response = await this.productionV1RehearsalRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productionV1RehearsalUpdateRaw(requestParameters: ProductionV1RehearsalUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rehearsal>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productionV1RehearsalUpdate().'
            );
        }

        if (requestParameters['rehearsal'] == null) {
            throw new runtime.RequiredError(
                'rehearsal',
                'Required parameter "rehearsal" was null or undefined when calling productionV1RehearsalUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/production/v1/rehearsal/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RehearsalToJSON(requestParameters['rehearsal']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RehearsalFromJSON(jsonValue));
    }

    /**
     */
    async productionV1RehearsalUpdate(requestParameters: ProductionV1RehearsalUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rehearsal> {
        const response = await this.productionV1RehearsalUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
