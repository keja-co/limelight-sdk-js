/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.71
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Document,
  DocumentRepo,
  DocumentTag,
  DocumentVersion,
  Folder,
  PaginatedDocumentList,
  PaginatedDocumentRepoList,
  PaginatedDocumentTagList,
  PaginatedDocumentVersionList,
  PaginatedFolderList,
  PaginatedTagList,
  PatchedDocument,
  PatchedDocumentRepo,
  PatchedDocumentVersion,
  PatchedFolder,
  PatchedTag,
  Tag,
} from '../models/index';
import {
    DocumentFromJSON,
    DocumentToJSON,
    DocumentRepoFromJSON,
    DocumentRepoToJSON,
    DocumentTagFromJSON,
    DocumentTagToJSON,
    DocumentVersionFromJSON,
    DocumentVersionToJSON,
    FolderFromJSON,
    FolderToJSON,
    PaginatedDocumentListFromJSON,
    PaginatedDocumentListToJSON,
    PaginatedDocumentRepoListFromJSON,
    PaginatedDocumentRepoListToJSON,
    PaginatedDocumentTagListFromJSON,
    PaginatedDocumentTagListToJSON,
    PaginatedDocumentVersionListFromJSON,
    PaginatedDocumentVersionListToJSON,
    PaginatedFolderListFromJSON,
    PaginatedFolderListToJSON,
    PaginatedTagListFromJSON,
    PaginatedTagListToJSON,
    PatchedDocumentFromJSON,
    PatchedDocumentToJSON,
    PatchedDocumentRepoFromJSON,
    PatchedDocumentRepoToJSON,
    PatchedDocumentVersionFromJSON,
    PatchedDocumentVersionToJSON,
    PatchedFolderFromJSON,
    PatchedFolderToJSON,
    PatchedTagFromJSON,
    PatchedTagToJSON,
    TagFromJSON,
    TagToJSON,
} from '../models/index';

export interface DocumentsV1ReposCreateRequest {
    documentRepo: Omit<DocumentRepo, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface DocumentsV1ReposDestroyRequest {
    id: number;
}

export interface DocumentsV1ReposDocumentsCreateRequest {
    repoId: string;
    document: Omit<Document, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface DocumentsV1ReposDocumentsDestroyRequest {
    id: number;
    repoId: string;
}

export interface DocumentsV1ReposDocumentsListRequest {
    repoId: string;
    folderId?: string;
    page?: number;
    pageSize?: number;
}

export interface DocumentsV1ReposDocumentsPartialUpdateRequest {
    id: number;
    repoId: string;
    patchedDocument?: Omit<PatchedDocument, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface DocumentsV1ReposDocumentsRetrieveRequest {
    id: number;
    repoId: string;
}

export interface DocumentsV1ReposDocumentsTagsCreateRequest {
    documentId: string;
    repoId: string;
    documentTag: Omit<DocumentTag, 'id'|'tag'|'document'|'created_at'|'updated_at'|'created_by'>;
}

export interface DocumentsV1ReposDocumentsTagsDestroyRequest {
    documentId: string;
    id: number;
    repoId: string;
}

export interface DocumentsV1ReposDocumentsTagsListRequest {
    documentId: string;
    repoId: string;
    page?: number;
    pageSize?: number;
}

export interface DocumentsV1ReposDocumentsTagsRetrieveRequest {
    documentId: string;
    id: number;
    repoId: string;
}

export interface DocumentsV1ReposDocumentsUpdateRequest {
    id: number;
    repoId: string;
    document: Omit<Document, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface DocumentsV1ReposDocumentsVersionsCreateRequest {
    documentId: string;
    repoId: string;
    documentVersion: Omit<DocumentVersion, 'id'|'created_at'|'updated_at'|'version'|'created_by'>;
}

export interface DocumentsV1ReposDocumentsVersionsDestroyRequest {
    documentId: string;
    id: number;
    repoId: string;
}

export interface DocumentsV1ReposDocumentsVersionsListRequest {
    documentId: string;
    repoId: string;
    page?: number;
    pageSize?: number;
}

export interface DocumentsV1ReposDocumentsVersionsPartialUpdateRequest {
    documentId: string;
    id: number;
    repoId: string;
    patchedDocumentVersion?: Omit<PatchedDocumentVersion, 'id'|'created_at'|'updated_at'|'version'|'created_by'>;
}

export interface DocumentsV1ReposDocumentsVersionsRetrieveRequest {
    documentId: string;
    id: number;
    repoId: string;
}

export interface DocumentsV1ReposDocumentsVersionsUpdateRequest {
    documentId: string;
    id: number;
    repoId: string;
    documentVersion: Omit<DocumentVersion, 'id'|'created_at'|'updated_at'|'version'|'created_by'>;
}

export interface DocumentsV1ReposFoldersCreateRequest {
    repoId: string;
    folder: Omit<Folder, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface DocumentsV1ReposFoldersDestroyRequest {
    id: number;
    repoId: string;
}

export interface DocumentsV1ReposFoldersListRequest {
    repoId: string;
    page?: number;
    pageSize?: number;
    parentFolderId?: string;
}

export interface DocumentsV1ReposFoldersPartialUpdateRequest {
    id: number;
    repoId: string;
    patchedFolder?: Omit<PatchedFolder, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface DocumentsV1ReposFoldersRetrieveRequest {
    id: number;
    repoId: string;
}

export interface DocumentsV1ReposFoldersUpdateRequest {
    id: number;
    repoId: string;
    folder: Omit<Folder, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface DocumentsV1ReposListRequest {
    page?: number;
    pageSize?: number;
}

export interface DocumentsV1ReposPartialUpdateRequest {
    id: number;
    patchedDocumentRepo?: Omit<PatchedDocumentRepo, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface DocumentsV1ReposRetrieveRequest {
    id: number;
}

export interface DocumentsV1ReposUpdateRequest {
    id: number;
    documentRepo: Omit<DocumentRepo, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface DocumentsV1TagsCreateRequest {
    tag: Omit<Tag, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface DocumentsV1TagsDestroyRequest {
    id: number;
}

export interface DocumentsV1TagsListRequest {
    page?: number;
    pageSize?: number;
}

export interface DocumentsV1TagsPartialUpdateRequest {
    id: number;
    patchedTag?: Omit<PatchedTag, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface DocumentsV1TagsRetrieveRequest {
    id: number;
}

export interface DocumentsV1TagsUpdateRequest {
    id: number;
    tag: Omit<Tag, 'id'|'created_at'|'updated_at'|'created_by'>;
}

/**
 * 
 */
export class DocumentsApi extends runtime.BaseAPI {

    /**
     */
    async documentsV1ReposCreateRaw(requestParameters: DocumentsV1ReposCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentRepo>> {
        if (requestParameters['documentRepo'] == null) {
            throw new runtime.RequiredError(
                'documentRepo',
                'Required parameter "documentRepo" was null or undefined when calling documentsV1ReposCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/documents/v1/repos/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentRepoToJSON(requestParameters['documentRepo']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentRepoFromJSON(jsonValue));
    }

    /**
     */
    async documentsV1ReposCreate(requestParameters: DocumentsV1ReposCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentRepo> {
        const response = await this.documentsV1ReposCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async documentsV1ReposDestroyRaw(requestParameters: DocumentsV1ReposDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling documentsV1ReposDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/documents/v1/repos/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async documentsV1ReposDestroy(requestParameters: DocumentsV1ReposDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.documentsV1ReposDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async documentsV1ReposDocumentsCreateRaw(requestParameters: DocumentsV1ReposDocumentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Document>> {
        if (requestParameters['repoId'] == null) {
            throw new runtime.RequiredError(
                'repoId',
                'Required parameter "repoId" was null or undefined when calling documentsV1ReposDocumentsCreate().'
            );
        }

        if (requestParameters['document'] == null) {
            throw new runtime.RequiredError(
                'document',
                'Required parameter "document" was null or undefined when calling documentsV1ReposDocumentsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/documents/v1/repos/{repo_id}/documents/`;
        urlPath = urlPath.replace(`{${"repo_id"}}`, encodeURIComponent(String(requestParameters['repoId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentToJSON(requestParameters['document']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentFromJSON(jsonValue));
    }

    /**
     */
    async documentsV1ReposDocumentsCreate(requestParameters: DocumentsV1ReposDocumentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Document> {
        const response = await this.documentsV1ReposDocumentsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async documentsV1ReposDocumentsDestroyRaw(requestParameters: DocumentsV1ReposDocumentsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling documentsV1ReposDocumentsDestroy().'
            );
        }

        if (requestParameters['repoId'] == null) {
            throw new runtime.RequiredError(
                'repoId',
                'Required parameter "repoId" was null or undefined when calling documentsV1ReposDocumentsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/documents/v1/repos/{repo_id}/documents/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"repo_id"}}`, encodeURIComponent(String(requestParameters['repoId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async documentsV1ReposDocumentsDestroy(requestParameters: DocumentsV1ReposDocumentsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.documentsV1ReposDocumentsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async documentsV1ReposDocumentsListRaw(requestParameters: DocumentsV1ReposDocumentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedDocumentList>> {
        if (requestParameters['repoId'] == null) {
            throw new runtime.RequiredError(
                'repoId',
                'Required parameter "repoId" was null or undefined when calling documentsV1ReposDocumentsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['folderId'] != null) {
            queryParameters['folder_id'] = requestParameters['folderId'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/documents/v1/repos/{repo_id}/documents/`;
        urlPath = urlPath.replace(`{${"repo_id"}}`, encodeURIComponent(String(requestParameters['repoId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedDocumentListFromJSON(jsonValue));
    }

    /**
     */
    async documentsV1ReposDocumentsList(requestParameters: DocumentsV1ReposDocumentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedDocumentList> {
        const response = await this.documentsV1ReposDocumentsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async documentsV1ReposDocumentsPartialUpdateRaw(requestParameters: DocumentsV1ReposDocumentsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Document>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling documentsV1ReposDocumentsPartialUpdate().'
            );
        }

        if (requestParameters['repoId'] == null) {
            throw new runtime.RequiredError(
                'repoId',
                'Required parameter "repoId" was null or undefined when calling documentsV1ReposDocumentsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/documents/v1/repos/{repo_id}/documents/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"repo_id"}}`, encodeURIComponent(String(requestParameters['repoId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedDocumentToJSON(requestParameters['patchedDocument']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentFromJSON(jsonValue));
    }

    /**
     */
    async documentsV1ReposDocumentsPartialUpdate(requestParameters: DocumentsV1ReposDocumentsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Document> {
        const response = await this.documentsV1ReposDocumentsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async documentsV1ReposDocumentsRetrieveRaw(requestParameters: DocumentsV1ReposDocumentsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Document>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling documentsV1ReposDocumentsRetrieve().'
            );
        }

        if (requestParameters['repoId'] == null) {
            throw new runtime.RequiredError(
                'repoId',
                'Required parameter "repoId" was null or undefined when calling documentsV1ReposDocumentsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/documents/v1/repos/{repo_id}/documents/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"repo_id"}}`, encodeURIComponent(String(requestParameters['repoId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentFromJSON(jsonValue));
    }

    /**
     */
    async documentsV1ReposDocumentsRetrieve(requestParameters: DocumentsV1ReposDocumentsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Document> {
        const response = await this.documentsV1ReposDocumentsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async documentsV1ReposDocumentsTagsCreateRaw(requestParameters: DocumentsV1ReposDocumentsTagsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentTag>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling documentsV1ReposDocumentsTagsCreate().'
            );
        }

        if (requestParameters['repoId'] == null) {
            throw new runtime.RequiredError(
                'repoId',
                'Required parameter "repoId" was null or undefined when calling documentsV1ReposDocumentsTagsCreate().'
            );
        }

        if (requestParameters['documentTag'] == null) {
            throw new runtime.RequiredError(
                'documentTag',
                'Required parameter "documentTag" was null or undefined when calling documentsV1ReposDocumentsTagsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/documents/v1/repos/{repo_id}/documents/{document_id}/tags/`;
        urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
        urlPath = urlPath.replace(`{${"repo_id"}}`, encodeURIComponent(String(requestParameters['repoId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentTagToJSON(requestParameters['documentTag']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentTagFromJSON(jsonValue));
    }

    /**
     */
    async documentsV1ReposDocumentsTagsCreate(requestParameters: DocumentsV1ReposDocumentsTagsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentTag> {
        const response = await this.documentsV1ReposDocumentsTagsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async documentsV1ReposDocumentsTagsDestroyRaw(requestParameters: DocumentsV1ReposDocumentsTagsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling documentsV1ReposDocumentsTagsDestroy().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling documentsV1ReposDocumentsTagsDestroy().'
            );
        }

        if (requestParameters['repoId'] == null) {
            throw new runtime.RequiredError(
                'repoId',
                'Required parameter "repoId" was null or undefined when calling documentsV1ReposDocumentsTagsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/documents/v1/repos/{repo_id}/documents/{document_id}/tags/{id}/`;
        urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"repo_id"}}`, encodeURIComponent(String(requestParameters['repoId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async documentsV1ReposDocumentsTagsDestroy(requestParameters: DocumentsV1ReposDocumentsTagsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.documentsV1ReposDocumentsTagsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async documentsV1ReposDocumentsTagsListRaw(requestParameters: DocumentsV1ReposDocumentsTagsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedDocumentTagList>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling documentsV1ReposDocumentsTagsList().'
            );
        }

        if (requestParameters['repoId'] == null) {
            throw new runtime.RequiredError(
                'repoId',
                'Required parameter "repoId" was null or undefined when calling documentsV1ReposDocumentsTagsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/documents/v1/repos/{repo_id}/documents/{document_id}/tags/`;
        urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
        urlPath = urlPath.replace(`{${"repo_id"}}`, encodeURIComponent(String(requestParameters['repoId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedDocumentTagListFromJSON(jsonValue));
    }

    /**
     */
    async documentsV1ReposDocumentsTagsList(requestParameters: DocumentsV1ReposDocumentsTagsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedDocumentTagList> {
        const response = await this.documentsV1ReposDocumentsTagsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async documentsV1ReposDocumentsTagsRetrieveRaw(requestParameters: DocumentsV1ReposDocumentsTagsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentTag>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling documentsV1ReposDocumentsTagsRetrieve().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling documentsV1ReposDocumentsTagsRetrieve().'
            );
        }

        if (requestParameters['repoId'] == null) {
            throw new runtime.RequiredError(
                'repoId',
                'Required parameter "repoId" was null or undefined when calling documentsV1ReposDocumentsTagsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/documents/v1/repos/{repo_id}/documents/{document_id}/tags/{id}/`;
        urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"repo_id"}}`, encodeURIComponent(String(requestParameters['repoId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentTagFromJSON(jsonValue));
    }

    /**
     */
    async documentsV1ReposDocumentsTagsRetrieve(requestParameters: DocumentsV1ReposDocumentsTagsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentTag> {
        const response = await this.documentsV1ReposDocumentsTagsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async documentsV1ReposDocumentsUpdateRaw(requestParameters: DocumentsV1ReposDocumentsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Document>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling documentsV1ReposDocumentsUpdate().'
            );
        }

        if (requestParameters['repoId'] == null) {
            throw new runtime.RequiredError(
                'repoId',
                'Required parameter "repoId" was null or undefined when calling documentsV1ReposDocumentsUpdate().'
            );
        }

        if (requestParameters['document'] == null) {
            throw new runtime.RequiredError(
                'document',
                'Required parameter "document" was null or undefined when calling documentsV1ReposDocumentsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/documents/v1/repos/{repo_id}/documents/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"repo_id"}}`, encodeURIComponent(String(requestParameters['repoId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentToJSON(requestParameters['document']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentFromJSON(jsonValue));
    }

    /**
     */
    async documentsV1ReposDocumentsUpdate(requestParameters: DocumentsV1ReposDocumentsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Document> {
        const response = await this.documentsV1ReposDocumentsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async documentsV1ReposDocumentsVersionsCreateRaw(requestParameters: DocumentsV1ReposDocumentsVersionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentVersion>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling documentsV1ReposDocumentsVersionsCreate().'
            );
        }

        if (requestParameters['repoId'] == null) {
            throw new runtime.RequiredError(
                'repoId',
                'Required parameter "repoId" was null or undefined when calling documentsV1ReposDocumentsVersionsCreate().'
            );
        }

        if (requestParameters['documentVersion'] == null) {
            throw new runtime.RequiredError(
                'documentVersion',
                'Required parameter "documentVersion" was null or undefined when calling documentsV1ReposDocumentsVersionsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/documents/v1/repos/{repo_id}/documents/{document_id}/versions/`;
        urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
        urlPath = urlPath.replace(`{${"repo_id"}}`, encodeURIComponent(String(requestParameters['repoId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentVersionToJSON(requestParameters['documentVersion']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentVersionFromJSON(jsonValue));
    }

    /**
     */
    async documentsV1ReposDocumentsVersionsCreate(requestParameters: DocumentsV1ReposDocumentsVersionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentVersion> {
        const response = await this.documentsV1ReposDocumentsVersionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async documentsV1ReposDocumentsVersionsDestroyRaw(requestParameters: DocumentsV1ReposDocumentsVersionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling documentsV1ReposDocumentsVersionsDestroy().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling documentsV1ReposDocumentsVersionsDestroy().'
            );
        }

        if (requestParameters['repoId'] == null) {
            throw new runtime.RequiredError(
                'repoId',
                'Required parameter "repoId" was null or undefined when calling documentsV1ReposDocumentsVersionsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/documents/v1/repos/{repo_id}/documents/{document_id}/versions/{id}/`;
        urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"repo_id"}}`, encodeURIComponent(String(requestParameters['repoId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async documentsV1ReposDocumentsVersionsDestroy(requestParameters: DocumentsV1ReposDocumentsVersionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.documentsV1ReposDocumentsVersionsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async documentsV1ReposDocumentsVersionsListRaw(requestParameters: DocumentsV1ReposDocumentsVersionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedDocumentVersionList>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling documentsV1ReposDocumentsVersionsList().'
            );
        }

        if (requestParameters['repoId'] == null) {
            throw new runtime.RequiredError(
                'repoId',
                'Required parameter "repoId" was null or undefined when calling documentsV1ReposDocumentsVersionsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/documents/v1/repos/{repo_id}/documents/{document_id}/versions/`;
        urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
        urlPath = urlPath.replace(`{${"repo_id"}}`, encodeURIComponent(String(requestParameters['repoId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedDocumentVersionListFromJSON(jsonValue));
    }

    /**
     */
    async documentsV1ReposDocumentsVersionsList(requestParameters: DocumentsV1ReposDocumentsVersionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedDocumentVersionList> {
        const response = await this.documentsV1ReposDocumentsVersionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async documentsV1ReposDocumentsVersionsPartialUpdateRaw(requestParameters: DocumentsV1ReposDocumentsVersionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentVersion>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling documentsV1ReposDocumentsVersionsPartialUpdate().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling documentsV1ReposDocumentsVersionsPartialUpdate().'
            );
        }

        if (requestParameters['repoId'] == null) {
            throw new runtime.RequiredError(
                'repoId',
                'Required parameter "repoId" was null or undefined when calling documentsV1ReposDocumentsVersionsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/documents/v1/repos/{repo_id}/documents/{document_id}/versions/{id}/`;
        urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"repo_id"}}`, encodeURIComponent(String(requestParameters['repoId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedDocumentVersionToJSON(requestParameters['patchedDocumentVersion']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentVersionFromJSON(jsonValue));
    }

    /**
     */
    async documentsV1ReposDocumentsVersionsPartialUpdate(requestParameters: DocumentsV1ReposDocumentsVersionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentVersion> {
        const response = await this.documentsV1ReposDocumentsVersionsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async documentsV1ReposDocumentsVersionsRetrieveRaw(requestParameters: DocumentsV1ReposDocumentsVersionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentVersion>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling documentsV1ReposDocumentsVersionsRetrieve().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling documentsV1ReposDocumentsVersionsRetrieve().'
            );
        }

        if (requestParameters['repoId'] == null) {
            throw new runtime.RequiredError(
                'repoId',
                'Required parameter "repoId" was null or undefined when calling documentsV1ReposDocumentsVersionsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/documents/v1/repos/{repo_id}/documents/{document_id}/versions/{id}/`;
        urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"repo_id"}}`, encodeURIComponent(String(requestParameters['repoId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentVersionFromJSON(jsonValue));
    }

    /**
     */
    async documentsV1ReposDocumentsVersionsRetrieve(requestParameters: DocumentsV1ReposDocumentsVersionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentVersion> {
        const response = await this.documentsV1ReposDocumentsVersionsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async documentsV1ReposDocumentsVersionsUpdateRaw(requestParameters: DocumentsV1ReposDocumentsVersionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentVersion>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling documentsV1ReposDocumentsVersionsUpdate().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling documentsV1ReposDocumentsVersionsUpdate().'
            );
        }

        if (requestParameters['repoId'] == null) {
            throw new runtime.RequiredError(
                'repoId',
                'Required parameter "repoId" was null or undefined when calling documentsV1ReposDocumentsVersionsUpdate().'
            );
        }

        if (requestParameters['documentVersion'] == null) {
            throw new runtime.RequiredError(
                'documentVersion',
                'Required parameter "documentVersion" was null or undefined when calling documentsV1ReposDocumentsVersionsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/documents/v1/repos/{repo_id}/documents/{document_id}/versions/{id}/`;
        urlPath = urlPath.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters['documentId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"repo_id"}}`, encodeURIComponent(String(requestParameters['repoId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentVersionToJSON(requestParameters['documentVersion']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentVersionFromJSON(jsonValue));
    }

    /**
     */
    async documentsV1ReposDocumentsVersionsUpdate(requestParameters: DocumentsV1ReposDocumentsVersionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentVersion> {
        const response = await this.documentsV1ReposDocumentsVersionsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async documentsV1ReposFoldersCreateRaw(requestParameters: DocumentsV1ReposFoldersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Folder>> {
        if (requestParameters['repoId'] == null) {
            throw new runtime.RequiredError(
                'repoId',
                'Required parameter "repoId" was null or undefined when calling documentsV1ReposFoldersCreate().'
            );
        }

        if (requestParameters['folder'] == null) {
            throw new runtime.RequiredError(
                'folder',
                'Required parameter "folder" was null or undefined when calling documentsV1ReposFoldersCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/documents/v1/repos/{repo_id}/folders/`;
        urlPath = urlPath.replace(`{${"repo_id"}}`, encodeURIComponent(String(requestParameters['repoId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FolderToJSON(requestParameters['folder']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderFromJSON(jsonValue));
    }

    /**
     */
    async documentsV1ReposFoldersCreate(requestParameters: DocumentsV1ReposFoldersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Folder> {
        const response = await this.documentsV1ReposFoldersCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async documentsV1ReposFoldersDestroyRaw(requestParameters: DocumentsV1ReposFoldersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling documentsV1ReposFoldersDestroy().'
            );
        }

        if (requestParameters['repoId'] == null) {
            throw new runtime.RequiredError(
                'repoId',
                'Required parameter "repoId" was null or undefined when calling documentsV1ReposFoldersDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/documents/v1/repos/{repo_id}/folders/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"repo_id"}}`, encodeURIComponent(String(requestParameters['repoId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async documentsV1ReposFoldersDestroy(requestParameters: DocumentsV1ReposFoldersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.documentsV1ReposFoldersDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async documentsV1ReposFoldersListRaw(requestParameters: DocumentsV1ReposFoldersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFolderList>> {
        if (requestParameters['repoId'] == null) {
            throw new runtime.RequiredError(
                'repoId',
                'Required parameter "repoId" was null or undefined when calling documentsV1ReposFoldersList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['parentFolderId'] != null) {
            queryParameters['parent_folder_id'] = requestParameters['parentFolderId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/documents/v1/repos/{repo_id}/folders/`;
        urlPath = urlPath.replace(`{${"repo_id"}}`, encodeURIComponent(String(requestParameters['repoId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFolderListFromJSON(jsonValue));
    }

    /**
     */
    async documentsV1ReposFoldersList(requestParameters: DocumentsV1ReposFoldersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFolderList> {
        const response = await this.documentsV1ReposFoldersListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async documentsV1ReposFoldersPartialUpdateRaw(requestParameters: DocumentsV1ReposFoldersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Folder>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling documentsV1ReposFoldersPartialUpdate().'
            );
        }

        if (requestParameters['repoId'] == null) {
            throw new runtime.RequiredError(
                'repoId',
                'Required parameter "repoId" was null or undefined when calling documentsV1ReposFoldersPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/documents/v1/repos/{repo_id}/folders/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"repo_id"}}`, encodeURIComponent(String(requestParameters['repoId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedFolderToJSON(requestParameters['patchedFolder']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderFromJSON(jsonValue));
    }

    /**
     */
    async documentsV1ReposFoldersPartialUpdate(requestParameters: DocumentsV1ReposFoldersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Folder> {
        const response = await this.documentsV1ReposFoldersPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async documentsV1ReposFoldersRetrieveRaw(requestParameters: DocumentsV1ReposFoldersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Folder>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling documentsV1ReposFoldersRetrieve().'
            );
        }

        if (requestParameters['repoId'] == null) {
            throw new runtime.RequiredError(
                'repoId',
                'Required parameter "repoId" was null or undefined when calling documentsV1ReposFoldersRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/documents/v1/repos/{repo_id}/folders/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"repo_id"}}`, encodeURIComponent(String(requestParameters['repoId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderFromJSON(jsonValue));
    }

    /**
     */
    async documentsV1ReposFoldersRetrieve(requestParameters: DocumentsV1ReposFoldersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Folder> {
        const response = await this.documentsV1ReposFoldersRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async documentsV1ReposFoldersUpdateRaw(requestParameters: DocumentsV1ReposFoldersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Folder>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling documentsV1ReposFoldersUpdate().'
            );
        }

        if (requestParameters['repoId'] == null) {
            throw new runtime.RequiredError(
                'repoId',
                'Required parameter "repoId" was null or undefined when calling documentsV1ReposFoldersUpdate().'
            );
        }

        if (requestParameters['folder'] == null) {
            throw new runtime.RequiredError(
                'folder',
                'Required parameter "folder" was null or undefined when calling documentsV1ReposFoldersUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/documents/v1/repos/{repo_id}/folders/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"repo_id"}}`, encodeURIComponent(String(requestParameters['repoId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FolderToJSON(requestParameters['folder']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderFromJSON(jsonValue));
    }

    /**
     */
    async documentsV1ReposFoldersUpdate(requestParameters: DocumentsV1ReposFoldersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Folder> {
        const response = await this.documentsV1ReposFoldersUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async documentsV1ReposListRaw(requestParameters: DocumentsV1ReposListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedDocumentRepoList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/documents/v1/repos/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedDocumentRepoListFromJSON(jsonValue));
    }

    /**
     */
    async documentsV1ReposList(requestParameters: DocumentsV1ReposListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedDocumentRepoList> {
        const response = await this.documentsV1ReposListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async documentsV1ReposPartialUpdateRaw(requestParameters: DocumentsV1ReposPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentRepo>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling documentsV1ReposPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/documents/v1/repos/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedDocumentRepoToJSON(requestParameters['patchedDocumentRepo']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentRepoFromJSON(jsonValue));
    }

    /**
     */
    async documentsV1ReposPartialUpdate(requestParameters: DocumentsV1ReposPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentRepo> {
        const response = await this.documentsV1ReposPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async documentsV1ReposRetrieveRaw(requestParameters: DocumentsV1ReposRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentRepo>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling documentsV1ReposRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/documents/v1/repos/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentRepoFromJSON(jsonValue));
    }

    /**
     */
    async documentsV1ReposRetrieve(requestParameters: DocumentsV1ReposRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentRepo> {
        const response = await this.documentsV1ReposRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async documentsV1ReposUpdateRaw(requestParameters: DocumentsV1ReposUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentRepo>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling documentsV1ReposUpdate().'
            );
        }

        if (requestParameters['documentRepo'] == null) {
            throw new runtime.RequiredError(
                'documentRepo',
                'Required parameter "documentRepo" was null or undefined when calling documentsV1ReposUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/documents/v1/repos/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentRepoToJSON(requestParameters['documentRepo']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentRepoFromJSON(jsonValue));
    }

    /**
     */
    async documentsV1ReposUpdate(requestParameters: DocumentsV1ReposUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentRepo> {
        const response = await this.documentsV1ReposUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async documentsV1TagsCreateRaw(requestParameters: DocumentsV1TagsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tag>> {
        if (requestParameters['tag'] == null) {
            throw new runtime.RequiredError(
                'tag',
                'Required parameter "tag" was null or undefined when calling documentsV1TagsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/documents/v1/tags/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TagToJSON(requestParameters['tag']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagFromJSON(jsonValue));
    }

    /**
     */
    async documentsV1TagsCreate(requestParameters: DocumentsV1TagsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tag> {
        const response = await this.documentsV1TagsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async documentsV1TagsDestroyRaw(requestParameters: DocumentsV1TagsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling documentsV1TagsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/documents/v1/tags/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async documentsV1TagsDestroy(requestParameters: DocumentsV1TagsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.documentsV1TagsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async documentsV1TagsListRaw(requestParameters: DocumentsV1TagsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedTagList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/documents/v1/tags/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedTagListFromJSON(jsonValue));
    }

    /**
     */
    async documentsV1TagsList(requestParameters: DocumentsV1TagsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedTagList> {
        const response = await this.documentsV1TagsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async documentsV1TagsPartialUpdateRaw(requestParameters: DocumentsV1TagsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tag>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling documentsV1TagsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/documents/v1/tags/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedTagToJSON(requestParameters['patchedTag']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagFromJSON(jsonValue));
    }

    /**
     */
    async documentsV1TagsPartialUpdate(requestParameters: DocumentsV1TagsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tag> {
        const response = await this.documentsV1TagsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async documentsV1TagsRetrieveRaw(requestParameters: DocumentsV1TagsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tag>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling documentsV1TagsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/documents/v1/tags/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagFromJSON(jsonValue));
    }

    /**
     */
    async documentsV1TagsRetrieve(requestParameters: DocumentsV1TagsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tag> {
        const response = await this.documentsV1TagsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async documentsV1TagsUpdateRaw(requestParameters: DocumentsV1TagsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tag>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling documentsV1TagsUpdate().'
            );
        }

        if (requestParameters['tag'] == null) {
            throw new runtime.RequiredError(
                'tag',
                'Required parameter "tag" was null or undefined when calling documentsV1TagsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/documents/v1/tags/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TagToJSON(requestParameters['tag']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagFromJSON(jsonValue));
    }

    /**
     */
    async documentsV1TagsUpdate(requestParameters: DocumentsV1TagsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tag> {
        const response = await this.documentsV1TagsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
