/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.102
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Discount,
  DiscountTicketType,
  PaginatedDiscountList,
  PaginatedDiscountTicketTypeList,
  PaginatedPurchaseList,
  PaginatedSectionList,
  PaginatedSectionSeatList,
  PaginatedTicketList,
  PaginatedTicketTypeList,
  PatchedDiscount,
  PatchedPurchase,
  PatchedSection,
  PatchedSectionSeat,
  PatchedTicket,
  PatchedTicketType,
  Purchase,
  Section,
  SectionSeat,
  Ticket,
  TicketType,
} from '../models/index';
import {
    DiscountFromJSON,
    DiscountToJSON,
    DiscountTicketTypeFromJSON,
    DiscountTicketTypeToJSON,
    PaginatedDiscountListFromJSON,
    PaginatedDiscountListToJSON,
    PaginatedDiscountTicketTypeListFromJSON,
    PaginatedDiscountTicketTypeListToJSON,
    PaginatedPurchaseListFromJSON,
    PaginatedPurchaseListToJSON,
    PaginatedSectionListFromJSON,
    PaginatedSectionListToJSON,
    PaginatedSectionSeatListFromJSON,
    PaginatedSectionSeatListToJSON,
    PaginatedTicketListFromJSON,
    PaginatedTicketListToJSON,
    PaginatedTicketTypeListFromJSON,
    PaginatedTicketTypeListToJSON,
    PatchedDiscountFromJSON,
    PatchedDiscountToJSON,
    PatchedPurchaseFromJSON,
    PatchedPurchaseToJSON,
    PatchedSectionFromJSON,
    PatchedSectionToJSON,
    PatchedSectionSeatFromJSON,
    PatchedSectionSeatToJSON,
    PatchedTicketFromJSON,
    PatchedTicketToJSON,
    PatchedTicketTypeFromJSON,
    PatchedTicketTypeToJSON,
    PurchaseFromJSON,
    PurchaseToJSON,
    SectionFromJSON,
    SectionToJSON,
    SectionSeatFromJSON,
    SectionSeatToJSON,
    TicketFromJSON,
    TicketToJSON,
    TicketTypeFromJSON,
    TicketTypeToJSON,
} from '../models/index';

export interface TicketingV1DiscountsCreateRequest {
    tenantRef: string;
    discount: Omit<Discount, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
    productionVenueId?: number;
}

export interface TicketingV1DiscountsDestroyRequest {
    id: number;
    tenantRef: string;
    productionVenueId?: number;
}

export interface TicketingV1DiscountsListRequest {
    tenantRef: string;
    page?: number;
    pageSize?: number;
    productionVenueId?: number;
}

export interface TicketingV1DiscountsPartialUpdateRequest {
    id: number;
    tenantRef: string;
    productionVenueId?: number;
    patchedDiscount?: Omit<PatchedDiscount, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface TicketingV1DiscountsRetrieveRequest {
    id: number;
    tenantRef: string;
    productionVenueId?: number;
}

export interface TicketingV1DiscountsTicketTypesCreateRequest {
    discountId: number;
    tenantRef: string;
    discountTicketType?: Omit<DiscountTicketType, 'id'|'discount'|'ticket_type'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface TicketingV1DiscountsTicketTypesDestroyRequest {
    discountId: number;
    id: number;
    tenantRef: string;
}

export interface TicketingV1DiscountsTicketTypesListRequest {
    discountId: number;
    tenantRef: string;
    page?: number;
    pageSize?: number;
}

export interface TicketingV1DiscountsTicketTypesRetrieveRequest {
    discountId: number;
    id: number;
    tenantRef: string;
}

export interface TicketingV1DiscountsUpdateRequest {
    id: number;
    tenantRef: string;
    discount: Omit<Discount, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
    productionVenueId?: number;
}

export interface TicketingV1ProdVenueSectionsCreateRequest {
    productionVenueId: number;
    tenantRef: string;
    section: Omit<Section, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'|'production_venue'>;
}

export interface TicketingV1ProdVenueSectionsDestroyRequest {
    id: number;
    productionVenueId: number;
    tenantRef: string;
}

export interface TicketingV1ProdVenueSectionsListRequest {
    productionVenueId: number;
    tenantRef: string;
    page?: number;
    pageSize?: number;
}

export interface TicketingV1ProdVenueSectionsPartialUpdateRequest {
    id: number;
    productionVenueId: number;
    tenantRef: string;
    patchedSection?: Omit<PatchedSection, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'|'production_venue'>;
}

export interface TicketingV1ProdVenueSectionsRetrieveRequest {
    id: number;
    productionVenueId: number;
    tenantRef: string;
}

export interface TicketingV1ProdVenueSectionsSeatsCreateRequest {
    productionVenueId: number;
    sectionId: number;
    tenantRef: string;
    sectionSeat: Omit<SectionSeat, 'id'|'section'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface TicketingV1ProdVenueSectionsSeatsDestroyRequest {
    id: number;
    productionVenueId: number;
    sectionId: number;
    tenantRef: string;
}

export interface TicketingV1ProdVenueSectionsSeatsListRequest {
    productionVenueId: number;
    sectionId: number;
    tenantRef: string;
    page?: number;
    pageSize?: number;
}

export interface TicketingV1ProdVenueSectionsSeatsPartialUpdateRequest {
    id: number;
    productionVenueId: number;
    sectionId: number;
    tenantRef: string;
    patchedSectionSeat?: Omit<PatchedSectionSeat, 'id'|'section'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface TicketingV1ProdVenueSectionsSeatsRetrieveRequest {
    id: number;
    productionVenueId: number;
    sectionId: number;
    tenantRef: string;
}

export interface TicketingV1ProdVenueSectionsSeatsUpdateRequest {
    id: number;
    productionVenueId: number;
    sectionId: number;
    tenantRef: string;
    sectionSeat: Omit<SectionSeat, 'id'|'section'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface TicketingV1ProdVenueSectionsUpdateRequest {
    id: number;
    productionVenueId: number;
    tenantRef: string;
    section: Omit<Section, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'|'production_venue'>;
}

export interface TicketingV1ProdVenueTicketTypesCreateRequest {
    productionVenueId: number;
    tenantRef: string;
    ticketType: Omit<TicketType, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'|'production_venue'>;
}

export interface TicketingV1ProdVenueTicketTypesDestroyRequest {
    id: number;
    productionVenueId: number;
    tenantRef: string;
}

export interface TicketingV1ProdVenueTicketTypesListRequest {
    productionVenueId: number;
    tenantRef: string;
    page?: number;
    pageSize?: number;
}

export interface TicketingV1ProdVenueTicketTypesPartialUpdateRequest {
    id: number;
    productionVenueId: number;
    tenantRef: string;
    patchedTicketType?: Omit<PatchedTicketType, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'|'production_venue'>;
}

export interface TicketingV1ProdVenueTicketTypesRetrieveRequest {
    id: number;
    productionVenueId: number;
    tenantRef: string;
}

export interface TicketingV1ProdVenueTicketTypesUpdateRequest {
    id: number;
    productionVenueId: number;
    tenantRef: string;
    ticketType: Omit<TicketType, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'|'production_venue'>;
}

export interface TicketingV1PurchasesCreateRequest {
    tenantRef: string;
    purchase: Omit<Purchase, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface TicketingV1PurchasesDestroyRequest {
    id: number;
    tenantRef: string;
}

export interface TicketingV1PurchasesListRequest {
    tenantRef: string;
    page?: number;
    pageSize?: number;
}

export interface TicketingV1PurchasesPartialUpdateRequest {
    id: number;
    tenantRef: string;
    patchedPurchase?: Omit<PatchedPurchase, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface TicketingV1PurchasesRetrieveRequest {
    id: number;
    tenantRef: string;
}

export interface TicketingV1PurchasesTicketsCreateRequest {
    purchaseId: number;
    tenantRef: string;
    ticket: Omit<Ticket, 'id'|'section_seat'|'ticket_type'|'purchase'|'created_at'|'updated_at'|'archive_at'|'ticket_uuid'|'tenant'|'created_by'|'updated_by'>;
}

export interface TicketingV1PurchasesTicketsDestroyRequest {
    id: number;
    purchaseId: number;
    tenantRef: string;
}

export interface TicketingV1PurchasesTicketsListRequest {
    purchaseId: number;
    tenantRef: string;
    page?: number;
    pageSize?: number;
}

export interface TicketingV1PurchasesTicketsPartialUpdateRequest {
    id: number;
    purchaseId: number;
    tenantRef: string;
    patchedTicket?: Omit<PatchedTicket, 'id'|'section_seat'|'ticket_type'|'purchase'|'created_at'|'updated_at'|'archive_at'|'ticket_uuid'|'tenant'|'created_by'|'updated_by'>;
}

export interface TicketingV1PurchasesTicketsRetrieveRequest {
    id: number;
    purchaseId: number;
    tenantRef: string;
}

export interface TicketingV1PurchasesTicketsUpdateRequest {
    id: number;
    purchaseId: number;
    tenantRef: string;
    ticket: Omit<Ticket, 'id'|'section_seat'|'ticket_type'|'purchase'|'created_at'|'updated_at'|'archive_at'|'ticket_uuid'|'tenant'|'created_by'|'updated_by'>;
}

export interface TicketingV1PurchasesUpdateRequest {
    id: number;
    tenantRef: string;
    purchase: Omit<Purchase, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

/**
 * 
 */
export class TicketingApi extends runtime.BaseAPI {

    /**
     * Create a new discount.
     * Create a Discount
     */
    async ticketingV1DiscountsCreateRaw(requestParameters: TicketingV1DiscountsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Discount>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1DiscountsCreate().'
            );
        }

        if (requestParameters['discount'] == null) {
            throw new runtime.RequiredError(
                'discount',
                'Required parameter "discount" was null or undefined when calling ticketingV1DiscountsCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['productionVenueId'] != null) {
            queryParameters['production_venue_id'] = requestParameters['productionVenueId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/discounts/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DiscountToJSON(requestParameters['discount']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DiscountFromJSON(jsonValue));
    }

    /**
     * Create a new discount.
     * Create a Discount
     */
    async ticketingV1DiscountsCreate(requestParameters: TicketingV1DiscountsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Discount> {
        const response = await this.ticketingV1DiscountsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a specific discount.
     * Delete a Discount
     */
    async ticketingV1DiscountsDestroyRaw(requestParameters: TicketingV1DiscountsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ticketingV1DiscountsDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1DiscountsDestroy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['productionVenueId'] != null) {
            queryParameters['production_venue_id'] = requestParameters['productionVenueId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/discounts/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a specific discount.
     * Delete a Discount
     */
    async ticketingV1DiscountsDestroy(requestParameters: TicketingV1DiscountsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ticketingV1DiscountsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve all discounts. Optionally filter by production venue.
     * List Discounts
     */
    async ticketingV1DiscountsListRaw(requestParameters: TicketingV1DiscountsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedDiscountList>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1DiscountsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['productionVenueId'] != null) {
            queryParameters['production_venue_id'] = requestParameters['productionVenueId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/discounts/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedDiscountListFromJSON(jsonValue));
    }

    /**
     * Retrieve all discounts. Optionally filter by production venue.
     * List Discounts
     */
    async ticketingV1DiscountsList(requestParameters: TicketingV1DiscountsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedDiscountList> {
        const response = await this.ticketingV1DiscountsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Partially update an existing discount.
     * Partially Update a Discount
     */
    async ticketingV1DiscountsPartialUpdateRaw(requestParameters: TicketingV1DiscountsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Discount>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ticketingV1DiscountsPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1DiscountsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['productionVenueId'] != null) {
            queryParameters['production_venue_id'] = requestParameters['productionVenueId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/discounts/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedDiscountToJSON(requestParameters['patchedDiscount']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DiscountFromJSON(jsonValue));
    }

    /**
     * Partially update an existing discount.
     * Partially Update a Discount
     */
    async ticketingV1DiscountsPartialUpdate(requestParameters: TicketingV1DiscountsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Discount> {
        const response = await this.ticketingV1DiscountsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a specific discount.
     * Retrieve a Discount
     */
    async ticketingV1DiscountsRetrieveRaw(requestParameters: TicketingV1DiscountsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Discount>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ticketingV1DiscountsRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1DiscountsRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['productionVenueId'] != null) {
            queryParameters['production_venue_id'] = requestParameters['productionVenueId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/discounts/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DiscountFromJSON(jsonValue));
    }

    /**
     * Retrieve a specific discount.
     * Retrieve a Discount
     */
    async ticketingV1DiscountsRetrieve(requestParameters: TicketingV1DiscountsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Discount> {
        const response = await this.ticketingV1DiscountsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new ticket type assigned to a discount.
     * Create a Ticket Type assigned to a Discount
     */
    async ticketingV1DiscountsTicketTypesCreateRaw(requestParameters: TicketingV1DiscountsTicketTypesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DiscountTicketType>> {
        if (requestParameters['discountId'] == null) {
            throw new runtime.RequiredError(
                'discountId',
                'Required parameter "discountId" was null or undefined when calling ticketingV1DiscountsTicketTypesCreate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1DiscountsTicketTypesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/discounts/{discount_id}/ticket-types/`;
        urlPath = urlPath.replace(`{${"discount_id"}}`, encodeURIComponent(String(requestParameters['discountId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DiscountTicketTypeToJSON(requestParameters['discountTicketType']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DiscountTicketTypeFromJSON(jsonValue));
    }

    /**
     * Create a new ticket type assigned to a discount.
     * Create a Ticket Type assigned to a Discount
     */
    async ticketingV1DiscountsTicketTypesCreate(requestParameters: TicketingV1DiscountsTicketTypesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DiscountTicketType> {
        const response = await this.ticketingV1DiscountsTicketTypesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a specific ticket type assigned to a discount.
     * Delete a Ticket Type assigned to a Discount
     */
    async ticketingV1DiscountsTicketTypesDestroyRaw(requestParameters: TicketingV1DiscountsTicketTypesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['discountId'] == null) {
            throw new runtime.RequiredError(
                'discountId',
                'Required parameter "discountId" was null or undefined when calling ticketingV1DiscountsTicketTypesDestroy().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ticketingV1DiscountsTicketTypesDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1DiscountsTicketTypesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/discounts/{discount_id}/ticket-types/{id}/`;
        urlPath = urlPath.replace(`{${"discount_id"}}`, encodeURIComponent(String(requestParameters['discountId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a specific ticket type assigned to a discount.
     * Delete a Ticket Type assigned to a Discount
     */
    async ticketingV1DiscountsTicketTypesDestroy(requestParameters: TicketingV1DiscountsTicketTypesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ticketingV1DiscountsTicketTypesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve all ticket types assigned to a discount.
     * List Ticket Types assigned to a Discount
     */
    async ticketingV1DiscountsTicketTypesListRaw(requestParameters: TicketingV1DiscountsTicketTypesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedDiscountTicketTypeList>> {
        if (requestParameters['discountId'] == null) {
            throw new runtime.RequiredError(
                'discountId',
                'Required parameter "discountId" was null or undefined when calling ticketingV1DiscountsTicketTypesList().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1DiscountsTicketTypesList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/discounts/{discount_id}/ticket-types/`;
        urlPath = urlPath.replace(`{${"discount_id"}}`, encodeURIComponent(String(requestParameters['discountId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedDiscountTicketTypeListFromJSON(jsonValue));
    }

    /**
     * Retrieve all ticket types assigned to a discount.
     * List Ticket Types assigned to a Discount
     */
    async ticketingV1DiscountsTicketTypesList(requestParameters: TicketingV1DiscountsTicketTypesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedDiscountTicketTypeList> {
        const response = await this.ticketingV1DiscountsTicketTypesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a specific ticket type assigned to a discount.
     * Retrieve a Ticket Type assigned to a Discount
     */
    async ticketingV1DiscountsTicketTypesRetrieveRaw(requestParameters: TicketingV1DiscountsTicketTypesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DiscountTicketType>> {
        if (requestParameters['discountId'] == null) {
            throw new runtime.RequiredError(
                'discountId',
                'Required parameter "discountId" was null or undefined when calling ticketingV1DiscountsTicketTypesRetrieve().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ticketingV1DiscountsTicketTypesRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1DiscountsTicketTypesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/discounts/{discount_id}/ticket-types/{id}/`;
        urlPath = urlPath.replace(`{${"discount_id"}}`, encodeURIComponent(String(requestParameters['discountId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DiscountTicketTypeFromJSON(jsonValue));
    }

    /**
     * Retrieve a specific ticket type assigned to a discount.
     * Retrieve a Ticket Type assigned to a Discount
     */
    async ticketingV1DiscountsTicketTypesRetrieve(requestParameters: TicketingV1DiscountsTicketTypesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DiscountTicketType> {
        const response = await this.ticketingV1DiscountsTicketTypesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing discount.
     * Update a Discount
     */
    async ticketingV1DiscountsUpdateRaw(requestParameters: TicketingV1DiscountsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Discount>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ticketingV1DiscountsUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1DiscountsUpdate().'
            );
        }

        if (requestParameters['discount'] == null) {
            throw new runtime.RequiredError(
                'discount',
                'Required parameter "discount" was null or undefined when calling ticketingV1DiscountsUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['productionVenueId'] != null) {
            queryParameters['production_venue_id'] = requestParameters['productionVenueId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/discounts/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DiscountToJSON(requestParameters['discount']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DiscountFromJSON(jsonValue));
    }

    /**
     * Update an existing discount.
     * Update a Discount
     */
    async ticketingV1DiscountsUpdate(requestParameters: TicketingV1DiscountsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Discount> {
        const response = await this.ticketingV1DiscountsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new section for a production venue.
     * Create a Section
     */
    async ticketingV1ProdVenueSectionsCreateRaw(requestParameters: TicketingV1ProdVenueSectionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Section>> {
        if (requestParameters['productionVenueId'] == null) {
            throw new runtime.RequiredError(
                'productionVenueId',
                'Required parameter "productionVenueId" was null or undefined when calling ticketingV1ProdVenueSectionsCreate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1ProdVenueSectionsCreate().'
            );
        }

        if (requestParameters['section'] == null) {
            throw new runtime.RequiredError(
                'section',
                'Required parameter "section" was null or undefined when calling ticketingV1ProdVenueSectionsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/prod-venue/{production_venue_id}/sections/`;
        urlPath = urlPath.replace(`{${"production_venue_id"}}`, encodeURIComponent(String(requestParameters['productionVenueId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SectionToJSON(requestParameters['section']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SectionFromJSON(jsonValue));
    }

    /**
     * Create a new section for a production venue.
     * Create a Section
     */
    async ticketingV1ProdVenueSectionsCreate(requestParameters: TicketingV1ProdVenueSectionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Section> {
        const response = await this.ticketingV1ProdVenueSectionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a specific section for a production venue.
     * Delete a Section
     */
    async ticketingV1ProdVenueSectionsDestroyRaw(requestParameters: TicketingV1ProdVenueSectionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ticketingV1ProdVenueSectionsDestroy().'
            );
        }

        if (requestParameters['productionVenueId'] == null) {
            throw new runtime.RequiredError(
                'productionVenueId',
                'Required parameter "productionVenueId" was null or undefined when calling ticketingV1ProdVenueSectionsDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1ProdVenueSectionsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/prod-venue/{production_venue_id}/sections/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_venue_id"}}`, encodeURIComponent(String(requestParameters['productionVenueId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a specific section for a production venue.
     * Delete a Section
     */
    async ticketingV1ProdVenueSectionsDestroy(requestParameters: TicketingV1ProdVenueSectionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ticketingV1ProdVenueSectionsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve all sections for a production venue.
     * List Sections
     */
    async ticketingV1ProdVenueSectionsListRaw(requestParameters: TicketingV1ProdVenueSectionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedSectionList>> {
        if (requestParameters['productionVenueId'] == null) {
            throw new runtime.RequiredError(
                'productionVenueId',
                'Required parameter "productionVenueId" was null or undefined when calling ticketingV1ProdVenueSectionsList().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1ProdVenueSectionsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/prod-venue/{production_venue_id}/sections/`;
        urlPath = urlPath.replace(`{${"production_venue_id"}}`, encodeURIComponent(String(requestParameters['productionVenueId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedSectionListFromJSON(jsonValue));
    }

    /**
     * Retrieve all sections for a production venue.
     * List Sections
     */
    async ticketingV1ProdVenueSectionsList(requestParameters: TicketingV1ProdVenueSectionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedSectionList> {
        const response = await this.ticketingV1ProdVenueSectionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Partially update an existing section for a production venue.
     * Partially Update a Section
     */
    async ticketingV1ProdVenueSectionsPartialUpdateRaw(requestParameters: TicketingV1ProdVenueSectionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Section>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ticketingV1ProdVenueSectionsPartialUpdate().'
            );
        }

        if (requestParameters['productionVenueId'] == null) {
            throw new runtime.RequiredError(
                'productionVenueId',
                'Required parameter "productionVenueId" was null or undefined when calling ticketingV1ProdVenueSectionsPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1ProdVenueSectionsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/prod-venue/{production_venue_id}/sections/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_venue_id"}}`, encodeURIComponent(String(requestParameters['productionVenueId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedSectionToJSON(requestParameters['patchedSection']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SectionFromJSON(jsonValue));
    }

    /**
     * Partially update an existing section for a production venue.
     * Partially Update a Section
     */
    async ticketingV1ProdVenueSectionsPartialUpdate(requestParameters: TicketingV1ProdVenueSectionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Section> {
        const response = await this.ticketingV1ProdVenueSectionsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a specific section for a production venue.
     * Retrieve a Section
     */
    async ticketingV1ProdVenueSectionsRetrieveRaw(requestParameters: TicketingV1ProdVenueSectionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Section>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ticketingV1ProdVenueSectionsRetrieve().'
            );
        }

        if (requestParameters['productionVenueId'] == null) {
            throw new runtime.RequiredError(
                'productionVenueId',
                'Required parameter "productionVenueId" was null or undefined when calling ticketingV1ProdVenueSectionsRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1ProdVenueSectionsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/prod-venue/{production_venue_id}/sections/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_venue_id"}}`, encodeURIComponent(String(requestParameters['productionVenueId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SectionFromJSON(jsonValue));
    }

    /**
     * Retrieve a specific section for a production venue.
     * Retrieve a Section
     */
    async ticketingV1ProdVenueSectionsRetrieve(requestParameters: TicketingV1ProdVenueSectionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Section> {
        const response = await this.ticketingV1ProdVenueSectionsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new section seat for a section.
     * Create a Section Seat
     */
    async ticketingV1ProdVenueSectionsSeatsCreateRaw(requestParameters: TicketingV1ProdVenueSectionsSeatsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SectionSeat>> {
        if (requestParameters['productionVenueId'] == null) {
            throw new runtime.RequiredError(
                'productionVenueId',
                'Required parameter "productionVenueId" was null or undefined when calling ticketingV1ProdVenueSectionsSeatsCreate().'
            );
        }

        if (requestParameters['sectionId'] == null) {
            throw new runtime.RequiredError(
                'sectionId',
                'Required parameter "sectionId" was null or undefined when calling ticketingV1ProdVenueSectionsSeatsCreate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1ProdVenueSectionsSeatsCreate().'
            );
        }

        if (requestParameters['sectionSeat'] == null) {
            throw new runtime.RequiredError(
                'sectionSeat',
                'Required parameter "sectionSeat" was null or undefined when calling ticketingV1ProdVenueSectionsSeatsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/prod-venue/{production_venue_id}/sections/{section_id}/seats/`;
        urlPath = urlPath.replace(`{${"production_venue_id"}}`, encodeURIComponent(String(requestParameters['productionVenueId'])));
        urlPath = urlPath.replace(`{${"section_id"}}`, encodeURIComponent(String(requestParameters['sectionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SectionSeatToJSON(requestParameters['sectionSeat']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SectionSeatFromJSON(jsonValue));
    }

    /**
     * Create a new section seat for a section.
     * Create a Section Seat
     */
    async ticketingV1ProdVenueSectionsSeatsCreate(requestParameters: TicketingV1ProdVenueSectionsSeatsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SectionSeat> {
        const response = await this.ticketingV1ProdVenueSectionsSeatsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a specific section seat for a section.
     * Delete a Section Seat
     */
    async ticketingV1ProdVenueSectionsSeatsDestroyRaw(requestParameters: TicketingV1ProdVenueSectionsSeatsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ticketingV1ProdVenueSectionsSeatsDestroy().'
            );
        }

        if (requestParameters['productionVenueId'] == null) {
            throw new runtime.RequiredError(
                'productionVenueId',
                'Required parameter "productionVenueId" was null or undefined when calling ticketingV1ProdVenueSectionsSeatsDestroy().'
            );
        }

        if (requestParameters['sectionId'] == null) {
            throw new runtime.RequiredError(
                'sectionId',
                'Required parameter "sectionId" was null or undefined when calling ticketingV1ProdVenueSectionsSeatsDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1ProdVenueSectionsSeatsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/prod-venue/{production_venue_id}/sections/{section_id}/seats/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_venue_id"}}`, encodeURIComponent(String(requestParameters['productionVenueId'])));
        urlPath = urlPath.replace(`{${"section_id"}}`, encodeURIComponent(String(requestParameters['sectionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a specific section seat for a section.
     * Delete a Section Seat
     */
    async ticketingV1ProdVenueSectionsSeatsDestroy(requestParameters: TicketingV1ProdVenueSectionsSeatsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ticketingV1ProdVenueSectionsSeatsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve all section seats for a section.
     * List Section Seats
     */
    async ticketingV1ProdVenueSectionsSeatsListRaw(requestParameters: TicketingV1ProdVenueSectionsSeatsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedSectionSeatList>> {
        if (requestParameters['productionVenueId'] == null) {
            throw new runtime.RequiredError(
                'productionVenueId',
                'Required parameter "productionVenueId" was null or undefined when calling ticketingV1ProdVenueSectionsSeatsList().'
            );
        }

        if (requestParameters['sectionId'] == null) {
            throw new runtime.RequiredError(
                'sectionId',
                'Required parameter "sectionId" was null or undefined when calling ticketingV1ProdVenueSectionsSeatsList().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1ProdVenueSectionsSeatsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/prod-venue/{production_venue_id}/sections/{section_id}/seats/`;
        urlPath = urlPath.replace(`{${"production_venue_id"}}`, encodeURIComponent(String(requestParameters['productionVenueId'])));
        urlPath = urlPath.replace(`{${"section_id"}}`, encodeURIComponent(String(requestParameters['sectionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedSectionSeatListFromJSON(jsonValue));
    }

    /**
     * Retrieve all section seats for a section.
     * List Section Seats
     */
    async ticketingV1ProdVenueSectionsSeatsList(requestParameters: TicketingV1ProdVenueSectionsSeatsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedSectionSeatList> {
        const response = await this.ticketingV1ProdVenueSectionsSeatsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Partially update an existing section seat for a section.
     * Partially Update a Section Seat
     */
    async ticketingV1ProdVenueSectionsSeatsPartialUpdateRaw(requestParameters: TicketingV1ProdVenueSectionsSeatsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SectionSeat>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ticketingV1ProdVenueSectionsSeatsPartialUpdate().'
            );
        }

        if (requestParameters['productionVenueId'] == null) {
            throw new runtime.RequiredError(
                'productionVenueId',
                'Required parameter "productionVenueId" was null or undefined when calling ticketingV1ProdVenueSectionsSeatsPartialUpdate().'
            );
        }

        if (requestParameters['sectionId'] == null) {
            throw new runtime.RequiredError(
                'sectionId',
                'Required parameter "sectionId" was null or undefined when calling ticketingV1ProdVenueSectionsSeatsPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1ProdVenueSectionsSeatsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/prod-venue/{production_venue_id}/sections/{section_id}/seats/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_venue_id"}}`, encodeURIComponent(String(requestParameters['productionVenueId'])));
        urlPath = urlPath.replace(`{${"section_id"}}`, encodeURIComponent(String(requestParameters['sectionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedSectionSeatToJSON(requestParameters['patchedSectionSeat']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SectionSeatFromJSON(jsonValue));
    }

    /**
     * Partially update an existing section seat for a section.
     * Partially Update a Section Seat
     */
    async ticketingV1ProdVenueSectionsSeatsPartialUpdate(requestParameters: TicketingV1ProdVenueSectionsSeatsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SectionSeat> {
        const response = await this.ticketingV1ProdVenueSectionsSeatsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a specific section seat for a section.
     * Retrieve a Section Seat
     */
    async ticketingV1ProdVenueSectionsSeatsRetrieveRaw(requestParameters: TicketingV1ProdVenueSectionsSeatsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SectionSeat>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ticketingV1ProdVenueSectionsSeatsRetrieve().'
            );
        }

        if (requestParameters['productionVenueId'] == null) {
            throw new runtime.RequiredError(
                'productionVenueId',
                'Required parameter "productionVenueId" was null or undefined when calling ticketingV1ProdVenueSectionsSeatsRetrieve().'
            );
        }

        if (requestParameters['sectionId'] == null) {
            throw new runtime.RequiredError(
                'sectionId',
                'Required parameter "sectionId" was null or undefined when calling ticketingV1ProdVenueSectionsSeatsRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1ProdVenueSectionsSeatsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/prod-venue/{production_venue_id}/sections/{section_id}/seats/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_venue_id"}}`, encodeURIComponent(String(requestParameters['productionVenueId'])));
        urlPath = urlPath.replace(`{${"section_id"}}`, encodeURIComponent(String(requestParameters['sectionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SectionSeatFromJSON(jsonValue));
    }

    /**
     * Retrieve a specific section seat for a section.
     * Retrieve a Section Seat
     */
    async ticketingV1ProdVenueSectionsSeatsRetrieve(requestParameters: TicketingV1ProdVenueSectionsSeatsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SectionSeat> {
        const response = await this.ticketingV1ProdVenueSectionsSeatsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing section seat for a section.
     * Update a Section Seat
     */
    async ticketingV1ProdVenueSectionsSeatsUpdateRaw(requestParameters: TicketingV1ProdVenueSectionsSeatsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SectionSeat>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ticketingV1ProdVenueSectionsSeatsUpdate().'
            );
        }

        if (requestParameters['productionVenueId'] == null) {
            throw new runtime.RequiredError(
                'productionVenueId',
                'Required parameter "productionVenueId" was null or undefined when calling ticketingV1ProdVenueSectionsSeatsUpdate().'
            );
        }

        if (requestParameters['sectionId'] == null) {
            throw new runtime.RequiredError(
                'sectionId',
                'Required parameter "sectionId" was null or undefined when calling ticketingV1ProdVenueSectionsSeatsUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1ProdVenueSectionsSeatsUpdate().'
            );
        }

        if (requestParameters['sectionSeat'] == null) {
            throw new runtime.RequiredError(
                'sectionSeat',
                'Required parameter "sectionSeat" was null or undefined when calling ticketingV1ProdVenueSectionsSeatsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/prod-venue/{production_venue_id}/sections/{section_id}/seats/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_venue_id"}}`, encodeURIComponent(String(requestParameters['productionVenueId'])));
        urlPath = urlPath.replace(`{${"section_id"}}`, encodeURIComponent(String(requestParameters['sectionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SectionSeatToJSON(requestParameters['sectionSeat']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SectionSeatFromJSON(jsonValue));
    }

    /**
     * Update an existing section seat for a section.
     * Update a Section Seat
     */
    async ticketingV1ProdVenueSectionsSeatsUpdate(requestParameters: TicketingV1ProdVenueSectionsSeatsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SectionSeat> {
        const response = await this.ticketingV1ProdVenueSectionsSeatsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing section for a production venue.
     * Update a Section
     */
    async ticketingV1ProdVenueSectionsUpdateRaw(requestParameters: TicketingV1ProdVenueSectionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Section>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ticketingV1ProdVenueSectionsUpdate().'
            );
        }

        if (requestParameters['productionVenueId'] == null) {
            throw new runtime.RequiredError(
                'productionVenueId',
                'Required parameter "productionVenueId" was null or undefined when calling ticketingV1ProdVenueSectionsUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1ProdVenueSectionsUpdate().'
            );
        }

        if (requestParameters['section'] == null) {
            throw new runtime.RequiredError(
                'section',
                'Required parameter "section" was null or undefined when calling ticketingV1ProdVenueSectionsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/prod-venue/{production_venue_id}/sections/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_venue_id"}}`, encodeURIComponent(String(requestParameters['productionVenueId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SectionToJSON(requestParameters['section']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SectionFromJSON(jsonValue));
    }

    /**
     * Update an existing section for a production venue.
     * Update a Section
     */
    async ticketingV1ProdVenueSectionsUpdate(requestParameters: TicketingV1ProdVenueSectionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Section> {
        const response = await this.ticketingV1ProdVenueSectionsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new ticket type for a production venue.
     * Create a Ticket Type
     */
    async ticketingV1ProdVenueTicketTypesCreateRaw(requestParameters: TicketingV1ProdVenueTicketTypesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TicketType>> {
        if (requestParameters['productionVenueId'] == null) {
            throw new runtime.RequiredError(
                'productionVenueId',
                'Required parameter "productionVenueId" was null or undefined when calling ticketingV1ProdVenueTicketTypesCreate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1ProdVenueTicketTypesCreate().'
            );
        }

        if (requestParameters['ticketType'] == null) {
            throw new runtime.RequiredError(
                'ticketType',
                'Required parameter "ticketType" was null or undefined when calling ticketingV1ProdVenueTicketTypesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/prod-venue/{production_venue_id}/ticket-types/`;
        urlPath = urlPath.replace(`{${"production_venue_id"}}`, encodeURIComponent(String(requestParameters['productionVenueId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TicketTypeToJSON(requestParameters['ticketType']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketTypeFromJSON(jsonValue));
    }

    /**
     * Create a new ticket type for a production venue.
     * Create a Ticket Type
     */
    async ticketingV1ProdVenueTicketTypesCreate(requestParameters: TicketingV1ProdVenueTicketTypesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TicketType> {
        const response = await this.ticketingV1ProdVenueTicketTypesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a specific ticket type for a production venue.
     * Delete a Ticket Type
     */
    async ticketingV1ProdVenueTicketTypesDestroyRaw(requestParameters: TicketingV1ProdVenueTicketTypesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ticketingV1ProdVenueTicketTypesDestroy().'
            );
        }

        if (requestParameters['productionVenueId'] == null) {
            throw new runtime.RequiredError(
                'productionVenueId',
                'Required parameter "productionVenueId" was null or undefined when calling ticketingV1ProdVenueTicketTypesDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1ProdVenueTicketTypesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/prod-venue/{production_venue_id}/ticket-types/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_venue_id"}}`, encodeURIComponent(String(requestParameters['productionVenueId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a specific ticket type for a production venue.
     * Delete a Ticket Type
     */
    async ticketingV1ProdVenueTicketTypesDestroy(requestParameters: TicketingV1ProdVenueTicketTypesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ticketingV1ProdVenueTicketTypesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve all ticket types for a production venue.
     * List Ticket Types
     */
    async ticketingV1ProdVenueTicketTypesListRaw(requestParameters: TicketingV1ProdVenueTicketTypesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedTicketTypeList>> {
        if (requestParameters['productionVenueId'] == null) {
            throw new runtime.RequiredError(
                'productionVenueId',
                'Required parameter "productionVenueId" was null or undefined when calling ticketingV1ProdVenueTicketTypesList().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1ProdVenueTicketTypesList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/prod-venue/{production_venue_id}/ticket-types/`;
        urlPath = urlPath.replace(`{${"production_venue_id"}}`, encodeURIComponent(String(requestParameters['productionVenueId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedTicketTypeListFromJSON(jsonValue));
    }

    /**
     * Retrieve all ticket types for a production venue.
     * List Ticket Types
     */
    async ticketingV1ProdVenueTicketTypesList(requestParameters: TicketingV1ProdVenueTicketTypesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedTicketTypeList> {
        const response = await this.ticketingV1ProdVenueTicketTypesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Partially update an existing ticket type for a production venue.
     * Partially Update a Ticket Type
     */
    async ticketingV1ProdVenueTicketTypesPartialUpdateRaw(requestParameters: TicketingV1ProdVenueTicketTypesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TicketType>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ticketingV1ProdVenueTicketTypesPartialUpdate().'
            );
        }

        if (requestParameters['productionVenueId'] == null) {
            throw new runtime.RequiredError(
                'productionVenueId',
                'Required parameter "productionVenueId" was null or undefined when calling ticketingV1ProdVenueTicketTypesPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1ProdVenueTicketTypesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/prod-venue/{production_venue_id}/ticket-types/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_venue_id"}}`, encodeURIComponent(String(requestParameters['productionVenueId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedTicketTypeToJSON(requestParameters['patchedTicketType']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketTypeFromJSON(jsonValue));
    }

    /**
     * Partially update an existing ticket type for a production venue.
     * Partially Update a Ticket Type
     */
    async ticketingV1ProdVenueTicketTypesPartialUpdate(requestParameters: TicketingV1ProdVenueTicketTypesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TicketType> {
        const response = await this.ticketingV1ProdVenueTicketTypesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a specific ticket type for a production venue.
     * Retrieve a Ticket Type
     */
    async ticketingV1ProdVenueTicketTypesRetrieveRaw(requestParameters: TicketingV1ProdVenueTicketTypesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TicketType>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ticketingV1ProdVenueTicketTypesRetrieve().'
            );
        }

        if (requestParameters['productionVenueId'] == null) {
            throw new runtime.RequiredError(
                'productionVenueId',
                'Required parameter "productionVenueId" was null or undefined when calling ticketingV1ProdVenueTicketTypesRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1ProdVenueTicketTypesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/prod-venue/{production_venue_id}/ticket-types/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_venue_id"}}`, encodeURIComponent(String(requestParameters['productionVenueId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketTypeFromJSON(jsonValue));
    }

    /**
     * Retrieve a specific ticket type for a production venue.
     * Retrieve a Ticket Type
     */
    async ticketingV1ProdVenueTicketTypesRetrieve(requestParameters: TicketingV1ProdVenueTicketTypesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TicketType> {
        const response = await this.ticketingV1ProdVenueTicketTypesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing ticket type for a production venue.
     * Update a Ticket Type
     */
    async ticketingV1ProdVenueTicketTypesUpdateRaw(requestParameters: TicketingV1ProdVenueTicketTypesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TicketType>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ticketingV1ProdVenueTicketTypesUpdate().'
            );
        }

        if (requestParameters['productionVenueId'] == null) {
            throw new runtime.RequiredError(
                'productionVenueId',
                'Required parameter "productionVenueId" was null or undefined when calling ticketingV1ProdVenueTicketTypesUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1ProdVenueTicketTypesUpdate().'
            );
        }

        if (requestParameters['ticketType'] == null) {
            throw new runtime.RequiredError(
                'ticketType',
                'Required parameter "ticketType" was null or undefined when calling ticketingV1ProdVenueTicketTypesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/prod-venue/{production_venue_id}/ticket-types/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_venue_id"}}`, encodeURIComponent(String(requestParameters['productionVenueId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TicketTypeToJSON(requestParameters['ticketType']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketTypeFromJSON(jsonValue));
    }

    /**
     * Update an existing ticket type for a production venue.
     * Update a Ticket Type
     */
    async ticketingV1ProdVenueTicketTypesUpdate(requestParameters: TicketingV1ProdVenueTicketTypesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TicketType> {
        const response = await this.ticketingV1ProdVenueTicketTypesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new purchase.
     * Create a Purchase
     */
    async ticketingV1PurchasesCreateRaw(requestParameters: TicketingV1PurchasesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Purchase>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1PurchasesCreate().'
            );
        }

        if (requestParameters['purchase'] == null) {
            throw new runtime.RequiredError(
                'purchase',
                'Required parameter "purchase" was null or undefined when calling ticketingV1PurchasesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/purchases/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PurchaseToJSON(requestParameters['purchase']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PurchaseFromJSON(jsonValue));
    }

    /**
     * Create a new purchase.
     * Create a Purchase
     */
    async ticketingV1PurchasesCreate(requestParameters: TicketingV1PurchasesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Purchase> {
        const response = await this.ticketingV1PurchasesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a specific purchase.
     * Delete a Purchase
     */
    async ticketingV1PurchasesDestroyRaw(requestParameters: TicketingV1PurchasesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ticketingV1PurchasesDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1PurchasesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/purchases/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a specific purchase.
     * Delete a Purchase
     */
    async ticketingV1PurchasesDestroy(requestParameters: TicketingV1PurchasesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ticketingV1PurchasesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve all purchases.
     * List Purchases
     */
    async ticketingV1PurchasesListRaw(requestParameters: TicketingV1PurchasesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPurchaseList>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1PurchasesList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/purchases/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPurchaseListFromJSON(jsonValue));
    }

    /**
     * Retrieve all purchases.
     * List Purchases
     */
    async ticketingV1PurchasesList(requestParameters: TicketingV1PurchasesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPurchaseList> {
        const response = await this.ticketingV1PurchasesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Partially update an existing purchase.
     * Partially Update a Purchase
     */
    async ticketingV1PurchasesPartialUpdateRaw(requestParameters: TicketingV1PurchasesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Purchase>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ticketingV1PurchasesPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1PurchasesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/purchases/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedPurchaseToJSON(requestParameters['patchedPurchase']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PurchaseFromJSON(jsonValue));
    }

    /**
     * Partially update an existing purchase.
     * Partially Update a Purchase
     */
    async ticketingV1PurchasesPartialUpdate(requestParameters: TicketingV1PurchasesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Purchase> {
        const response = await this.ticketingV1PurchasesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a specific purchase.
     * Retrieve a Purchase
     */
    async ticketingV1PurchasesRetrieveRaw(requestParameters: TicketingV1PurchasesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Purchase>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ticketingV1PurchasesRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1PurchasesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/purchases/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PurchaseFromJSON(jsonValue));
    }

    /**
     * Retrieve a specific purchase.
     * Retrieve a Purchase
     */
    async ticketingV1PurchasesRetrieve(requestParameters: TicketingV1PurchasesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Purchase> {
        const response = await this.ticketingV1PurchasesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new ticket for a purchase.
     * Create a Ticket
     */
    async ticketingV1PurchasesTicketsCreateRaw(requestParameters: TicketingV1PurchasesTicketsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Ticket>> {
        if (requestParameters['purchaseId'] == null) {
            throw new runtime.RequiredError(
                'purchaseId',
                'Required parameter "purchaseId" was null or undefined when calling ticketingV1PurchasesTicketsCreate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1PurchasesTicketsCreate().'
            );
        }

        if (requestParameters['ticket'] == null) {
            throw new runtime.RequiredError(
                'ticket',
                'Required parameter "ticket" was null or undefined when calling ticketingV1PurchasesTicketsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/purchases/{purchase_id}/tickets/`;
        urlPath = urlPath.replace(`{${"purchase_id"}}`, encodeURIComponent(String(requestParameters['purchaseId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TicketToJSON(requestParameters['ticket']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketFromJSON(jsonValue));
    }

    /**
     * Create a new ticket for a purchase.
     * Create a Ticket
     */
    async ticketingV1PurchasesTicketsCreate(requestParameters: TicketingV1PurchasesTicketsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Ticket> {
        const response = await this.ticketingV1PurchasesTicketsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a specific ticket for a purchase.
     * Delete a Ticket
     */
    async ticketingV1PurchasesTicketsDestroyRaw(requestParameters: TicketingV1PurchasesTicketsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ticketingV1PurchasesTicketsDestroy().'
            );
        }

        if (requestParameters['purchaseId'] == null) {
            throw new runtime.RequiredError(
                'purchaseId',
                'Required parameter "purchaseId" was null or undefined when calling ticketingV1PurchasesTicketsDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1PurchasesTicketsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/purchases/{purchase_id}/tickets/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"purchase_id"}}`, encodeURIComponent(String(requestParameters['purchaseId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a specific ticket for a purchase.
     * Delete a Ticket
     */
    async ticketingV1PurchasesTicketsDestroy(requestParameters: TicketingV1PurchasesTicketsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ticketingV1PurchasesTicketsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve all tickets for a purchase.
     * List Tickets
     */
    async ticketingV1PurchasesTicketsListRaw(requestParameters: TicketingV1PurchasesTicketsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedTicketList>> {
        if (requestParameters['purchaseId'] == null) {
            throw new runtime.RequiredError(
                'purchaseId',
                'Required parameter "purchaseId" was null or undefined when calling ticketingV1PurchasesTicketsList().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1PurchasesTicketsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/purchases/{purchase_id}/tickets/`;
        urlPath = urlPath.replace(`{${"purchase_id"}}`, encodeURIComponent(String(requestParameters['purchaseId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedTicketListFromJSON(jsonValue));
    }

    /**
     * Retrieve all tickets for a purchase.
     * List Tickets
     */
    async ticketingV1PurchasesTicketsList(requestParameters: TicketingV1PurchasesTicketsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedTicketList> {
        const response = await this.ticketingV1PurchasesTicketsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Partially update an existing ticket for a purchase.
     * Partially Update a Ticket
     */
    async ticketingV1PurchasesTicketsPartialUpdateRaw(requestParameters: TicketingV1PurchasesTicketsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Ticket>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ticketingV1PurchasesTicketsPartialUpdate().'
            );
        }

        if (requestParameters['purchaseId'] == null) {
            throw new runtime.RequiredError(
                'purchaseId',
                'Required parameter "purchaseId" was null or undefined when calling ticketingV1PurchasesTicketsPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1PurchasesTicketsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/purchases/{purchase_id}/tickets/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"purchase_id"}}`, encodeURIComponent(String(requestParameters['purchaseId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedTicketToJSON(requestParameters['patchedTicket']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketFromJSON(jsonValue));
    }

    /**
     * Partially update an existing ticket for a purchase.
     * Partially Update a Ticket
     */
    async ticketingV1PurchasesTicketsPartialUpdate(requestParameters: TicketingV1PurchasesTicketsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Ticket> {
        const response = await this.ticketingV1PurchasesTicketsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a specific ticket for a purchase.
     * Retrieve a Ticket
     */
    async ticketingV1PurchasesTicketsRetrieveRaw(requestParameters: TicketingV1PurchasesTicketsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Ticket>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ticketingV1PurchasesTicketsRetrieve().'
            );
        }

        if (requestParameters['purchaseId'] == null) {
            throw new runtime.RequiredError(
                'purchaseId',
                'Required parameter "purchaseId" was null or undefined when calling ticketingV1PurchasesTicketsRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1PurchasesTicketsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/purchases/{purchase_id}/tickets/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"purchase_id"}}`, encodeURIComponent(String(requestParameters['purchaseId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketFromJSON(jsonValue));
    }

    /**
     * Retrieve a specific ticket for a purchase.
     * Retrieve a Ticket
     */
    async ticketingV1PurchasesTicketsRetrieve(requestParameters: TicketingV1PurchasesTicketsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Ticket> {
        const response = await this.ticketingV1PurchasesTicketsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing ticket for a purchase.
     * Update a Ticket
     */
    async ticketingV1PurchasesTicketsUpdateRaw(requestParameters: TicketingV1PurchasesTicketsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Ticket>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ticketingV1PurchasesTicketsUpdate().'
            );
        }

        if (requestParameters['purchaseId'] == null) {
            throw new runtime.RequiredError(
                'purchaseId',
                'Required parameter "purchaseId" was null or undefined when calling ticketingV1PurchasesTicketsUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1PurchasesTicketsUpdate().'
            );
        }

        if (requestParameters['ticket'] == null) {
            throw new runtime.RequiredError(
                'ticket',
                'Required parameter "ticket" was null or undefined when calling ticketingV1PurchasesTicketsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/purchases/{purchase_id}/tickets/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"purchase_id"}}`, encodeURIComponent(String(requestParameters['purchaseId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TicketToJSON(requestParameters['ticket']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketFromJSON(jsonValue));
    }

    /**
     * Update an existing ticket for a purchase.
     * Update a Ticket
     */
    async ticketingV1PurchasesTicketsUpdate(requestParameters: TicketingV1PurchasesTicketsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Ticket> {
        const response = await this.ticketingV1PurchasesTicketsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing purchase.
     * Update a Purchase
     */
    async ticketingV1PurchasesUpdateRaw(requestParameters: TicketingV1PurchasesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Purchase>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ticketingV1PurchasesUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling ticketingV1PurchasesUpdate().'
            );
        }

        if (requestParameters['purchase'] == null) {
            throw new runtime.RequiredError(
                'purchase',
                'Required parameter "purchase" was null or undefined when calling ticketingV1PurchasesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/ticketing/v1/purchases/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PurchaseToJSON(requestParameters['purchase']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PurchaseFromJSON(jsonValue));
    }

    /**
     * Update an existing purchase.
     * Update a Purchase
     */
    async ticketingV1PurchasesUpdate(requestParameters: TicketingV1PurchasesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Purchase> {
        const response = await this.ticketingV1PurchasesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
