/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.82
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CostCategory,
  Expense,
  ExpenseAttachment,
  Income,
  IncomeCategory,
  PaginatedCostCategoryList,
  PaginatedExpenseAttachmentList,
  PaginatedExpenseList,
  PaginatedIncomeCategoryList,
  PaginatedIncomeList,
  PaginatedProductionCostCategoryList,
  PaginatedProductionIncomeCategoryList,
  PaginatedReimbursementList,
  PaginatedVendorList,
  PatchedCostCategory,
  PatchedExpense,
  PatchedExpenseAttachment,
  PatchedIncome,
  PatchedIncomeCategory,
  PatchedProductionCostCategory,
  PatchedProductionIncomeCategory,
  PatchedReimbursement,
  PatchedVendor,
  ProductionCostCategory,
  ProductionIncomeCategory,
  Reimbursement,
  Vendor,
} from '../models/index';
import {
    CostCategoryFromJSON,
    CostCategoryToJSON,
    ExpenseFromJSON,
    ExpenseToJSON,
    ExpenseAttachmentFromJSON,
    ExpenseAttachmentToJSON,
    IncomeFromJSON,
    IncomeToJSON,
    IncomeCategoryFromJSON,
    IncomeCategoryToJSON,
    PaginatedCostCategoryListFromJSON,
    PaginatedCostCategoryListToJSON,
    PaginatedExpenseAttachmentListFromJSON,
    PaginatedExpenseAttachmentListToJSON,
    PaginatedExpenseListFromJSON,
    PaginatedExpenseListToJSON,
    PaginatedIncomeCategoryListFromJSON,
    PaginatedIncomeCategoryListToJSON,
    PaginatedIncomeListFromJSON,
    PaginatedIncomeListToJSON,
    PaginatedProductionCostCategoryListFromJSON,
    PaginatedProductionCostCategoryListToJSON,
    PaginatedProductionIncomeCategoryListFromJSON,
    PaginatedProductionIncomeCategoryListToJSON,
    PaginatedReimbursementListFromJSON,
    PaginatedReimbursementListToJSON,
    PaginatedVendorListFromJSON,
    PaginatedVendorListToJSON,
    PatchedCostCategoryFromJSON,
    PatchedCostCategoryToJSON,
    PatchedExpenseFromJSON,
    PatchedExpenseToJSON,
    PatchedExpenseAttachmentFromJSON,
    PatchedExpenseAttachmentToJSON,
    PatchedIncomeFromJSON,
    PatchedIncomeToJSON,
    PatchedIncomeCategoryFromJSON,
    PatchedIncomeCategoryToJSON,
    PatchedProductionCostCategoryFromJSON,
    PatchedProductionCostCategoryToJSON,
    PatchedProductionIncomeCategoryFromJSON,
    PatchedProductionIncomeCategoryToJSON,
    PatchedReimbursementFromJSON,
    PatchedReimbursementToJSON,
    PatchedVendorFromJSON,
    PatchedVendorToJSON,
    ProductionCostCategoryFromJSON,
    ProductionCostCategoryToJSON,
    ProductionIncomeCategoryFromJSON,
    ProductionIncomeCategoryToJSON,
    ReimbursementFromJSON,
    ReimbursementToJSON,
    VendorFromJSON,
    VendorToJSON,
} from '../models/index';

export interface BudgetingV1CostCategoriesCreateRequest {
    tenantRef: string;
    costCategory: Omit<CostCategory, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface BudgetingV1CostCategoriesDestroyRequest {
    id: number;
    tenantRef: string;
}

export interface BudgetingV1CostCategoriesListRequest {
    tenantRef: string;
    page?: number;
    pageSize?: number;
}

export interface BudgetingV1CostCategoriesPartialUpdateRequest {
    id: number;
    tenantRef: string;
    patchedCostCategory?: Omit<PatchedCostCategory, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface BudgetingV1CostCategoriesRetrieveRequest {
    id: number;
    tenantRef: string;
}

export interface BudgetingV1CostCategoriesUpdateRequest {
    id: number;
    tenantRef: string;
    costCategory: Omit<CostCategory, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface BudgetingV1ExpensesAttachmentsCreateRequest {
    expenseId: number;
    tenantRef: string;
    expenseAttachment: Omit<ExpenseAttachment, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface BudgetingV1ExpensesAttachmentsDestroyRequest {
    expenseId: number;
    id: string;
    tenantRef: string;
}

export interface BudgetingV1ExpensesAttachmentsListRequest {
    expenseId: number;
    tenantRef: string;
    page?: number;
    pageSize?: number;
}

export interface BudgetingV1ExpensesAttachmentsPartialUpdateRequest {
    expenseId: number;
    id: string;
    tenantRef: string;
    patchedExpenseAttachment?: Omit<PatchedExpenseAttachment, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface BudgetingV1ExpensesAttachmentsRetrieveRequest {
    expenseId: number;
    id: string;
    tenantRef: string;
}

export interface BudgetingV1ExpensesAttachmentsUpdateRequest {
    expenseId: number;
    id: string;
    tenantRef: string;
    expenseAttachment: Omit<ExpenseAttachment, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface BudgetingV1ExpensesCreateRequest {
    tenantRef: string;
    expense: Omit<Expense, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface BudgetingV1ExpensesDestroyRequest {
    id: number;
    tenantRef: string;
}

export interface BudgetingV1ExpensesListRequest {
    tenantRef: string;
    page?: number;
    pageSize?: number;
}

export interface BudgetingV1ExpensesPartialUpdateRequest {
    id: number;
    tenantRef: string;
    patchedExpense?: Omit<PatchedExpense, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface BudgetingV1ExpensesRetrieveRequest {
    id: number;
    tenantRef: string;
}

export interface BudgetingV1ExpensesUpdateRequest {
    id: number;
    tenantRef: string;
    expense: Omit<Expense, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface BudgetingV1IncomeCategoriesCreateRequest {
    tenantRef: string;
    incomeCategory: Omit<IncomeCategory, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface BudgetingV1IncomeCategoriesDestroyRequest {
    id: number;
    tenantRef: string;
}

export interface BudgetingV1IncomeCategoriesListRequest {
    tenantRef: string;
    page?: number;
    pageSize?: number;
}

export interface BudgetingV1IncomeCategoriesPartialUpdateRequest {
    id: number;
    tenantRef: string;
    patchedIncomeCategory?: Omit<PatchedIncomeCategory, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface BudgetingV1IncomeCategoriesRetrieveRequest {
    id: number;
    tenantRef: string;
}

export interface BudgetingV1IncomeCategoriesUpdateRequest {
    id: number;
    tenantRef: string;
    incomeCategory: Omit<IncomeCategory, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface BudgetingV1IncomesCreateRequest {
    tenantRef: string;
    income: Omit<Income, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface BudgetingV1IncomesDestroyRequest {
    id: number;
    tenantRef: string;
}

export interface BudgetingV1IncomesListRequest {
    tenantRef: string;
    category?: string;
    page?: number;
    pageSize?: number;
}

export interface BudgetingV1IncomesPartialUpdateRequest {
    id: number;
    tenantRef: string;
    patchedIncome?: Omit<PatchedIncome, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface BudgetingV1IncomesRetrieveRequest {
    id: number;
    tenantRef: string;
}

export interface BudgetingV1IncomesUpdateRequest {
    id: number;
    tenantRef: string;
    income: Omit<Income, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface BudgetingV1ProductionsCostCategoriesCreateRequest {
    productionId: number;
    tenantRef: string;
    productionCostCategory: Omit<ProductionCostCategory, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface BudgetingV1ProductionsCostCategoriesDestroyRequest {
    id: number;
    productionId: number;
    tenantRef: string;
}

export interface BudgetingV1ProductionsCostCategoriesListRequest {
    productionId: number;
    tenantRef: string;
    page?: number;
    pageSize?: number;
}

export interface BudgetingV1ProductionsCostCategoriesPartialUpdateRequest {
    id: number;
    productionId: number;
    tenantRef: string;
    patchedProductionCostCategory?: Omit<PatchedProductionCostCategory, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface BudgetingV1ProductionsCostCategoriesRetrieveRequest {
    id: number;
    productionId: number;
    tenantRef: string;
}

export interface BudgetingV1ProductionsCostCategoriesUpdateRequest {
    id: number;
    productionId: number;
    tenantRef: string;
    productionCostCategory: Omit<ProductionCostCategory, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface BudgetingV1ProductionsIncomeCategoriesCreateRequest {
    productionId: number;
    tenantRef: string;
    productionIncomeCategory: Omit<ProductionIncomeCategory, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface BudgetingV1ProductionsIncomeCategoriesDestroyRequest {
    id: string;
    productionId: number;
    tenantRef: string;
}

export interface BudgetingV1ProductionsIncomeCategoriesListRequest {
    productionId: number;
    tenantRef: string;
    page?: number;
    pageSize?: number;
}

export interface BudgetingV1ProductionsIncomeCategoriesPartialUpdateRequest {
    id: string;
    productionId: number;
    tenantRef: string;
    patchedProductionIncomeCategory?: Omit<PatchedProductionIncomeCategory, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface BudgetingV1ProductionsIncomeCategoriesRetrieveRequest {
    id: string;
    productionId: number;
    tenantRef: string;
}

export interface BudgetingV1ProductionsIncomeCategoriesUpdateRequest {
    id: string;
    productionId: number;
    tenantRef: string;
    productionIncomeCategory: Omit<ProductionIncomeCategory, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface BudgetingV1ReimbursementsCreateRequest {
    tenantRef: string;
    reimbursement: Omit<Reimbursement, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface BudgetingV1ReimbursementsDestroyRequest {
    id: number;
    tenantRef: string;
}

export interface BudgetingV1ReimbursementsListRequest {
    tenantRef: string;
    page?: number;
    pageSize?: number;
}

export interface BudgetingV1ReimbursementsPartialUpdateRequest {
    id: number;
    tenantRef: string;
    patchedReimbursement?: Omit<PatchedReimbursement, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface BudgetingV1ReimbursementsRetrieveRequest {
    id: number;
    tenantRef: string;
}

export interface BudgetingV1ReimbursementsUpdateRequest {
    id: number;
    tenantRef: string;
    reimbursement: Omit<Reimbursement, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface BudgetingV1VendorsCreateRequest {
    tenantRef: string;
    vendor: Omit<Vendor, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface BudgetingV1VendorsDestroyRequest {
    id: number;
    tenantRef: string;
}

export interface BudgetingV1VendorsListRequest {
    tenantRef: string;
    page?: number;
    pageSize?: number;
}

export interface BudgetingV1VendorsPartialUpdateRequest {
    id: number;
    tenantRef: string;
    patchedVendor?: Omit<PatchedVendor, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface BudgetingV1VendorsRetrieveRequest {
    id: number;
    tenantRef: string;
}

export interface BudgetingV1VendorsUpdateRequest {
    id: number;
    tenantRef: string;
    vendor: Omit<Vendor, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

/**
 * 
 */
export class BudgetingApi extends runtime.BaseAPI {

    /**
     * Add a new cost category to the system.
     * Create a new cost category
     */
    async budgetingV1CostCategoriesCreateRaw(requestParameters: BudgetingV1CostCategoriesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CostCategory>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1CostCategoriesCreate().'
            );
        }

        if (requestParameters['costCategory'] == null) {
            throw new runtime.RequiredError(
                'costCategory',
                'Required parameter "costCategory" was null or undefined when calling budgetingV1CostCategoriesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/cost-categories/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CostCategoryToJSON(requestParameters['costCategory']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CostCategoryFromJSON(jsonValue));
    }

    /**
     * Add a new cost category to the system.
     * Create a new cost category
     */
    async budgetingV1CostCategoriesCreate(requestParameters: BudgetingV1CostCategoriesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CostCategory> {
        const response = await this.budgetingV1CostCategoriesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a cost category from the system by its ID.
     * Delete a cost category
     */
    async budgetingV1CostCategoriesDestroyRaw(requestParameters: BudgetingV1CostCategoriesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling budgetingV1CostCategoriesDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1CostCategoriesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/cost-categories/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a cost category from the system by its ID.
     * Delete a cost category
     */
    async budgetingV1CostCategoriesDestroy(requestParameters: BudgetingV1CostCategoriesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.budgetingV1CostCategoriesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a list of all cost categories in the system.
     * List all cost categories
     */
    async budgetingV1CostCategoriesListRaw(requestParameters: BudgetingV1CostCategoriesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedCostCategoryList>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1CostCategoriesList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/cost-categories/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedCostCategoryListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all cost categories in the system.
     * List all cost categories
     */
    async budgetingV1CostCategoriesList(requestParameters: BudgetingV1CostCategoriesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedCostCategoryList> {
        const response = await this.budgetingV1CostCategoriesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update specific fields of an existing cost category without affecting others.
     * Partially update a cost category
     */
    async budgetingV1CostCategoriesPartialUpdateRaw(requestParameters: BudgetingV1CostCategoriesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CostCategory>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling budgetingV1CostCategoriesPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1CostCategoriesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/cost-categories/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedCostCategoryToJSON(requestParameters['patchedCostCategory']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CostCategoryFromJSON(jsonValue));
    }

    /**
     * Update specific fields of an existing cost category without affecting others.
     * Partially update a cost category
     */
    async budgetingV1CostCategoriesPartialUpdate(requestParameters: BudgetingV1CostCategoriesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CostCategory> {
        const response = await this.budgetingV1CostCategoriesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed information about a specific cost category by its ID.
     * Retrieve a specific cost category
     */
    async budgetingV1CostCategoriesRetrieveRaw(requestParameters: BudgetingV1CostCategoriesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CostCategory>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling budgetingV1CostCategoriesRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1CostCategoriesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/cost-categories/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CostCategoryFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a specific cost category by its ID.
     * Retrieve a specific cost category
     */
    async budgetingV1CostCategoriesRetrieve(requestParameters: BudgetingV1CostCategoriesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CostCategory> {
        const response = await this.budgetingV1CostCategoriesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify the details of an existing cost category by its ID.
     * Update an existing cost category
     */
    async budgetingV1CostCategoriesUpdateRaw(requestParameters: BudgetingV1CostCategoriesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CostCategory>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling budgetingV1CostCategoriesUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1CostCategoriesUpdate().'
            );
        }

        if (requestParameters['costCategory'] == null) {
            throw new runtime.RequiredError(
                'costCategory',
                'Required parameter "costCategory" was null or undefined when calling budgetingV1CostCategoriesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/cost-categories/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CostCategoryToJSON(requestParameters['costCategory']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CostCategoryFromJSON(jsonValue));
    }

    /**
     * Modify the details of an existing cost category by its ID.
     * Update an existing cost category
     */
    async budgetingV1CostCategoriesUpdate(requestParameters: BudgetingV1CostCategoriesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CostCategory> {
        const response = await this.budgetingV1CostCategoriesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a new attachment to a specific expense.
     * Create a new attachment for an expense
     */
    async budgetingV1ExpensesAttachmentsCreateRaw(requestParameters: BudgetingV1ExpensesAttachmentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExpenseAttachment>> {
        if (requestParameters['expenseId'] == null) {
            throw new runtime.RequiredError(
                'expenseId',
                'Required parameter "expenseId" was null or undefined when calling budgetingV1ExpensesAttachmentsCreate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1ExpensesAttachmentsCreate().'
            );
        }

        if (requestParameters['expenseAttachment'] == null) {
            throw new runtime.RequiredError(
                'expenseAttachment',
                'Required parameter "expenseAttachment" was null or undefined when calling budgetingV1ExpensesAttachmentsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/expenses/{expense_id}/attachments/`;
        urlPath = urlPath.replace(`{${"expense_id"}}`, encodeURIComponent(String(requestParameters['expenseId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExpenseAttachmentToJSON(requestParameters['expenseAttachment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExpenseAttachmentFromJSON(jsonValue));
    }

    /**
     * Add a new attachment to a specific expense.
     * Create a new attachment for an expense
     */
    async budgetingV1ExpensesAttachmentsCreate(requestParameters: BudgetingV1ExpensesAttachmentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExpenseAttachment> {
        const response = await this.budgetingV1ExpensesAttachmentsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove an attachment from the system by its ID.
     * Delete an attachment
     */
    async budgetingV1ExpensesAttachmentsDestroyRaw(requestParameters: BudgetingV1ExpensesAttachmentsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['expenseId'] == null) {
            throw new runtime.RequiredError(
                'expenseId',
                'Required parameter "expenseId" was null or undefined when calling budgetingV1ExpensesAttachmentsDestroy().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling budgetingV1ExpensesAttachmentsDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1ExpensesAttachmentsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/expenses/{expense_id}/attachments/{id}/`;
        urlPath = urlPath.replace(`{${"expense_id"}}`, encodeURIComponent(String(requestParameters['expenseId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove an attachment from the system by its ID.
     * Delete an attachment
     */
    async budgetingV1ExpensesAttachmentsDestroy(requestParameters: BudgetingV1ExpensesAttachmentsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.budgetingV1ExpensesAttachmentsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a list of all attachments associated with a specific expense.
     * List all attachments for an expense
     */
    async budgetingV1ExpensesAttachmentsListRaw(requestParameters: BudgetingV1ExpensesAttachmentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedExpenseAttachmentList>> {
        if (requestParameters['expenseId'] == null) {
            throw new runtime.RequiredError(
                'expenseId',
                'Required parameter "expenseId" was null or undefined when calling budgetingV1ExpensesAttachmentsList().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1ExpensesAttachmentsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/expenses/{expense_id}/attachments/`;
        urlPath = urlPath.replace(`{${"expense_id"}}`, encodeURIComponent(String(requestParameters['expenseId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedExpenseAttachmentListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all attachments associated with a specific expense.
     * List all attachments for an expense
     */
    async budgetingV1ExpensesAttachmentsList(requestParameters: BudgetingV1ExpensesAttachmentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedExpenseAttachmentList> {
        const response = await this.budgetingV1ExpensesAttachmentsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update specific fields of an existing attachment without affecting others.
     * Partially update an attachment
     */
    async budgetingV1ExpensesAttachmentsPartialUpdateRaw(requestParameters: BudgetingV1ExpensesAttachmentsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExpenseAttachment>> {
        if (requestParameters['expenseId'] == null) {
            throw new runtime.RequiredError(
                'expenseId',
                'Required parameter "expenseId" was null or undefined when calling budgetingV1ExpensesAttachmentsPartialUpdate().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling budgetingV1ExpensesAttachmentsPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1ExpensesAttachmentsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/expenses/{expense_id}/attachments/{id}/`;
        urlPath = urlPath.replace(`{${"expense_id"}}`, encodeURIComponent(String(requestParameters['expenseId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedExpenseAttachmentToJSON(requestParameters['patchedExpenseAttachment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExpenseAttachmentFromJSON(jsonValue));
    }

    /**
     * Update specific fields of an existing attachment without affecting others.
     * Partially update an attachment
     */
    async budgetingV1ExpensesAttachmentsPartialUpdate(requestParameters: BudgetingV1ExpensesAttachmentsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExpenseAttachment> {
        const response = await this.budgetingV1ExpensesAttachmentsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed information about a specific attachment by its ID.
     * Retrieve a specific attachment
     */
    async budgetingV1ExpensesAttachmentsRetrieveRaw(requestParameters: BudgetingV1ExpensesAttachmentsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExpenseAttachment>> {
        if (requestParameters['expenseId'] == null) {
            throw new runtime.RequiredError(
                'expenseId',
                'Required parameter "expenseId" was null or undefined when calling budgetingV1ExpensesAttachmentsRetrieve().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling budgetingV1ExpensesAttachmentsRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1ExpensesAttachmentsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/expenses/{expense_id}/attachments/{id}/`;
        urlPath = urlPath.replace(`{${"expense_id"}}`, encodeURIComponent(String(requestParameters['expenseId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExpenseAttachmentFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a specific attachment by its ID.
     * Retrieve a specific attachment
     */
    async budgetingV1ExpensesAttachmentsRetrieve(requestParameters: BudgetingV1ExpensesAttachmentsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExpenseAttachment> {
        const response = await this.budgetingV1ExpensesAttachmentsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify the details of an existing attachment by its ID.
     * Update an existing attachment
     */
    async budgetingV1ExpensesAttachmentsUpdateRaw(requestParameters: BudgetingV1ExpensesAttachmentsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExpenseAttachment>> {
        if (requestParameters['expenseId'] == null) {
            throw new runtime.RequiredError(
                'expenseId',
                'Required parameter "expenseId" was null or undefined when calling budgetingV1ExpensesAttachmentsUpdate().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling budgetingV1ExpensesAttachmentsUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1ExpensesAttachmentsUpdate().'
            );
        }

        if (requestParameters['expenseAttachment'] == null) {
            throw new runtime.RequiredError(
                'expenseAttachment',
                'Required parameter "expenseAttachment" was null or undefined when calling budgetingV1ExpensesAttachmentsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/expenses/{expense_id}/attachments/{id}/`;
        urlPath = urlPath.replace(`{${"expense_id"}}`, encodeURIComponent(String(requestParameters['expenseId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExpenseAttachmentToJSON(requestParameters['expenseAttachment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExpenseAttachmentFromJSON(jsonValue));
    }

    /**
     * Modify the details of an existing attachment by its ID.
     * Update an existing attachment
     */
    async budgetingV1ExpensesAttachmentsUpdate(requestParameters: BudgetingV1ExpensesAttachmentsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExpenseAttachment> {
        const response = await this.budgetingV1ExpensesAttachmentsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a new expense to the system.
     * Create a new expense
     */
    async budgetingV1ExpensesCreateRaw(requestParameters: BudgetingV1ExpensesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Expense>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1ExpensesCreate().'
            );
        }

        if (requestParameters['expense'] == null) {
            throw new runtime.RequiredError(
                'expense',
                'Required parameter "expense" was null or undefined when calling budgetingV1ExpensesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/expenses/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExpenseToJSON(requestParameters['expense']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExpenseFromJSON(jsonValue));
    }

    /**
     * Add a new expense to the system.
     * Create a new expense
     */
    async budgetingV1ExpensesCreate(requestParameters: BudgetingV1ExpensesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Expense> {
        const response = await this.budgetingV1ExpensesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove an expense from the system by its ID.
     * Delete an expense
     */
    async budgetingV1ExpensesDestroyRaw(requestParameters: BudgetingV1ExpensesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling budgetingV1ExpensesDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1ExpensesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/expenses/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove an expense from the system by its ID.
     * Delete an expense
     */
    async budgetingV1ExpensesDestroy(requestParameters: BudgetingV1ExpensesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.budgetingV1ExpensesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a list of all expenses in the system.
     * List all expenses
     */
    async budgetingV1ExpensesListRaw(requestParameters: BudgetingV1ExpensesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedExpenseList>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1ExpensesList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/expenses/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedExpenseListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all expenses in the system.
     * List all expenses
     */
    async budgetingV1ExpensesList(requestParameters: BudgetingV1ExpensesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedExpenseList> {
        const response = await this.budgetingV1ExpensesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update specific fields of an existing expense without affecting others.
     * Partially update an expense
     */
    async budgetingV1ExpensesPartialUpdateRaw(requestParameters: BudgetingV1ExpensesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Expense>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling budgetingV1ExpensesPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1ExpensesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/expenses/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedExpenseToJSON(requestParameters['patchedExpense']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExpenseFromJSON(jsonValue));
    }

    /**
     * Update specific fields of an existing expense without affecting others.
     * Partially update an expense
     */
    async budgetingV1ExpensesPartialUpdate(requestParameters: BudgetingV1ExpensesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Expense> {
        const response = await this.budgetingV1ExpensesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed information about a specific expense by its ID.
     * Retrieve a specific expense
     */
    async budgetingV1ExpensesRetrieveRaw(requestParameters: BudgetingV1ExpensesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Expense>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling budgetingV1ExpensesRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1ExpensesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/expenses/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExpenseFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a specific expense by its ID.
     * Retrieve a specific expense
     */
    async budgetingV1ExpensesRetrieve(requestParameters: BudgetingV1ExpensesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Expense> {
        const response = await this.budgetingV1ExpensesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify the details of an existing expense by its ID.
     * Update an existing expense
     */
    async budgetingV1ExpensesUpdateRaw(requestParameters: BudgetingV1ExpensesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Expense>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling budgetingV1ExpensesUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1ExpensesUpdate().'
            );
        }

        if (requestParameters['expense'] == null) {
            throw new runtime.RequiredError(
                'expense',
                'Required parameter "expense" was null or undefined when calling budgetingV1ExpensesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/expenses/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExpenseToJSON(requestParameters['expense']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExpenseFromJSON(jsonValue));
    }

    /**
     * Modify the details of an existing expense by its ID.
     * Update an existing expense
     */
    async budgetingV1ExpensesUpdate(requestParameters: BudgetingV1ExpensesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Expense> {
        const response = await this.budgetingV1ExpensesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a new income category to the system.
     * Create a new income category
     */
    async budgetingV1IncomeCategoriesCreateRaw(requestParameters: BudgetingV1IncomeCategoriesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IncomeCategory>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1IncomeCategoriesCreate().'
            );
        }

        if (requestParameters['incomeCategory'] == null) {
            throw new runtime.RequiredError(
                'incomeCategory',
                'Required parameter "incomeCategory" was null or undefined when calling budgetingV1IncomeCategoriesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/income-categories/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IncomeCategoryToJSON(requestParameters['incomeCategory']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IncomeCategoryFromJSON(jsonValue));
    }

    /**
     * Add a new income category to the system.
     * Create a new income category
     */
    async budgetingV1IncomeCategoriesCreate(requestParameters: BudgetingV1IncomeCategoriesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IncomeCategory> {
        const response = await this.budgetingV1IncomeCategoriesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove an income category from the system by its ID.
     * Delete an income category
     */
    async budgetingV1IncomeCategoriesDestroyRaw(requestParameters: BudgetingV1IncomeCategoriesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling budgetingV1IncomeCategoriesDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1IncomeCategoriesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/income-categories/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove an income category from the system by its ID.
     * Delete an income category
     */
    async budgetingV1IncomeCategoriesDestroy(requestParameters: BudgetingV1IncomeCategoriesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.budgetingV1IncomeCategoriesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a list of all income categories in the system.
     * List all income categories
     */
    async budgetingV1IncomeCategoriesListRaw(requestParameters: BudgetingV1IncomeCategoriesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedIncomeCategoryList>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1IncomeCategoriesList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/income-categories/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedIncomeCategoryListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all income categories in the system.
     * List all income categories
     */
    async budgetingV1IncomeCategoriesList(requestParameters: BudgetingV1IncomeCategoriesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedIncomeCategoryList> {
        const response = await this.budgetingV1IncomeCategoriesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update specific fields of an existing income category without affecting others.
     * Partially update an income category
     */
    async budgetingV1IncomeCategoriesPartialUpdateRaw(requestParameters: BudgetingV1IncomeCategoriesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IncomeCategory>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling budgetingV1IncomeCategoriesPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1IncomeCategoriesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/income-categories/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedIncomeCategoryToJSON(requestParameters['patchedIncomeCategory']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IncomeCategoryFromJSON(jsonValue));
    }

    /**
     * Update specific fields of an existing income category without affecting others.
     * Partially update an income category
     */
    async budgetingV1IncomeCategoriesPartialUpdate(requestParameters: BudgetingV1IncomeCategoriesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IncomeCategory> {
        const response = await this.budgetingV1IncomeCategoriesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed information about a specific income category by its ID.
     * Retrieve a specific income category
     */
    async budgetingV1IncomeCategoriesRetrieveRaw(requestParameters: BudgetingV1IncomeCategoriesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IncomeCategory>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling budgetingV1IncomeCategoriesRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1IncomeCategoriesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/income-categories/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IncomeCategoryFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a specific income category by its ID.
     * Retrieve a specific income category
     */
    async budgetingV1IncomeCategoriesRetrieve(requestParameters: BudgetingV1IncomeCategoriesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IncomeCategory> {
        const response = await this.budgetingV1IncomeCategoriesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify the details of an existing income category by its ID.
     * Update an existing income category
     */
    async budgetingV1IncomeCategoriesUpdateRaw(requestParameters: BudgetingV1IncomeCategoriesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IncomeCategory>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling budgetingV1IncomeCategoriesUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1IncomeCategoriesUpdate().'
            );
        }

        if (requestParameters['incomeCategory'] == null) {
            throw new runtime.RequiredError(
                'incomeCategory',
                'Required parameter "incomeCategory" was null or undefined when calling budgetingV1IncomeCategoriesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/income-categories/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IncomeCategoryToJSON(requestParameters['incomeCategory']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IncomeCategoryFromJSON(jsonValue));
    }

    /**
     * Modify the details of an existing income category by its ID.
     * Update an existing income category
     */
    async budgetingV1IncomeCategoriesUpdate(requestParameters: BudgetingV1IncomeCategoriesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IncomeCategory> {
        const response = await this.budgetingV1IncomeCategoriesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a new income to the system.
     * Create a new income
     */
    async budgetingV1IncomesCreateRaw(requestParameters: BudgetingV1IncomesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Income>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1IncomesCreate().'
            );
        }

        if (requestParameters['income'] == null) {
            throw new runtime.RequiredError(
                'income',
                'Required parameter "income" was null or undefined when calling budgetingV1IncomesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/incomes/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IncomeToJSON(requestParameters['income']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IncomeFromJSON(jsonValue));
    }

    /**
     * Add a new income to the system.
     * Create a new income
     */
    async budgetingV1IncomesCreate(requestParameters: BudgetingV1IncomesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Income> {
        const response = await this.budgetingV1IncomesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove an income from the system by its ID.
     * Delete an income
     */
    async budgetingV1IncomesDestroyRaw(requestParameters: BudgetingV1IncomesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling budgetingV1IncomesDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1IncomesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/incomes/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove an income from the system by its ID.
     * Delete an income
     */
    async budgetingV1IncomesDestroy(requestParameters: BudgetingV1IncomesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.budgetingV1IncomesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a list of all incomes in the system, optionally filtered by category.
     * List all incomes
     */
    async budgetingV1IncomesListRaw(requestParameters: BudgetingV1IncomesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedIncomeList>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1IncomesList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['category'] != null) {
            queryParameters['category'] = requestParameters['category'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/incomes/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedIncomeListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all incomes in the system, optionally filtered by category.
     * List all incomes
     */
    async budgetingV1IncomesList(requestParameters: BudgetingV1IncomesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedIncomeList> {
        const response = await this.budgetingV1IncomesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update specific fields of an existing income without affecting others.
     * Partially update an income
     */
    async budgetingV1IncomesPartialUpdateRaw(requestParameters: BudgetingV1IncomesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Income>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling budgetingV1IncomesPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1IncomesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/incomes/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedIncomeToJSON(requestParameters['patchedIncome']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IncomeFromJSON(jsonValue));
    }

    /**
     * Update specific fields of an existing income without affecting others.
     * Partially update an income
     */
    async budgetingV1IncomesPartialUpdate(requestParameters: BudgetingV1IncomesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Income> {
        const response = await this.budgetingV1IncomesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed information about a specific income by its ID.
     * Retrieve a specific income
     */
    async budgetingV1IncomesRetrieveRaw(requestParameters: BudgetingV1IncomesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Income>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling budgetingV1IncomesRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1IncomesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/incomes/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IncomeFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a specific income by its ID.
     * Retrieve a specific income
     */
    async budgetingV1IncomesRetrieve(requestParameters: BudgetingV1IncomesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Income> {
        const response = await this.budgetingV1IncomesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify the details of an existing income by its ID.
     * Update an existing income
     */
    async budgetingV1IncomesUpdateRaw(requestParameters: BudgetingV1IncomesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Income>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling budgetingV1IncomesUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1IncomesUpdate().'
            );
        }

        if (requestParameters['income'] == null) {
            throw new runtime.RequiredError(
                'income',
                'Required parameter "income" was null or undefined when calling budgetingV1IncomesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/incomes/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IncomeToJSON(requestParameters['income']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IncomeFromJSON(jsonValue));
    }

    /**
     * Modify the details of an existing income by its ID.
     * Update an existing income
     */
    async budgetingV1IncomesUpdate(requestParameters: BudgetingV1IncomesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Income> {
        const response = await this.budgetingV1IncomesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a new production cost category to the system.
     * Create a new production cost category
     */
    async budgetingV1ProductionsCostCategoriesCreateRaw(requestParameters: BudgetingV1ProductionsCostCategoriesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCostCategory>> {
        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling budgetingV1ProductionsCostCategoriesCreate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1ProductionsCostCategoriesCreate().'
            );
        }

        if (requestParameters['productionCostCategory'] == null) {
            throw new runtime.RequiredError(
                'productionCostCategory',
                'Required parameter "productionCostCategory" was null or undefined when calling budgetingV1ProductionsCostCategoriesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/productions/{production_id}/cost-categories/`;
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionCostCategoryToJSON(requestParameters['productionCostCategory']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionCostCategoryFromJSON(jsonValue));
    }

    /**
     * Add a new production cost category to the system.
     * Create a new production cost category
     */
    async budgetingV1ProductionsCostCategoriesCreate(requestParameters: BudgetingV1ProductionsCostCategoriesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCostCategory> {
        const response = await this.budgetingV1ProductionsCostCategoriesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a production cost category from the system by its ID.
     * Delete a production cost category
     */
    async budgetingV1ProductionsCostCategoriesDestroyRaw(requestParameters: BudgetingV1ProductionsCostCategoriesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling budgetingV1ProductionsCostCategoriesDestroy().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling budgetingV1ProductionsCostCategoriesDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1ProductionsCostCategoriesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/productions/{production_id}/cost-categories/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a production cost category from the system by its ID.
     * Delete a production cost category
     */
    async budgetingV1ProductionsCostCategoriesDestroy(requestParameters: BudgetingV1ProductionsCostCategoriesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.budgetingV1ProductionsCostCategoriesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a list of all production cost categories for a specific production.
     * List all production cost categories
     */
    async budgetingV1ProductionsCostCategoriesListRaw(requestParameters: BudgetingV1ProductionsCostCategoriesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProductionCostCategoryList>> {
        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling budgetingV1ProductionsCostCategoriesList().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1ProductionsCostCategoriesList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/productions/{production_id}/cost-categories/`;
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedProductionCostCategoryListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all production cost categories for a specific production.
     * List all production cost categories
     */
    async budgetingV1ProductionsCostCategoriesList(requestParameters: BudgetingV1ProductionsCostCategoriesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProductionCostCategoryList> {
        const response = await this.budgetingV1ProductionsCostCategoriesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update specific fields of an existing production cost category without affecting others.
     * Partially update a production cost category
     */
    async budgetingV1ProductionsCostCategoriesPartialUpdateRaw(requestParameters: BudgetingV1ProductionsCostCategoriesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCostCategory>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling budgetingV1ProductionsCostCategoriesPartialUpdate().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling budgetingV1ProductionsCostCategoriesPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1ProductionsCostCategoriesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/productions/{production_id}/cost-categories/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedProductionCostCategoryToJSON(requestParameters['patchedProductionCostCategory']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionCostCategoryFromJSON(jsonValue));
    }

    /**
     * Update specific fields of an existing production cost category without affecting others.
     * Partially update a production cost category
     */
    async budgetingV1ProductionsCostCategoriesPartialUpdate(requestParameters: BudgetingV1ProductionsCostCategoriesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCostCategory> {
        const response = await this.budgetingV1ProductionsCostCategoriesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed information about a specific production cost category by its ID.
     * Retrieve a specific production cost category
     */
    async budgetingV1ProductionsCostCategoriesRetrieveRaw(requestParameters: BudgetingV1ProductionsCostCategoriesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCostCategory>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling budgetingV1ProductionsCostCategoriesRetrieve().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling budgetingV1ProductionsCostCategoriesRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1ProductionsCostCategoriesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/productions/{production_id}/cost-categories/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionCostCategoryFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a specific production cost category by its ID.
     * Retrieve a specific production cost category
     */
    async budgetingV1ProductionsCostCategoriesRetrieve(requestParameters: BudgetingV1ProductionsCostCategoriesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCostCategory> {
        const response = await this.budgetingV1ProductionsCostCategoriesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify the details of an existing production cost category by its ID.
     * Update an existing production cost category
     */
    async budgetingV1ProductionsCostCategoriesUpdateRaw(requestParameters: BudgetingV1ProductionsCostCategoriesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCostCategory>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling budgetingV1ProductionsCostCategoriesUpdate().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling budgetingV1ProductionsCostCategoriesUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1ProductionsCostCategoriesUpdate().'
            );
        }

        if (requestParameters['productionCostCategory'] == null) {
            throw new runtime.RequiredError(
                'productionCostCategory',
                'Required parameter "productionCostCategory" was null or undefined when calling budgetingV1ProductionsCostCategoriesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/productions/{production_id}/cost-categories/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionCostCategoryToJSON(requestParameters['productionCostCategory']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionCostCategoryFromJSON(jsonValue));
    }

    /**
     * Modify the details of an existing production cost category by its ID.
     * Update an existing production cost category
     */
    async budgetingV1ProductionsCostCategoriesUpdate(requestParameters: BudgetingV1ProductionsCostCategoriesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCostCategory> {
        const response = await this.budgetingV1ProductionsCostCategoriesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a new production income category to the system.
     * Create a new production income category
     */
    async budgetingV1ProductionsIncomeCategoriesCreateRaw(requestParameters: BudgetingV1ProductionsIncomeCategoriesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionIncomeCategory>> {
        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling budgetingV1ProductionsIncomeCategoriesCreate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1ProductionsIncomeCategoriesCreate().'
            );
        }

        if (requestParameters['productionIncomeCategory'] == null) {
            throw new runtime.RequiredError(
                'productionIncomeCategory',
                'Required parameter "productionIncomeCategory" was null or undefined when calling budgetingV1ProductionsIncomeCategoriesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/productions/{production_id}/income-categories/`;
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionIncomeCategoryToJSON(requestParameters['productionIncomeCategory']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionIncomeCategoryFromJSON(jsonValue));
    }

    /**
     * Add a new production income category to the system.
     * Create a new production income category
     */
    async budgetingV1ProductionsIncomeCategoriesCreate(requestParameters: BudgetingV1ProductionsIncomeCategoriesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionIncomeCategory> {
        const response = await this.budgetingV1ProductionsIncomeCategoriesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a production income category from the system by its ID.
     * Delete a production income category
     */
    async budgetingV1ProductionsIncomeCategoriesDestroyRaw(requestParameters: BudgetingV1ProductionsIncomeCategoriesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling budgetingV1ProductionsIncomeCategoriesDestroy().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling budgetingV1ProductionsIncomeCategoriesDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1ProductionsIncomeCategoriesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/productions/{production_id}/income-categories/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a production income category from the system by its ID.
     * Delete a production income category
     */
    async budgetingV1ProductionsIncomeCategoriesDestroy(requestParameters: BudgetingV1ProductionsIncomeCategoriesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.budgetingV1ProductionsIncomeCategoriesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a list of all income categories for a specific production.
     * List all production income categories
     */
    async budgetingV1ProductionsIncomeCategoriesListRaw(requestParameters: BudgetingV1ProductionsIncomeCategoriesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProductionIncomeCategoryList>> {
        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling budgetingV1ProductionsIncomeCategoriesList().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1ProductionsIncomeCategoriesList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/productions/{production_id}/income-categories/`;
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedProductionIncomeCategoryListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all income categories for a specific production.
     * List all production income categories
     */
    async budgetingV1ProductionsIncomeCategoriesList(requestParameters: BudgetingV1ProductionsIncomeCategoriesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProductionIncomeCategoryList> {
        const response = await this.budgetingV1ProductionsIncomeCategoriesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update specific fields of an existing production income category without affecting others.
     * Partially update a production income category
     */
    async budgetingV1ProductionsIncomeCategoriesPartialUpdateRaw(requestParameters: BudgetingV1ProductionsIncomeCategoriesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionIncomeCategory>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling budgetingV1ProductionsIncomeCategoriesPartialUpdate().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling budgetingV1ProductionsIncomeCategoriesPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1ProductionsIncomeCategoriesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/productions/{production_id}/income-categories/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedProductionIncomeCategoryToJSON(requestParameters['patchedProductionIncomeCategory']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionIncomeCategoryFromJSON(jsonValue));
    }

    /**
     * Update specific fields of an existing production income category without affecting others.
     * Partially update a production income category
     */
    async budgetingV1ProductionsIncomeCategoriesPartialUpdate(requestParameters: BudgetingV1ProductionsIncomeCategoriesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionIncomeCategory> {
        const response = await this.budgetingV1ProductionsIncomeCategoriesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed information about a specific production income category by its ID.
     * Retrieve a specific production income category
     */
    async budgetingV1ProductionsIncomeCategoriesRetrieveRaw(requestParameters: BudgetingV1ProductionsIncomeCategoriesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionIncomeCategory>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling budgetingV1ProductionsIncomeCategoriesRetrieve().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling budgetingV1ProductionsIncomeCategoriesRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1ProductionsIncomeCategoriesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/productions/{production_id}/income-categories/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionIncomeCategoryFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a specific production income category by its ID.
     * Retrieve a specific production income category
     */
    async budgetingV1ProductionsIncomeCategoriesRetrieve(requestParameters: BudgetingV1ProductionsIncomeCategoriesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionIncomeCategory> {
        const response = await this.budgetingV1ProductionsIncomeCategoriesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify the details of an existing production income category by its ID.
     * Update an existing production income category
     */
    async budgetingV1ProductionsIncomeCategoriesUpdateRaw(requestParameters: BudgetingV1ProductionsIncomeCategoriesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionIncomeCategory>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling budgetingV1ProductionsIncomeCategoriesUpdate().'
            );
        }

        if (requestParameters['productionId'] == null) {
            throw new runtime.RequiredError(
                'productionId',
                'Required parameter "productionId" was null or undefined when calling budgetingV1ProductionsIncomeCategoriesUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1ProductionsIncomeCategoriesUpdate().'
            );
        }

        if (requestParameters['productionIncomeCategory'] == null) {
            throw new runtime.RequiredError(
                'productionIncomeCategory',
                'Required parameter "productionIncomeCategory" was null or undefined when calling budgetingV1ProductionsIncomeCategoriesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/productions/{production_id}/income-categories/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"production_id"}}`, encodeURIComponent(String(requestParameters['productionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionIncomeCategoryToJSON(requestParameters['productionIncomeCategory']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionIncomeCategoryFromJSON(jsonValue));
    }

    /**
     * Modify the details of an existing production income category by its ID.
     * Update an existing production income category
     */
    async budgetingV1ProductionsIncomeCategoriesUpdate(requestParameters: BudgetingV1ProductionsIncomeCategoriesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionIncomeCategory> {
        const response = await this.budgetingV1ProductionsIncomeCategoriesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a new reimbursement to the system.
     * Create a new reimbursement
     */
    async budgetingV1ReimbursementsCreateRaw(requestParameters: BudgetingV1ReimbursementsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reimbursement>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1ReimbursementsCreate().'
            );
        }

        if (requestParameters['reimbursement'] == null) {
            throw new runtime.RequiredError(
                'reimbursement',
                'Required parameter "reimbursement" was null or undefined when calling budgetingV1ReimbursementsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/reimbursements/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReimbursementToJSON(requestParameters['reimbursement']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReimbursementFromJSON(jsonValue));
    }

    /**
     * Add a new reimbursement to the system.
     * Create a new reimbursement
     */
    async budgetingV1ReimbursementsCreate(requestParameters: BudgetingV1ReimbursementsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reimbursement> {
        const response = await this.budgetingV1ReimbursementsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a reimbursement from the system by its ID.
     * Delete a reimbursement
     */
    async budgetingV1ReimbursementsDestroyRaw(requestParameters: BudgetingV1ReimbursementsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling budgetingV1ReimbursementsDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1ReimbursementsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/reimbursements/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a reimbursement from the system by its ID.
     * Delete a reimbursement
     */
    async budgetingV1ReimbursementsDestroy(requestParameters: BudgetingV1ReimbursementsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.budgetingV1ReimbursementsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a list of all reimbursements in the system.
     * List all reimbursements
     */
    async budgetingV1ReimbursementsListRaw(requestParameters: BudgetingV1ReimbursementsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedReimbursementList>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1ReimbursementsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/reimbursements/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedReimbursementListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all reimbursements in the system.
     * List all reimbursements
     */
    async budgetingV1ReimbursementsList(requestParameters: BudgetingV1ReimbursementsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedReimbursementList> {
        const response = await this.budgetingV1ReimbursementsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update specific fields of an existing reimbursement without affecting others.
     * Partially update a reimbursement
     */
    async budgetingV1ReimbursementsPartialUpdateRaw(requestParameters: BudgetingV1ReimbursementsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reimbursement>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling budgetingV1ReimbursementsPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1ReimbursementsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/reimbursements/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedReimbursementToJSON(requestParameters['patchedReimbursement']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReimbursementFromJSON(jsonValue));
    }

    /**
     * Update specific fields of an existing reimbursement without affecting others.
     * Partially update a reimbursement
     */
    async budgetingV1ReimbursementsPartialUpdate(requestParameters: BudgetingV1ReimbursementsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reimbursement> {
        const response = await this.budgetingV1ReimbursementsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed information about a specific reimbursement by its ID.
     * Retrieve a specific reimbursement
     */
    async budgetingV1ReimbursementsRetrieveRaw(requestParameters: BudgetingV1ReimbursementsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reimbursement>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling budgetingV1ReimbursementsRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1ReimbursementsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/reimbursements/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReimbursementFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a specific reimbursement by its ID.
     * Retrieve a specific reimbursement
     */
    async budgetingV1ReimbursementsRetrieve(requestParameters: BudgetingV1ReimbursementsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reimbursement> {
        const response = await this.budgetingV1ReimbursementsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify the details of an existing reimbursement by its ID.
     * Update an existing reimbursement
     */
    async budgetingV1ReimbursementsUpdateRaw(requestParameters: BudgetingV1ReimbursementsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reimbursement>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling budgetingV1ReimbursementsUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1ReimbursementsUpdate().'
            );
        }

        if (requestParameters['reimbursement'] == null) {
            throw new runtime.RequiredError(
                'reimbursement',
                'Required parameter "reimbursement" was null or undefined when calling budgetingV1ReimbursementsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/reimbursements/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReimbursementToJSON(requestParameters['reimbursement']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReimbursementFromJSON(jsonValue));
    }

    /**
     * Modify the details of an existing reimbursement by its ID.
     * Update an existing reimbursement
     */
    async budgetingV1ReimbursementsUpdate(requestParameters: BudgetingV1ReimbursementsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reimbursement> {
        const response = await this.budgetingV1ReimbursementsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a new vendor to the system.
     * Create a new vendor
     */
    async budgetingV1VendorsCreateRaw(requestParameters: BudgetingV1VendorsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Vendor>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1VendorsCreate().'
            );
        }

        if (requestParameters['vendor'] == null) {
            throw new runtime.RequiredError(
                'vendor',
                'Required parameter "vendor" was null or undefined when calling budgetingV1VendorsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/vendors/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VendorToJSON(requestParameters['vendor']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VendorFromJSON(jsonValue));
    }

    /**
     * Add a new vendor to the system.
     * Create a new vendor
     */
    async budgetingV1VendorsCreate(requestParameters: BudgetingV1VendorsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Vendor> {
        const response = await this.budgetingV1VendorsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a vendor from the system by its ID.
     * Delete a vendor
     */
    async budgetingV1VendorsDestroyRaw(requestParameters: BudgetingV1VendorsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling budgetingV1VendorsDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1VendorsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/vendors/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a vendor from the system by its ID.
     * Delete a vendor
     */
    async budgetingV1VendorsDestroy(requestParameters: BudgetingV1VendorsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.budgetingV1VendorsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a list of all vendors in the system.
     * List all vendors
     */
    async budgetingV1VendorsListRaw(requestParameters: BudgetingV1VendorsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedVendorList>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1VendorsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/vendors/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedVendorListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all vendors in the system.
     * List all vendors
     */
    async budgetingV1VendorsList(requestParameters: BudgetingV1VendorsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedVendorList> {
        const response = await this.budgetingV1VendorsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update specific fields of an existing vendor without affecting others.
     * Partially update a vendor
     */
    async budgetingV1VendorsPartialUpdateRaw(requestParameters: BudgetingV1VendorsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Vendor>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling budgetingV1VendorsPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1VendorsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/vendors/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedVendorToJSON(requestParameters['patchedVendor']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VendorFromJSON(jsonValue));
    }

    /**
     * Update specific fields of an existing vendor without affecting others.
     * Partially update a vendor
     */
    async budgetingV1VendorsPartialUpdate(requestParameters: BudgetingV1VendorsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Vendor> {
        const response = await this.budgetingV1VendorsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed information about a specific vendor by its ID.
     * Retrieve a specific vendor
     */
    async budgetingV1VendorsRetrieveRaw(requestParameters: BudgetingV1VendorsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Vendor>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling budgetingV1VendorsRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1VendorsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/vendors/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VendorFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a specific vendor by its ID.
     * Retrieve a specific vendor
     */
    async budgetingV1VendorsRetrieve(requestParameters: BudgetingV1VendorsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Vendor> {
        const response = await this.budgetingV1VendorsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify the details of an existing vendor by its ID.
     * Update an existing vendor
     */
    async budgetingV1VendorsUpdateRaw(requestParameters: BudgetingV1VendorsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Vendor>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling budgetingV1VendorsUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling budgetingV1VendorsUpdate().'
            );
        }

        if (requestParameters['vendor'] == null) {
            throw new runtime.RequiredError(
                'vendor',
                'Required parameter "vendor" was null or undefined when calling budgetingV1VendorsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/budgeting/v1/vendors/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: VendorToJSON(requestParameters['vendor']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VendorFromJSON(jsonValue));
    }

    /**
     * Modify the details of an existing vendor by its ID.
     * Update an existing vendor
     */
    async budgetingV1VendorsUpdate(requestParameters: BudgetingV1VendorsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Vendor> {
        const response = await this.budgetingV1VendorsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
