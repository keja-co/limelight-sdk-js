/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.111
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Address,
  Country,
  PaginatedAddressList,
  PaginatedCountryList,
  PaginatedStateList,
  PaginatedVenueCapacityList,
  PaginatedVenueList,
  PaginatedVenueTagAssignmentList,
  PaginatedVenueTagList,
  PatchedAddress,
  PatchedCountry,
  PatchedState,
  PatchedVenue,
  PatchedVenueCapacity,
  PatchedVenueTag,
  PatchedVenueTagAssignment,
  State,
  Venue,
  VenueCapacity,
  VenueTag,
  VenueTagAssignment,
} from '../models/index';
import {
    AddressFromJSON,
    AddressToJSON,
    CountryFromJSON,
    CountryToJSON,
    PaginatedAddressListFromJSON,
    PaginatedAddressListToJSON,
    PaginatedCountryListFromJSON,
    PaginatedCountryListToJSON,
    PaginatedStateListFromJSON,
    PaginatedStateListToJSON,
    PaginatedVenueCapacityListFromJSON,
    PaginatedVenueCapacityListToJSON,
    PaginatedVenueListFromJSON,
    PaginatedVenueListToJSON,
    PaginatedVenueTagAssignmentListFromJSON,
    PaginatedVenueTagAssignmentListToJSON,
    PaginatedVenueTagListFromJSON,
    PaginatedVenueTagListToJSON,
    PatchedAddressFromJSON,
    PatchedAddressToJSON,
    PatchedCountryFromJSON,
    PatchedCountryToJSON,
    PatchedStateFromJSON,
    PatchedStateToJSON,
    PatchedVenueFromJSON,
    PatchedVenueToJSON,
    PatchedVenueCapacityFromJSON,
    PatchedVenueCapacityToJSON,
    PatchedVenueTagFromJSON,
    PatchedVenueTagToJSON,
    PatchedVenueTagAssignmentFromJSON,
    PatchedVenueTagAssignmentToJSON,
    StateFromJSON,
    StateToJSON,
    VenueFromJSON,
    VenueToJSON,
    VenueCapacityFromJSON,
    VenueCapacityToJSON,
    VenueTagFromJSON,
    VenueTagToJSON,
    VenueTagAssignmentFromJSON,
    VenueTagAssignmentToJSON,
} from '../models/index';

export interface LocationV1CountriesAddressesCreateRequest {
    countryId: number;
    tenantRef: string;
    address: Omit<Address, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface LocationV1CountriesAddressesDestroyRequest {
    countryId: number;
    id: number;
    tenantRef: string;
}

export interface LocationV1CountriesAddressesListRequest {
    countryId: number;
    tenantRef: string;
    page?: number;
    pageSize?: number;
}

export interface LocationV1CountriesAddressesPartialUpdateRequest {
    countryId: number;
    id: number;
    tenantRef: string;
    patchedAddress?: Omit<PatchedAddress, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface LocationV1CountriesAddressesRetrieveRequest {
    countryId: number;
    id: number;
    tenantRef: string;
}

export interface LocationV1CountriesAddressesUpdateRequest {
    countryId: number;
    id: number;
    tenantRef: string;
    address: Omit<Address, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface LocationV1CountriesCreateRequest {
    tenantRef: string;
    country: Omit<Country, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface LocationV1CountriesDestroyRequest {
    id: number;
    tenantRef: string;
}

export interface LocationV1CountriesListRequest {
    tenantRef: string;
    page?: number;
    pageSize?: number;
}

export interface LocationV1CountriesPartialUpdateRequest {
    id: number;
    tenantRef: string;
    patchedCountry?: Omit<PatchedCountry, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface LocationV1CountriesRetrieveRequest {
    id: number;
    tenantRef: string;
}

export interface LocationV1CountriesStateCreateRequest {
    countryId: number;
    tenantRef: string;
    state: Omit<State, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface LocationV1CountriesStateDestroyRequest {
    countryId: number;
    id: number;
    tenantRef: string;
}

export interface LocationV1CountriesStateListRequest {
    countryId: number;
    tenantRef: string;
    page?: number;
    pageSize?: number;
}

export interface LocationV1CountriesStatePartialUpdateRequest {
    countryId: number;
    id: number;
    tenantRef: string;
    patchedState?: Omit<PatchedState, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface LocationV1CountriesStateRetrieveRequest {
    countryId: number;
    id: number;
    tenantRef: string;
}

export interface LocationV1CountriesStateUpdateRequest {
    countryId: number;
    id: number;
    tenantRef: string;
    state: Omit<State, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface LocationV1CountriesUpdateRequest {
    id: number;
    tenantRef: string;
    country: Omit<Country, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface LocationV1VenueTagsCreateRequest {
    tenantRef: string;
    venueTag: Omit<VenueTag, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface LocationV1VenueTagsDestroyRequest {
    id: number;
    tenantRef: string;
}

export interface LocationV1VenueTagsListRequest {
    tenantRef: string;
    page?: number;
    pageSize?: number;
}

export interface LocationV1VenueTagsPartialUpdateRequest {
    id: number;
    tenantRef: string;
    patchedVenueTag?: Omit<PatchedVenueTag, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface LocationV1VenueTagsRetrieveRequest {
    id: number;
    tenantRef: string;
}

export interface LocationV1VenueTagsUpdateRequest {
    id: number;
    tenantRef: string;
    venueTag: Omit<VenueTag, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface LocationV1VenuesCapacitiesCreateRequest {
    tenantRef: string;
    venueId: number;
    venueCapacity: Omit<VenueCapacity, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'|'venue'>;
}

export interface LocationV1VenuesCapacitiesDestroyRequest {
    id: number;
    tenantRef: string;
    venueId: number;
}

export interface LocationV1VenuesCapacitiesListRequest {
    tenantRef: string;
    venueId: number;
    page?: number;
    pageSize?: number;
}

export interface LocationV1VenuesCapacitiesPartialUpdateRequest {
    id: number;
    tenantRef: string;
    venueId: number;
    patchedVenueCapacity?: Omit<PatchedVenueCapacity, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'|'venue'>;
}

export interface LocationV1VenuesCapacitiesRetrieveRequest {
    id: number;
    tenantRef: string;
    venueId: number;
}

export interface LocationV1VenuesCapacitiesUpdateRequest {
    id: number;
    tenantRef: string;
    venueId: number;
    venueCapacity: Omit<VenueCapacity, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'|'venue'>;
}

export interface LocationV1VenuesCreateRequest {
    tenantRef: string;
    venue: Omit<Venue, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface LocationV1VenuesDestroyRequest {
    id: number;
    tenantRef: string;
}

export interface LocationV1VenuesListRequest {
    tenantRef: string;
    page?: number;
    pageSize?: number;
}

export interface LocationV1VenuesPartialUpdateRequest {
    id: number;
    tenantRef: string;
    patchedVenue?: Omit<PatchedVenue, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface LocationV1VenuesRetrieveRequest {
    id: number;
    tenantRef: string;
}

export interface LocationV1VenuesTagsCreateRequest {
    tenantRef: string;
    venueId: number;
    venueTagAssignment: Omit<VenueTagAssignment, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface LocationV1VenuesTagsDestroyRequest {
    id: number;
    tenantRef: string;
    venueId: number;
}

export interface LocationV1VenuesTagsListRequest {
    tenantRef: string;
    venueId: number;
    page?: number;
    pageSize?: number;
}

export interface LocationV1VenuesTagsPartialUpdateRequest {
    id: number;
    tenantRef: string;
    venueId: number;
    patchedVenueTagAssignment?: Omit<PatchedVenueTagAssignment, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface LocationV1VenuesTagsRetrieveRequest {
    id: number;
    tenantRef: string;
    venueId: number;
}

export interface LocationV1VenuesTagsUpdateRequest {
    id: number;
    tenantRef: string;
    venueId: number;
    venueTagAssignment: Omit<VenueTagAssignment, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface LocationV1VenuesUpdateRequest {
    id: number;
    tenantRef: string;
    venue: Omit<Venue, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

/**
 * 
 */
export class LocationApi extends runtime.BaseAPI {

    /**
     * Add a new address to a specific country.
     * Create a new address in a country
     */
    async locationV1CountriesAddressesCreateRaw(requestParameters: LocationV1CountriesAddressesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Address>> {
        if (requestParameters['countryId'] == null) {
            throw new runtime.RequiredError(
                'countryId',
                'Required parameter "countryId" was null or undefined when calling locationV1CountriesAddressesCreate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1CountriesAddressesCreate().'
            );
        }

        if (requestParameters['address'] == null) {
            throw new runtime.RequiredError(
                'address',
                'Required parameter "address" was null or undefined when calling locationV1CountriesAddressesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/location/v1/countries/{country_id}/addresses/`;
        urlPath = urlPath.replace(`{${"country_id"}}`, encodeURIComponent(String(requestParameters['countryId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddressToJSON(requestParameters['address']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressFromJSON(jsonValue));
    }

    /**
     * Add a new address to a specific country.
     * Create a new address in a country
     */
    async locationV1CountriesAddressesCreate(requestParameters: LocationV1CountriesAddressesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Address> {
        const response = await this.locationV1CountriesAddressesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove an address from the system by its ID.
     * Delete an address
     */
    async locationV1CountriesAddressesDestroyRaw(requestParameters: LocationV1CountriesAddressesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['countryId'] == null) {
            throw new runtime.RequiredError(
                'countryId',
                'Required parameter "countryId" was null or undefined when calling locationV1CountriesAddressesDestroy().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1CountriesAddressesDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1CountriesAddressesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/location/v1/countries/{country_id}/addresses/{id}/`;
        urlPath = urlPath.replace(`{${"country_id"}}`, encodeURIComponent(String(requestParameters['countryId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove an address from the system by its ID.
     * Delete an address
     */
    async locationV1CountriesAddressesDestroy(requestParameters: LocationV1CountriesAddressesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.locationV1CountriesAddressesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a list of all addresses within a specific country.
     * List all addresses in a country
     */
    async locationV1CountriesAddressesListRaw(requestParameters: LocationV1CountriesAddressesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedAddressList>> {
        if (requestParameters['countryId'] == null) {
            throw new runtime.RequiredError(
                'countryId',
                'Required parameter "countryId" was null or undefined when calling locationV1CountriesAddressesList().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1CountriesAddressesList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/location/v1/countries/{country_id}/addresses/`;
        urlPath = urlPath.replace(`{${"country_id"}}`, encodeURIComponent(String(requestParameters['countryId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedAddressListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all addresses within a specific country.
     * List all addresses in a country
     */
    async locationV1CountriesAddressesList(requestParameters: LocationV1CountriesAddressesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedAddressList> {
        const response = await this.locationV1CountriesAddressesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update specific fields of an existing address without affecting others.
     * Partially update an address
     */
    async locationV1CountriesAddressesPartialUpdateRaw(requestParameters: LocationV1CountriesAddressesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Address>> {
        if (requestParameters['countryId'] == null) {
            throw new runtime.RequiredError(
                'countryId',
                'Required parameter "countryId" was null or undefined when calling locationV1CountriesAddressesPartialUpdate().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1CountriesAddressesPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1CountriesAddressesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/location/v1/countries/{country_id}/addresses/{id}/`;
        urlPath = urlPath.replace(`{${"country_id"}}`, encodeURIComponent(String(requestParameters['countryId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedAddressToJSON(requestParameters['patchedAddress']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressFromJSON(jsonValue));
    }

    /**
     * Update specific fields of an existing address without affecting others.
     * Partially update an address
     */
    async locationV1CountriesAddressesPartialUpdate(requestParameters: LocationV1CountriesAddressesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Address> {
        const response = await this.locationV1CountriesAddressesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed information about a specific address by its ID.
     * Retrieve a specific address
     */
    async locationV1CountriesAddressesRetrieveRaw(requestParameters: LocationV1CountriesAddressesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Address>> {
        if (requestParameters['countryId'] == null) {
            throw new runtime.RequiredError(
                'countryId',
                'Required parameter "countryId" was null or undefined when calling locationV1CountriesAddressesRetrieve().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1CountriesAddressesRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1CountriesAddressesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/location/v1/countries/{country_id}/addresses/{id}/`;
        urlPath = urlPath.replace(`{${"country_id"}}`, encodeURIComponent(String(requestParameters['countryId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a specific address by its ID.
     * Retrieve a specific address
     */
    async locationV1CountriesAddressesRetrieve(requestParameters: LocationV1CountriesAddressesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Address> {
        const response = await this.locationV1CountriesAddressesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify the details of an existing address by its ID.
     * Update an existing address
     */
    async locationV1CountriesAddressesUpdateRaw(requestParameters: LocationV1CountriesAddressesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Address>> {
        if (requestParameters['countryId'] == null) {
            throw new runtime.RequiredError(
                'countryId',
                'Required parameter "countryId" was null or undefined when calling locationV1CountriesAddressesUpdate().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1CountriesAddressesUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1CountriesAddressesUpdate().'
            );
        }

        if (requestParameters['address'] == null) {
            throw new runtime.RequiredError(
                'address',
                'Required parameter "address" was null or undefined when calling locationV1CountriesAddressesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/location/v1/countries/{country_id}/addresses/{id}/`;
        urlPath = urlPath.replace(`{${"country_id"}}`, encodeURIComponent(String(requestParameters['countryId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AddressToJSON(requestParameters['address']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressFromJSON(jsonValue));
    }

    /**
     * Modify the details of an existing address by its ID.
     * Update an existing address
     */
    async locationV1CountriesAddressesUpdate(requestParameters: LocationV1CountriesAddressesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Address> {
        const response = await this.locationV1CountriesAddressesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a new country to the system.
     * Create a new country
     */
    async locationV1CountriesCreateRaw(requestParameters: LocationV1CountriesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Country>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1CountriesCreate().'
            );
        }

        if (requestParameters['country'] == null) {
            throw new runtime.RequiredError(
                'country',
                'Required parameter "country" was null or undefined when calling locationV1CountriesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/location/v1/countries/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CountryToJSON(requestParameters['country']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountryFromJSON(jsonValue));
    }

    /**
     * Add a new country to the system.
     * Create a new country
     */
    async locationV1CountriesCreate(requestParameters: LocationV1CountriesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Country> {
        const response = await this.locationV1CountriesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a country from the system by its ID.
     * Delete a country
     */
    async locationV1CountriesDestroyRaw(requestParameters: LocationV1CountriesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1CountriesDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1CountriesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/location/v1/countries/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a country from the system by its ID.
     * Delete a country
     */
    async locationV1CountriesDestroy(requestParameters: LocationV1CountriesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.locationV1CountriesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a list of all countries in the system.
     * List all countries
     */
    async locationV1CountriesListRaw(requestParameters: LocationV1CountriesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedCountryList>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1CountriesList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/location/v1/countries/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedCountryListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all countries in the system.
     * List all countries
     */
    async locationV1CountriesList(requestParameters: LocationV1CountriesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedCountryList> {
        const response = await this.locationV1CountriesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update specific fields of an existing country without affecting others.
     * Partially update a country
     */
    async locationV1CountriesPartialUpdateRaw(requestParameters: LocationV1CountriesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Country>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1CountriesPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1CountriesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/location/v1/countries/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedCountryToJSON(requestParameters['patchedCountry']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountryFromJSON(jsonValue));
    }

    /**
     * Update specific fields of an existing country without affecting others.
     * Partially update a country
     */
    async locationV1CountriesPartialUpdate(requestParameters: LocationV1CountriesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Country> {
        const response = await this.locationV1CountriesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed information about a specific country by its ID.
     * Retrieve a specific country
     */
    async locationV1CountriesRetrieveRaw(requestParameters: LocationV1CountriesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Country>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1CountriesRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1CountriesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/location/v1/countries/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountryFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a specific country by its ID.
     * Retrieve a specific country
     */
    async locationV1CountriesRetrieve(requestParameters: LocationV1CountriesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Country> {
        const response = await this.locationV1CountriesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a new state to a specific country.
     * Create a new state in a country
     */
    async locationV1CountriesStateCreateRaw(requestParameters: LocationV1CountriesStateCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<State>> {
        if (requestParameters['countryId'] == null) {
            throw new runtime.RequiredError(
                'countryId',
                'Required parameter "countryId" was null or undefined when calling locationV1CountriesStateCreate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1CountriesStateCreate().'
            );
        }

        if (requestParameters['state'] == null) {
            throw new runtime.RequiredError(
                'state',
                'Required parameter "state" was null or undefined when calling locationV1CountriesStateCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/location/v1/countries/{country_id}/state/`;
        urlPath = urlPath.replace(`{${"country_id"}}`, encodeURIComponent(String(requestParameters['countryId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StateToJSON(requestParameters['state']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateFromJSON(jsonValue));
    }

    /**
     * Add a new state to a specific country.
     * Create a new state in a country
     */
    async locationV1CountriesStateCreate(requestParameters: LocationV1CountriesStateCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<State> {
        const response = await this.locationV1CountriesStateCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a state from the system by its ID.
     * Delete a state
     */
    async locationV1CountriesStateDestroyRaw(requestParameters: LocationV1CountriesStateDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['countryId'] == null) {
            throw new runtime.RequiredError(
                'countryId',
                'Required parameter "countryId" was null or undefined when calling locationV1CountriesStateDestroy().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1CountriesStateDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1CountriesStateDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/location/v1/countries/{country_id}/state/{id}/`;
        urlPath = urlPath.replace(`{${"country_id"}}`, encodeURIComponent(String(requestParameters['countryId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a state from the system by its ID.
     * Delete a state
     */
    async locationV1CountriesStateDestroy(requestParameters: LocationV1CountriesStateDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.locationV1CountriesStateDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a list of all states within a specific country.
     * List all states in a country
     */
    async locationV1CountriesStateListRaw(requestParameters: LocationV1CountriesStateListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedStateList>> {
        if (requestParameters['countryId'] == null) {
            throw new runtime.RequiredError(
                'countryId',
                'Required parameter "countryId" was null or undefined when calling locationV1CountriesStateList().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1CountriesStateList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/location/v1/countries/{country_id}/state/`;
        urlPath = urlPath.replace(`{${"country_id"}}`, encodeURIComponent(String(requestParameters['countryId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedStateListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all states within a specific country.
     * List all states in a country
     */
    async locationV1CountriesStateList(requestParameters: LocationV1CountriesStateListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedStateList> {
        const response = await this.locationV1CountriesStateListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update specific fields of an existing state without affecting others.
     * Partially update a state
     */
    async locationV1CountriesStatePartialUpdateRaw(requestParameters: LocationV1CountriesStatePartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<State>> {
        if (requestParameters['countryId'] == null) {
            throw new runtime.RequiredError(
                'countryId',
                'Required parameter "countryId" was null or undefined when calling locationV1CountriesStatePartialUpdate().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1CountriesStatePartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1CountriesStatePartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/location/v1/countries/{country_id}/state/{id}/`;
        urlPath = urlPath.replace(`{${"country_id"}}`, encodeURIComponent(String(requestParameters['countryId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedStateToJSON(requestParameters['patchedState']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateFromJSON(jsonValue));
    }

    /**
     * Update specific fields of an existing state without affecting others.
     * Partially update a state
     */
    async locationV1CountriesStatePartialUpdate(requestParameters: LocationV1CountriesStatePartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<State> {
        const response = await this.locationV1CountriesStatePartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed information about a specific state by its ID.
     * Retrieve a specific state
     */
    async locationV1CountriesStateRetrieveRaw(requestParameters: LocationV1CountriesStateRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<State>> {
        if (requestParameters['countryId'] == null) {
            throw new runtime.RequiredError(
                'countryId',
                'Required parameter "countryId" was null or undefined when calling locationV1CountriesStateRetrieve().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1CountriesStateRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1CountriesStateRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/location/v1/countries/{country_id}/state/{id}/`;
        urlPath = urlPath.replace(`{${"country_id"}}`, encodeURIComponent(String(requestParameters['countryId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a specific state by its ID.
     * Retrieve a specific state
     */
    async locationV1CountriesStateRetrieve(requestParameters: LocationV1CountriesStateRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<State> {
        const response = await this.locationV1CountriesStateRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify the details of an existing state by its ID.
     * Update an existing state
     */
    async locationV1CountriesStateUpdateRaw(requestParameters: LocationV1CountriesStateUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<State>> {
        if (requestParameters['countryId'] == null) {
            throw new runtime.RequiredError(
                'countryId',
                'Required parameter "countryId" was null or undefined when calling locationV1CountriesStateUpdate().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1CountriesStateUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1CountriesStateUpdate().'
            );
        }

        if (requestParameters['state'] == null) {
            throw new runtime.RequiredError(
                'state',
                'Required parameter "state" was null or undefined when calling locationV1CountriesStateUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/location/v1/countries/{country_id}/state/{id}/`;
        urlPath = urlPath.replace(`{${"country_id"}}`, encodeURIComponent(String(requestParameters['countryId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StateToJSON(requestParameters['state']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateFromJSON(jsonValue));
    }

    /**
     * Modify the details of an existing state by its ID.
     * Update an existing state
     */
    async locationV1CountriesStateUpdate(requestParameters: LocationV1CountriesStateUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<State> {
        const response = await this.locationV1CountriesStateUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify the details of an existing country by its ID.
     * Update an existing country
     */
    async locationV1CountriesUpdateRaw(requestParameters: LocationV1CountriesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Country>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1CountriesUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1CountriesUpdate().'
            );
        }

        if (requestParameters['country'] == null) {
            throw new runtime.RequiredError(
                'country',
                'Required parameter "country" was null or undefined when calling locationV1CountriesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/location/v1/countries/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CountryToJSON(requestParameters['country']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountryFromJSON(jsonValue));
    }

    /**
     * Modify the details of an existing country by its ID.
     * Update an existing country
     */
    async locationV1CountriesUpdate(requestParameters: LocationV1CountriesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Country> {
        const response = await this.locationV1CountriesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a new tag to the venue system.
     * Create a new venue tag
     */
    async locationV1VenueTagsCreateRaw(requestParameters: LocationV1VenueTagsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueTag>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1VenueTagsCreate().'
            );
        }

        if (requestParameters['venueTag'] == null) {
            throw new runtime.RequiredError(
                'venueTag',
                'Required parameter "venueTag" was null or undefined when calling locationV1VenueTagsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/location/v1/venue-tags/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VenueTagToJSON(requestParameters['venueTag']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueTagFromJSON(jsonValue));
    }

    /**
     * Add a new tag to the venue system.
     * Create a new venue tag
     */
    async locationV1VenueTagsCreate(requestParameters: LocationV1VenueTagsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueTag> {
        const response = await this.locationV1VenueTagsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a venue tag from the system by its ID.
     * Delete a venue tag
     */
    async locationV1VenueTagsDestroyRaw(requestParameters: LocationV1VenueTagsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1VenueTagsDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1VenueTagsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/location/v1/venue-tags/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a venue tag from the system by its ID.
     * Delete a venue tag
     */
    async locationV1VenueTagsDestroy(requestParameters: LocationV1VenueTagsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.locationV1VenueTagsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a list of all tags associated with venues.
     * List all venue tags
     */
    async locationV1VenueTagsListRaw(requestParameters: LocationV1VenueTagsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedVenueTagList>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1VenueTagsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/location/v1/venue-tags/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedVenueTagListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all tags associated with venues.
     * List all venue tags
     */
    async locationV1VenueTagsList(requestParameters: LocationV1VenueTagsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedVenueTagList> {
        const response = await this.locationV1VenueTagsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update specific fields of an existing venue tag without affecting others.
     * Partially update a venue tag
     */
    async locationV1VenueTagsPartialUpdateRaw(requestParameters: LocationV1VenueTagsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueTag>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1VenueTagsPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1VenueTagsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/location/v1/venue-tags/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedVenueTagToJSON(requestParameters['patchedVenueTag']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueTagFromJSON(jsonValue));
    }

    /**
     * Update specific fields of an existing venue tag without affecting others.
     * Partially update a venue tag
     */
    async locationV1VenueTagsPartialUpdate(requestParameters: LocationV1VenueTagsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueTag> {
        const response = await this.locationV1VenueTagsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed information about a specific venue tag by its ID.
     * Retrieve a specific venue tag
     */
    async locationV1VenueTagsRetrieveRaw(requestParameters: LocationV1VenueTagsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueTag>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1VenueTagsRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1VenueTagsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/location/v1/venue-tags/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueTagFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a specific venue tag by its ID.
     * Retrieve a specific venue tag
     */
    async locationV1VenueTagsRetrieve(requestParameters: LocationV1VenueTagsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueTag> {
        const response = await this.locationV1VenueTagsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify the details of an existing venue tag by its ID.
     * Update an existing venue tag
     */
    async locationV1VenueTagsUpdateRaw(requestParameters: LocationV1VenueTagsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueTag>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1VenueTagsUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1VenueTagsUpdate().'
            );
        }

        if (requestParameters['venueTag'] == null) {
            throw new runtime.RequiredError(
                'venueTag',
                'Required parameter "venueTag" was null or undefined when calling locationV1VenueTagsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/location/v1/venue-tags/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: VenueTagToJSON(requestParameters['venueTag']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueTagFromJSON(jsonValue));
    }

    /**
     * Modify the details of an existing venue tag by its ID.
     * Update an existing venue tag
     */
    async locationV1VenueTagsUpdate(requestParameters: LocationV1VenueTagsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueTag> {
        const response = await this.locationV1VenueTagsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a new seating capacity for a specific venue.
     * Create a new venue capacity
     */
    async locationV1VenuesCapacitiesCreateRaw(requestParameters: LocationV1VenuesCapacitiesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueCapacity>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1VenuesCapacitiesCreate().'
            );
        }

        if (requestParameters['venueId'] == null) {
            throw new runtime.RequiredError(
                'venueId',
                'Required parameter "venueId" was null or undefined when calling locationV1VenuesCapacitiesCreate().'
            );
        }

        if (requestParameters['venueCapacity'] == null) {
            throw new runtime.RequiredError(
                'venueCapacity',
                'Required parameter "venueCapacity" was null or undefined when calling locationV1VenuesCapacitiesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/location/v1/venues/{venue_id}/capacities/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));
        urlPath = urlPath.replace(`{${"venue_id"}}`, encodeURIComponent(String(requestParameters['venueId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VenueCapacityToJSON(requestParameters['venueCapacity']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueCapacityFromJSON(jsonValue));
    }

    /**
     * Add a new seating capacity for a specific venue.
     * Create a new venue capacity
     */
    async locationV1VenuesCapacitiesCreate(requestParameters: LocationV1VenuesCapacitiesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueCapacity> {
        const response = await this.locationV1VenuesCapacitiesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a venue capacity from the system by its ID.
     * Delete a venue capacity
     */
    async locationV1VenuesCapacitiesDestroyRaw(requestParameters: LocationV1VenuesCapacitiesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1VenuesCapacitiesDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1VenuesCapacitiesDestroy().'
            );
        }

        if (requestParameters['venueId'] == null) {
            throw new runtime.RequiredError(
                'venueId',
                'Required parameter "venueId" was null or undefined when calling locationV1VenuesCapacitiesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/location/v1/venues/{venue_id}/capacities/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));
        urlPath = urlPath.replace(`{${"venue_id"}}`, encodeURIComponent(String(requestParameters['venueId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a venue capacity from the system by its ID.
     * Delete a venue capacity
     */
    async locationV1VenuesCapacitiesDestroy(requestParameters: LocationV1VenuesCapacitiesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.locationV1VenuesCapacitiesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a list of all seating capacities for a venue.
     * List all venue capacities
     */
    async locationV1VenuesCapacitiesListRaw(requestParameters: LocationV1VenuesCapacitiesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedVenueCapacityList>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1VenuesCapacitiesList().'
            );
        }

        if (requestParameters['venueId'] == null) {
            throw new runtime.RequiredError(
                'venueId',
                'Required parameter "venueId" was null or undefined when calling locationV1VenuesCapacitiesList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/location/v1/venues/{venue_id}/capacities/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));
        urlPath = urlPath.replace(`{${"venue_id"}}`, encodeURIComponent(String(requestParameters['venueId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedVenueCapacityListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all seating capacities for a venue.
     * List all venue capacities
     */
    async locationV1VenuesCapacitiesList(requestParameters: LocationV1VenuesCapacitiesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedVenueCapacityList> {
        const response = await this.locationV1VenuesCapacitiesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update specific fields of an existing venue capacity without affecting others.
     * Partially update a venue capacity
     */
    async locationV1VenuesCapacitiesPartialUpdateRaw(requestParameters: LocationV1VenuesCapacitiesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueCapacity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1VenuesCapacitiesPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1VenuesCapacitiesPartialUpdate().'
            );
        }

        if (requestParameters['venueId'] == null) {
            throw new runtime.RequiredError(
                'venueId',
                'Required parameter "venueId" was null or undefined when calling locationV1VenuesCapacitiesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/location/v1/venues/{venue_id}/capacities/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));
        urlPath = urlPath.replace(`{${"venue_id"}}`, encodeURIComponent(String(requestParameters['venueId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedVenueCapacityToJSON(requestParameters['patchedVenueCapacity']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueCapacityFromJSON(jsonValue));
    }

    /**
     * Update specific fields of an existing venue capacity without affecting others.
     * Partially update a venue capacity
     */
    async locationV1VenuesCapacitiesPartialUpdate(requestParameters: LocationV1VenuesCapacitiesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueCapacity> {
        const response = await this.locationV1VenuesCapacitiesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed information about a specific venue capacity by its ID.
     * Retrieve a specific venue capacity
     */
    async locationV1VenuesCapacitiesRetrieveRaw(requestParameters: LocationV1VenuesCapacitiesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueCapacity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1VenuesCapacitiesRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1VenuesCapacitiesRetrieve().'
            );
        }

        if (requestParameters['venueId'] == null) {
            throw new runtime.RequiredError(
                'venueId',
                'Required parameter "venueId" was null or undefined when calling locationV1VenuesCapacitiesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/location/v1/venues/{venue_id}/capacities/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));
        urlPath = urlPath.replace(`{${"venue_id"}}`, encodeURIComponent(String(requestParameters['venueId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueCapacityFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a specific venue capacity by its ID.
     * Retrieve a specific venue capacity
     */
    async locationV1VenuesCapacitiesRetrieve(requestParameters: LocationV1VenuesCapacitiesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueCapacity> {
        const response = await this.locationV1VenuesCapacitiesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify the details of an existing venue capacity by its ID.
     * Update an existing venue capacity
     */
    async locationV1VenuesCapacitiesUpdateRaw(requestParameters: LocationV1VenuesCapacitiesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueCapacity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1VenuesCapacitiesUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1VenuesCapacitiesUpdate().'
            );
        }

        if (requestParameters['venueId'] == null) {
            throw new runtime.RequiredError(
                'venueId',
                'Required parameter "venueId" was null or undefined when calling locationV1VenuesCapacitiesUpdate().'
            );
        }

        if (requestParameters['venueCapacity'] == null) {
            throw new runtime.RequiredError(
                'venueCapacity',
                'Required parameter "venueCapacity" was null or undefined when calling locationV1VenuesCapacitiesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/location/v1/venues/{venue_id}/capacities/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));
        urlPath = urlPath.replace(`{${"venue_id"}}`, encodeURIComponent(String(requestParameters['venueId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: VenueCapacityToJSON(requestParameters['venueCapacity']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueCapacityFromJSON(jsonValue));
    }

    /**
     * Modify the details of an existing venue capacity by its ID.
     * Update an existing venue capacity
     */
    async locationV1VenuesCapacitiesUpdate(requestParameters: LocationV1VenuesCapacitiesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueCapacity> {
        const response = await this.locationV1VenuesCapacitiesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a new venue to the system.
     * Create a new venue
     */
    async locationV1VenuesCreateRaw(requestParameters: LocationV1VenuesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Venue>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1VenuesCreate().'
            );
        }

        if (requestParameters['venue'] == null) {
            throw new runtime.RequiredError(
                'venue',
                'Required parameter "venue" was null or undefined when calling locationV1VenuesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/location/v1/venues/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VenueToJSON(requestParameters['venue']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueFromJSON(jsonValue));
    }

    /**
     * Add a new venue to the system.
     * Create a new venue
     */
    async locationV1VenuesCreate(requestParameters: LocationV1VenuesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Venue> {
        const response = await this.locationV1VenuesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a venue from the system by its ID.
     * Delete a venue
     */
    async locationV1VenuesDestroyRaw(requestParameters: LocationV1VenuesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1VenuesDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1VenuesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/location/v1/venues/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a venue from the system by its ID.
     * Delete a venue
     */
    async locationV1VenuesDestroy(requestParameters: LocationV1VenuesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.locationV1VenuesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a list of all venues in the system.
     * List all venues
     */
    async locationV1VenuesListRaw(requestParameters: LocationV1VenuesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedVenueList>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1VenuesList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/location/v1/venues/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedVenueListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all venues in the system.
     * List all venues
     */
    async locationV1VenuesList(requestParameters: LocationV1VenuesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedVenueList> {
        const response = await this.locationV1VenuesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update specific fields of an existing venue without affecting others.
     * Partially update a venue
     */
    async locationV1VenuesPartialUpdateRaw(requestParameters: LocationV1VenuesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Venue>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1VenuesPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1VenuesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/location/v1/venues/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedVenueToJSON(requestParameters['patchedVenue']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueFromJSON(jsonValue));
    }

    /**
     * Update specific fields of an existing venue without affecting others.
     * Partially update a venue
     */
    async locationV1VenuesPartialUpdate(requestParameters: LocationV1VenuesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Venue> {
        const response = await this.locationV1VenuesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed information about a specific venue by its ID.
     * Retrieve a specific venue
     */
    async locationV1VenuesRetrieveRaw(requestParameters: LocationV1VenuesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Venue>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1VenuesRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1VenuesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/location/v1/venues/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a specific venue by its ID.
     * Retrieve a specific venue
     */
    async locationV1VenuesRetrieve(requestParameters: LocationV1VenuesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Venue> {
        const response = await this.locationV1VenuesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assign a new tag to a specific venue.
     * Create a new tag assignment for a venue
     */
    async locationV1VenuesTagsCreateRaw(requestParameters: LocationV1VenuesTagsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueTagAssignment>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1VenuesTagsCreate().'
            );
        }

        if (requestParameters['venueId'] == null) {
            throw new runtime.RequiredError(
                'venueId',
                'Required parameter "venueId" was null or undefined when calling locationV1VenuesTagsCreate().'
            );
        }

        if (requestParameters['venueTagAssignment'] == null) {
            throw new runtime.RequiredError(
                'venueTagAssignment',
                'Required parameter "venueTagAssignment" was null or undefined when calling locationV1VenuesTagsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/location/v1/venues/{venue_id}/tags/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));
        urlPath = urlPath.replace(`{${"venue_id"}}`, encodeURIComponent(String(requestParameters['venueId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VenueTagAssignmentToJSON(requestParameters['venueTagAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueTagAssignmentFromJSON(jsonValue));
    }

    /**
     * Assign a new tag to a specific venue.
     * Create a new tag assignment for a venue
     */
    async locationV1VenuesTagsCreate(requestParameters: LocationV1VenuesTagsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueTagAssignment> {
        const response = await this.locationV1VenuesTagsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a tag assignment from the system by its ID.
     * Delete a tag assignment
     */
    async locationV1VenuesTagsDestroyRaw(requestParameters: LocationV1VenuesTagsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1VenuesTagsDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1VenuesTagsDestroy().'
            );
        }

        if (requestParameters['venueId'] == null) {
            throw new runtime.RequiredError(
                'venueId',
                'Required parameter "venueId" was null or undefined when calling locationV1VenuesTagsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/location/v1/venues/{venue_id}/tags/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));
        urlPath = urlPath.replace(`{${"venue_id"}}`, encodeURIComponent(String(requestParameters['venueId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a tag assignment from the system by its ID.
     * Delete a tag assignment
     */
    async locationV1VenuesTagsDestroy(requestParameters: LocationV1VenuesTagsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.locationV1VenuesTagsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a list of all tags assigned to a specific venue.
     * List all tag assignments for a venue
     */
    async locationV1VenuesTagsListRaw(requestParameters: LocationV1VenuesTagsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedVenueTagAssignmentList>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1VenuesTagsList().'
            );
        }

        if (requestParameters['venueId'] == null) {
            throw new runtime.RequiredError(
                'venueId',
                'Required parameter "venueId" was null or undefined when calling locationV1VenuesTagsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/location/v1/venues/{venue_id}/tags/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));
        urlPath = urlPath.replace(`{${"venue_id"}}`, encodeURIComponent(String(requestParameters['venueId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedVenueTagAssignmentListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all tags assigned to a specific venue.
     * List all tag assignments for a venue
     */
    async locationV1VenuesTagsList(requestParameters: LocationV1VenuesTagsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedVenueTagAssignmentList> {
        const response = await this.locationV1VenuesTagsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update specific fields of an existing tag assignment without affecting others.
     * Partially update a tag assignment
     */
    async locationV1VenuesTagsPartialUpdateRaw(requestParameters: LocationV1VenuesTagsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueTagAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1VenuesTagsPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1VenuesTagsPartialUpdate().'
            );
        }

        if (requestParameters['venueId'] == null) {
            throw new runtime.RequiredError(
                'venueId',
                'Required parameter "venueId" was null or undefined when calling locationV1VenuesTagsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/location/v1/venues/{venue_id}/tags/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));
        urlPath = urlPath.replace(`{${"venue_id"}}`, encodeURIComponent(String(requestParameters['venueId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedVenueTagAssignmentToJSON(requestParameters['patchedVenueTagAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueTagAssignmentFromJSON(jsonValue));
    }

    /**
     * Update specific fields of an existing tag assignment without affecting others.
     * Partially update a tag assignment
     */
    async locationV1VenuesTagsPartialUpdate(requestParameters: LocationV1VenuesTagsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueTagAssignment> {
        const response = await this.locationV1VenuesTagsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed information about a specific tag assignment by its ID.
     * Retrieve a specific tag assignment
     */
    async locationV1VenuesTagsRetrieveRaw(requestParameters: LocationV1VenuesTagsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueTagAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1VenuesTagsRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1VenuesTagsRetrieve().'
            );
        }

        if (requestParameters['venueId'] == null) {
            throw new runtime.RequiredError(
                'venueId',
                'Required parameter "venueId" was null or undefined when calling locationV1VenuesTagsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/location/v1/venues/{venue_id}/tags/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));
        urlPath = urlPath.replace(`{${"venue_id"}}`, encodeURIComponent(String(requestParameters['venueId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueTagAssignmentFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a specific tag assignment by its ID.
     * Retrieve a specific tag assignment
     */
    async locationV1VenuesTagsRetrieve(requestParameters: LocationV1VenuesTagsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueTagAssignment> {
        const response = await this.locationV1VenuesTagsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify the details of an existing tag assignment by its ID.
     * Update an existing tag assignment
     */
    async locationV1VenuesTagsUpdateRaw(requestParameters: LocationV1VenuesTagsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueTagAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1VenuesTagsUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1VenuesTagsUpdate().'
            );
        }

        if (requestParameters['venueId'] == null) {
            throw new runtime.RequiredError(
                'venueId',
                'Required parameter "venueId" was null or undefined when calling locationV1VenuesTagsUpdate().'
            );
        }

        if (requestParameters['venueTagAssignment'] == null) {
            throw new runtime.RequiredError(
                'venueTagAssignment',
                'Required parameter "venueTagAssignment" was null or undefined when calling locationV1VenuesTagsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/location/v1/venues/{venue_id}/tags/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));
        urlPath = urlPath.replace(`{${"venue_id"}}`, encodeURIComponent(String(requestParameters['venueId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: VenueTagAssignmentToJSON(requestParameters['venueTagAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueTagAssignmentFromJSON(jsonValue));
    }

    /**
     * Modify the details of an existing tag assignment by its ID.
     * Update an existing tag assignment
     */
    async locationV1VenuesTagsUpdate(requestParameters: LocationV1VenuesTagsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueTagAssignment> {
        const response = await this.locationV1VenuesTagsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify the details of an existing venue by its ID.
     * Update an existing venue
     */
    async locationV1VenuesUpdateRaw(requestParameters: LocationV1VenuesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Venue>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1VenuesUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling locationV1VenuesUpdate().'
            );
        }

        if (requestParameters['venue'] == null) {
            throw new runtime.RequiredError(
                'venue',
                'Required parameter "venue" was null or undefined when calling locationV1VenuesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/location/v1/venues/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: VenueToJSON(requestParameters['venue']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueFromJSON(jsonValue));
    }

    /**
     * Modify the details of an existing venue by its ID.
     * Update an existing venue
     */
    async locationV1VenuesUpdate(requestParameters: LocationV1VenuesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Venue> {
        const response = await this.locationV1VenuesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
