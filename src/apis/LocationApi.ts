/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.62
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Address,
  Country,
  PaginatedAddressList,
  PaginatedCountryList,
  PaginatedStateList,
  PaginatedVenueCapacityList,
  PaginatedVenueList,
  PaginatedVenueTagAssignmentList,
  PaginatedVenueTagList,
  PatchedAddress,
  PatchedCountry,
  PatchedState,
  PatchedVenue,
  PatchedVenueCapacity,
  PatchedVenueTag,
  PatchedVenueTagAssignment,
  State,
  Venue,
  VenueCapacity,
  VenueTag,
  VenueTagAssignment,
} from '../models/index';
import {
    AddressFromJSON,
    AddressToJSON,
    CountryFromJSON,
    CountryToJSON,
    PaginatedAddressListFromJSON,
    PaginatedAddressListToJSON,
    PaginatedCountryListFromJSON,
    PaginatedCountryListToJSON,
    PaginatedStateListFromJSON,
    PaginatedStateListToJSON,
    PaginatedVenueCapacityListFromJSON,
    PaginatedVenueCapacityListToJSON,
    PaginatedVenueListFromJSON,
    PaginatedVenueListToJSON,
    PaginatedVenueTagAssignmentListFromJSON,
    PaginatedVenueTagAssignmentListToJSON,
    PaginatedVenueTagListFromJSON,
    PaginatedVenueTagListToJSON,
    PatchedAddressFromJSON,
    PatchedAddressToJSON,
    PatchedCountryFromJSON,
    PatchedCountryToJSON,
    PatchedStateFromJSON,
    PatchedStateToJSON,
    PatchedVenueFromJSON,
    PatchedVenueToJSON,
    PatchedVenueCapacityFromJSON,
    PatchedVenueCapacityToJSON,
    PatchedVenueTagFromJSON,
    PatchedVenueTagToJSON,
    PatchedVenueTagAssignmentFromJSON,
    PatchedVenueTagAssignmentToJSON,
    StateFromJSON,
    StateToJSON,
    VenueFromJSON,
    VenueToJSON,
    VenueCapacityFromJSON,
    VenueCapacityToJSON,
    VenueTagFromJSON,
    VenueTagToJSON,
    VenueTagAssignmentFromJSON,
    VenueTagAssignmentToJSON,
} from '../models/index';

export interface LocationV1AddressesCreateRequest {
    address: Omit<Address, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface LocationV1AddressesDestroyRequest {
    id: number;
}

export interface LocationV1AddressesListRequest {
    page?: number;
    pageSize?: number;
}

export interface LocationV1AddressesPartialUpdateRequest {
    id: number;
    patchedAddress?: Omit<PatchedAddress, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface LocationV1AddressesRetrieveRequest {
    id: number;
}

export interface LocationV1AddressesUpdateRequest {
    id: number;
    address: Omit<Address, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface LocationV1CountriesCreateRequest {
    country: Omit<Country, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface LocationV1CountriesDestroyRequest {
    id: number;
}

export interface LocationV1CountriesListRequest {
    page?: number;
    pageSize?: number;
}

export interface LocationV1CountriesPartialUpdateRequest {
    id: number;
    patchedCountry?: Omit<PatchedCountry, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface LocationV1CountriesRetrieveRequest {
    id: number;
}

export interface LocationV1CountriesUpdateRequest {
    id: number;
    country: Omit<Country, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface LocationV1StatesCreateRequest {
    state: Omit<State, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface LocationV1StatesDestroyRequest {
    id: number;
}

export interface LocationV1StatesListRequest {
    page?: number;
    pageSize?: number;
}

export interface LocationV1StatesPartialUpdateRequest {
    id: number;
    patchedState?: Omit<PatchedState, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface LocationV1StatesRetrieveRequest {
    id: number;
}

export interface LocationV1StatesUpdateRequest {
    id: number;
    state: Omit<State, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface LocationV1VenueCapacitiesCreateRequest {
    venueCapacity: Omit<VenueCapacity, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface LocationV1VenueCapacitiesDestroyRequest {
    id: number;
}

export interface LocationV1VenueCapacitiesListRequest {
    page?: number;
    pageSize?: number;
}

export interface LocationV1VenueCapacitiesPartialUpdateRequest {
    id: number;
    patchedVenueCapacity?: Omit<PatchedVenueCapacity, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface LocationV1VenueCapacitiesRetrieveRequest {
    id: number;
}

export interface LocationV1VenueCapacitiesUpdateRequest {
    id: number;
    venueCapacity: Omit<VenueCapacity, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface LocationV1VenueTagAssignmentsCreateRequest {
    venueTagAssignment: Omit<VenueTagAssignment, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface LocationV1VenueTagAssignmentsDestroyRequest {
    id: number;
}

export interface LocationV1VenueTagAssignmentsListRequest {
    page?: number;
    pageSize?: number;
}

export interface LocationV1VenueTagAssignmentsPartialUpdateRequest {
    id: number;
    patchedVenueTagAssignment?: Omit<PatchedVenueTagAssignment, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface LocationV1VenueTagAssignmentsRetrieveRequest {
    id: number;
}

export interface LocationV1VenueTagAssignmentsUpdateRequest {
    id: number;
    venueTagAssignment: Omit<VenueTagAssignment, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface LocationV1VenueTagsCreateRequest {
    venueTag: Omit<VenueTag, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface LocationV1VenueTagsDestroyRequest {
    id: number;
}

export interface LocationV1VenueTagsListRequest {
    page?: number;
    pageSize?: number;
}

export interface LocationV1VenueTagsPartialUpdateRequest {
    id: number;
    patchedVenueTag?: Omit<PatchedVenueTag, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface LocationV1VenueTagsRetrieveRequest {
    id: number;
}

export interface LocationV1VenueTagsUpdateRequest {
    id: number;
    venueTag: Omit<VenueTag, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface LocationV1VenuesCreateRequest {
    venue: Omit<Venue, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface LocationV1VenuesDestroyRequest {
    id: number;
}

export interface LocationV1VenuesListRequest {
    page?: number;
    pageSize?: number;
}

export interface LocationV1VenuesPartialUpdateRequest {
    id: number;
    patchedVenue?: Omit<PatchedVenue, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface LocationV1VenuesRetrieveRequest {
    id: number;
}

export interface LocationV1VenuesUpdateRequest {
    id: number;
    venue: Omit<Venue, 'id'|'created_at'|'updated_at'|'created_by'>;
}

/**
 * 
 */
export class LocationApi extends runtime.BaseAPI {

    /**
     */
    async locationV1AddressesCreateRaw(requestParameters: LocationV1AddressesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Address>> {
        if (requestParameters['address'] == null) {
            throw new runtime.RequiredError(
                'address',
                'Required parameter "address" was null or undefined when calling locationV1AddressesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/location/v1/addresses/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddressToJSON(requestParameters['address']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressFromJSON(jsonValue));
    }

    /**
     */
    async locationV1AddressesCreate(requestParameters: LocationV1AddressesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Address> {
        const response = await this.locationV1AddressesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async locationV1AddressesDestroyRaw(requestParameters: LocationV1AddressesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1AddressesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/location/v1/addresses/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async locationV1AddressesDestroy(requestParameters: LocationV1AddressesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.locationV1AddressesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async locationV1AddressesListRaw(requestParameters: LocationV1AddressesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedAddressList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/location/v1/addresses/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedAddressListFromJSON(jsonValue));
    }

    /**
     */
    async locationV1AddressesList(requestParameters: LocationV1AddressesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedAddressList> {
        const response = await this.locationV1AddressesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async locationV1AddressesPartialUpdateRaw(requestParameters: LocationV1AddressesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Address>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1AddressesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/location/v1/addresses/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedAddressToJSON(requestParameters['patchedAddress']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressFromJSON(jsonValue));
    }

    /**
     */
    async locationV1AddressesPartialUpdate(requestParameters: LocationV1AddressesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Address> {
        const response = await this.locationV1AddressesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async locationV1AddressesRetrieveRaw(requestParameters: LocationV1AddressesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Address>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1AddressesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/location/v1/addresses/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressFromJSON(jsonValue));
    }

    /**
     */
    async locationV1AddressesRetrieve(requestParameters: LocationV1AddressesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Address> {
        const response = await this.locationV1AddressesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async locationV1AddressesUpdateRaw(requestParameters: LocationV1AddressesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Address>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1AddressesUpdate().'
            );
        }

        if (requestParameters['address'] == null) {
            throw new runtime.RequiredError(
                'address',
                'Required parameter "address" was null or undefined when calling locationV1AddressesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/location/v1/addresses/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AddressToJSON(requestParameters['address']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressFromJSON(jsonValue));
    }

    /**
     */
    async locationV1AddressesUpdate(requestParameters: LocationV1AddressesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Address> {
        const response = await this.locationV1AddressesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async locationV1CountriesCreateRaw(requestParameters: LocationV1CountriesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Country>> {
        if (requestParameters['country'] == null) {
            throw new runtime.RequiredError(
                'country',
                'Required parameter "country" was null or undefined when calling locationV1CountriesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/location/v1/countries/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CountryToJSON(requestParameters['country']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountryFromJSON(jsonValue));
    }

    /**
     */
    async locationV1CountriesCreate(requestParameters: LocationV1CountriesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Country> {
        const response = await this.locationV1CountriesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async locationV1CountriesDestroyRaw(requestParameters: LocationV1CountriesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1CountriesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/location/v1/countries/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async locationV1CountriesDestroy(requestParameters: LocationV1CountriesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.locationV1CountriesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async locationV1CountriesListRaw(requestParameters: LocationV1CountriesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedCountryList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/location/v1/countries/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedCountryListFromJSON(jsonValue));
    }

    /**
     */
    async locationV1CountriesList(requestParameters: LocationV1CountriesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedCountryList> {
        const response = await this.locationV1CountriesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async locationV1CountriesPartialUpdateRaw(requestParameters: LocationV1CountriesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Country>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1CountriesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/location/v1/countries/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedCountryToJSON(requestParameters['patchedCountry']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountryFromJSON(jsonValue));
    }

    /**
     */
    async locationV1CountriesPartialUpdate(requestParameters: LocationV1CountriesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Country> {
        const response = await this.locationV1CountriesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async locationV1CountriesRetrieveRaw(requestParameters: LocationV1CountriesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Country>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1CountriesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/location/v1/countries/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountryFromJSON(jsonValue));
    }

    /**
     */
    async locationV1CountriesRetrieve(requestParameters: LocationV1CountriesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Country> {
        const response = await this.locationV1CountriesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async locationV1CountriesUpdateRaw(requestParameters: LocationV1CountriesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Country>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1CountriesUpdate().'
            );
        }

        if (requestParameters['country'] == null) {
            throw new runtime.RequiredError(
                'country',
                'Required parameter "country" was null or undefined when calling locationV1CountriesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/location/v1/countries/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CountryToJSON(requestParameters['country']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountryFromJSON(jsonValue));
    }

    /**
     */
    async locationV1CountriesUpdate(requestParameters: LocationV1CountriesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Country> {
        const response = await this.locationV1CountriesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async locationV1StatesCreateRaw(requestParameters: LocationV1StatesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<State>> {
        if (requestParameters['state'] == null) {
            throw new runtime.RequiredError(
                'state',
                'Required parameter "state" was null or undefined when calling locationV1StatesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/location/v1/states/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StateToJSON(requestParameters['state']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateFromJSON(jsonValue));
    }

    /**
     */
    async locationV1StatesCreate(requestParameters: LocationV1StatesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<State> {
        const response = await this.locationV1StatesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async locationV1StatesDestroyRaw(requestParameters: LocationV1StatesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1StatesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/location/v1/states/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async locationV1StatesDestroy(requestParameters: LocationV1StatesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.locationV1StatesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async locationV1StatesListRaw(requestParameters: LocationV1StatesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedStateList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/location/v1/states/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedStateListFromJSON(jsonValue));
    }

    /**
     */
    async locationV1StatesList(requestParameters: LocationV1StatesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedStateList> {
        const response = await this.locationV1StatesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async locationV1StatesPartialUpdateRaw(requestParameters: LocationV1StatesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<State>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1StatesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/location/v1/states/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedStateToJSON(requestParameters['patchedState']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateFromJSON(jsonValue));
    }

    /**
     */
    async locationV1StatesPartialUpdate(requestParameters: LocationV1StatesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<State> {
        const response = await this.locationV1StatesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async locationV1StatesRetrieveRaw(requestParameters: LocationV1StatesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<State>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1StatesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/location/v1/states/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateFromJSON(jsonValue));
    }

    /**
     */
    async locationV1StatesRetrieve(requestParameters: LocationV1StatesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<State> {
        const response = await this.locationV1StatesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async locationV1StatesUpdateRaw(requestParameters: LocationV1StatesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<State>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1StatesUpdate().'
            );
        }

        if (requestParameters['state'] == null) {
            throw new runtime.RequiredError(
                'state',
                'Required parameter "state" was null or undefined when calling locationV1StatesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/location/v1/states/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StateToJSON(requestParameters['state']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateFromJSON(jsonValue));
    }

    /**
     */
    async locationV1StatesUpdate(requestParameters: LocationV1StatesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<State> {
        const response = await this.locationV1StatesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async locationV1VenueCapacitiesCreateRaw(requestParameters: LocationV1VenueCapacitiesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueCapacity>> {
        if (requestParameters['venueCapacity'] == null) {
            throw new runtime.RequiredError(
                'venueCapacity',
                'Required parameter "venueCapacity" was null or undefined when calling locationV1VenueCapacitiesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/location/v1/venue-capacities/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VenueCapacityToJSON(requestParameters['venueCapacity']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueCapacityFromJSON(jsonValue));
    }

    /**
     */
    async locationV1VenueCapacitiesCreate(requestParameters: LocationV1VenueCapacitiesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueCapacity> {
        const response = await this.locationV1VenueCapacitiesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async locationV1VenueCapacitiesDestroyRaw(requestParameters: LocationV1VenueCapacitiesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1VenueCapacitiesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/location/v1/venue-capacities/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async locationV1VenueCapacitiesDestroy(requestParameters: LocationV1VenueCapacitiesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.locationV1VenueCapacitiesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async locationV1VenueCapacitiesListRaw(requestParameters: LocationV1VenueCapacitiesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedVenueCapacityList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/location/v1/venue-capacities/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedVenueCapacityListFromJSON(jsonValue));
    }

    /**
     */
    async locationV1VenueCapacitiesList(requestParameters: LocationV1VenueCapacitiesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedVenueCapacityList> {
        const response = await this.locationV1VenueCapacitiesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async locationV1VenueCapacitiesPartialUpdateRaw(requestParameters: LocationV1VenueCapacitiesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueCapacity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1VenueCapacitiesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/location/v1/venue-capacities/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedVenueCapacityToJSON(requestParameters['patchedVenueCapacity']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueCapacityFromJSON(jsonValue));
    }

    /**
     */
    async locationV1VenueCapacitiesPartialUpdate(requestParameters: LocationV1VenueCapacitiesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueCapacity> {
        const response = await this.locationV1VenueCapacitiesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async locationV1VenueCapacitiesRetrieveRaw(requestParameters: LocationV1VenueCapacitiesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueCapacity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1VenueCapacitiesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/location/v1/venue-capacities/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueCapacityFromJSON(jsonValue));
    }

    /**
     */
    async locationV1VenueCapacitiesRetrieve(requestParameters: LocationV1VenueCapacitiesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueCapacity> {
        const response = await this.locationV1VenueCapacitiesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async locationV1VenueCapacitiesUpdateRaw(requestParameters: LocationV1VenueCapacitiesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueCapacity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1VenueCapacitiesUpdate().'
            );
        }

        if (requestParameters['venueCapacity'] == null) {
            throw new runtime.RequiredError(
                'venueCapacity',
                'Required parameter "venueCapacity" was null or undefined when calling locationV1VenueCapacitiesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/location/v1/venue-capacities/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: VenueCapacityToJSON(requestParameters['venueCapacity']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueCapacityFromJSON(jsonValue));
    }

    /**
     */
    async locationV1VenueCapacitiesUpdate(requestParameters: LocationV1VenueCapacitiesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueCapacity> {
        const response = await this.locationV1VenueCapacitiesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async locationV1VenueTagAssignmentsCreateRaw(requestParameters: LocationV1VenueTagAssignmentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueTagAssignment>> {
        if (requestParameters['venueTagAssignment'] == null) {
            throw new runtime.RequiredError(
                'venueTagAssignment',
                'Required parameter "venueTagAssignment" was null or undefined when calling locationV1VenueTagAssignmentsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/location/v1/venue-tag-assignments/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VenueTagAssignmentToJSON(requestParameters['venueTagAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueTagAssignmentFromJSON(jsonValue));
    }

    /**
     */
    async locationV1VenueTagAssignmentsCreate(requestParameters: LocationV1VenueTagAssignmentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueTagAssignment> {
        const response = await this.locationV1VenueTagAssignmentsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async locationV1VenueTagAssignmentsDestroyRaw(requestParameters: LocationV1VenueTagAssignmentsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1VenueTagAssignmentsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/location/v1/venue-tag-assignments/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async locationV1VenueTagAssignmentsDestroy(requestParameters: LocationV1VenueTagAssignmentsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.locationV1VenueTagAssignmentsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async locationV1VenueTagAssignmentsListRaw(requestParameters: LocationV1VenueTagAssignmentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedVenueTagAssignmentList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/location/v1/venue-tag-assignments/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedVenueTagAssignmentListFromJSON(jsonValue));
    }

    /**
     */
    async locationV1VenueTagAssignmentsList(requestParameters: LocationV1VenueTagAssignmentsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedVenueTagAssignmentList> {
        const response = await this.locationV1VenueTagAssignmentsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async locationV1VenueTagAssignmentsPartialUpdateRaw(requestParameters: LocationV1VenueTagAssignmentsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueTagAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1VenueTagAssignmentsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/location/v1/venue-tag-assignments/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedVenueTagAssignmentToJSON(requestParameters['patchedVenueTagAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueTagAssignmentFromJSON(jsonValue));
    }

    /**
     */
    async locationV1VenueTagAssignmentsPartialUpdate(requestParameters: LocationV1VenueTagAssignmentsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueTagAssignment> {
        const response = await this.locationV1VenueTagAssignmentsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async locationV1VenueTagAssignmentsRetrieveRaw(requestParameters: LocationV1VenueTagAssignmentsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueTagAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1VenueTagAssignmentsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/location/v1/venue-tag-assignments/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueTagAssignmentFromJSON(jsonValue));
    }

    /**
     */
    async locationV1VenueTagAssignmentsRetrieve(requestParameters: LocationV1VenueTagAssignmentsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueTagAssignment> {
        const response = await this.locationV1VenueTagAssignmentsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async locationV1VenueTagAssignmentsUpdateRaw(requestParameters: LocationV1VenueTagAssignmentsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueTagAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1VenueTagAssignmentsUpdate().'
            );
        }

        if (requestParameters['venueTagAssignment'] == null) {
            throw new runtime.RequiredError(
                'venueTagAssignment',
                'Required parameter "venueTagAssignment" was null or undefined when calling locationV1VenueTagAssignmentsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/location/v1/venue-tag-assignments/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: VenueTagAssignmentToJSON(requestParameters['venueTagAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueTagAssignmentFromJSON(jsonValue));
    }

    /**
     */
    async locationV1VenueTagAssignmentsUpdate(requestParameters: LocationV1VenueTagAssignmentsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueTagAssignment> {
        const response = await this.locationV1VenueTagAssignmentsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async locationV1VenueTagsCreateRaw(requestParameters: LocationV1VenueTagsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueTag>> {
        if (requestParameters['venueTag'] == null) {
            throw new runtime.RequiredError(
                'venueTag',
                'Required parameter "venueTag" was null or undefined when calling locationV1VenueTagsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/location/v1/venue-tags/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VenueTagToJSON(requestParameters['venueTag']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueTagFromJSON(jsonValue));
    }

    /**
     */
    async locationV1VenueTagsCreate(requestParameters: LocationV1VenueTagsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueTag> {
        const response = await this.locationV1VenueTagsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async locationV1VenueTagsDestroyRaw(requestParameters: LocationV1VenueTagsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1VenueTagsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/location/v1/venue-tags/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async locationV1VenueTagsDestroy(requestParameters: LocationV1VenueTagsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.locationV1VenueTagsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async locationV1VenueTagsListRaw(requestParameters: LocationV1VenueTagsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedVenueTagList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/location/v1/venue-tags/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedVenueTagListFromJSON(jsonValue));
    }

    /**
     */
    async locationV1VenueTagsList(requestParameters: LocationV1VenueTagsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedVenueTagList> {
        const response = await this.locationV1VenueTagsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async locationV1VenueTagsPartialUpdateRaw(requestParameters: LocationV1VenueTagsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueTag>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1VenueTagsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/location/v1/venue-tags/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedVenueTagToJSON(requestParameters['patchedVenueTag']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueTagFromJSON(jsonValue));
    }

    /**
     */
    async locationV1VenueTagsPartialUpdate(requestParameters: LocationV1VenueTagsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueTag> {
        const response = await this.locationV1VenueTagsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async locationV1VenueTagsRetrieveRaw(requestParameters: LocationV1VenueTagsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueTag>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1VenueTagsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/location/v1/venue-tags/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueTagFromJSON(jsonValue));
    }

    /**
     */
    async locationV1VenueTagsRetrieve(requestParameters: LocationV1VenueTagsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueTag> {
        const response = await this.locationV1VenueTagsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async locationV1VenueTagsUpdateRaw(requestParameters: LocationV1VenueTagsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueTag>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1VenueTagsUpdate().'
            );
        }

        if (requestParameters['venueTag'] == null) {
            throw new runtime.RequiredError(
                'venueTag',
                'Required parameter "venueTag" was null or undefined when calling locationV1VenueTagsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/location/v1/venue-tags/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: VenueTagToJSON(requestParameters['venueTag']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueTagFromJSON(jsonValue));
    }

    /**
     */
    async locationV1VenueTagsUpdate(requestParameters: LocationV1VenueTagsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueTag> {
        const response = await this.locationV1VenueTagsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async locationV1VenuesCreateRaw(requestParameters: LocationV1VenuesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Venue>> {
        if (requestParameters['venue'] == null) {
            throw new runtime.RequiredError(
                'venue',
                'Required parameter "venue" was null or undefined when calling locationV1VenuesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/location/v1/venues/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VenueToJSON(requestParameters['venue']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueFromJSON(jsonValue));
    }

    /**
     */
    async locationV1VenuesCreate(requestParameters: LocationV1VenuesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Venue> {
        const response = await this.locationV1VenuesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async locationV1VenuesDestroyRaw(requestParameters: LocationV1VenuesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1VenuesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/location/v1/venues/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async locationV1VenuesDestroy(requestParameters: LocationV1VenuesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.locationV1VenuesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async locationV1VenuesListRaw(requestParameters: LocationV1VenuesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedVenueList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/location/v1/venues/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedVenueListFromJSON(jsonValue));
    }

    /**
     */
    async locationV1VenuesList(requestParameters: LocationV1VenuesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedVenueList> {
        const response = await this.locationV1VenuesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async locationV1VenuesPartialUpdateRaw(requestParameters: LocationV1VenuesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Venue>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1VenuesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/location/v1/venues/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedVenueToJSON(requestParameters['patchedVenue']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueFromJSON(jsonValue));
    }

    /**
     */
    async locationV1VenuesPartialUpdate(requestParameters: LocationV1VenuesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Venue> {
        const response = await this.locationV1VenuesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async locationV1VenuesRetrieveRaw(requestParameters: LocationV1VenuesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Venue>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1VenuesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/location/v1/venues/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueFromJSON(jsonValue));
    }

    /**
     */
    async locationV1VenuesRetrieve(requestParameters: LocationV1VenuesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Venue> {
        const response = await this.locationV1VenuesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async locationV1VenuesUpdateRaw(requestParameters: LocationV1VenuesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Venue>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling locationV1VenuesUpdate().'
            );
        }

        if (requestParameters['venue'] == null) {
            throw new runtime.RequiredError(
                'venue',
                'Required parameter "venue" was null or undefined when calling locationV1VenuesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/location/v1/venues/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: VenueToJSON(requestParameters['venue']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueFromJSON(jsonValue));
    }

    /**
     */
    async locationV1VenuesUpdate(requestParameters: LocationV1VenuesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Venue> {
        const response = await this.locationV1VenuesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
