/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.114
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MemberEvents,
  PaginatedUserList,
  PatchedUser,
  SessionStatus,
  User,
} from '../models/index';
import {
    MemberEventsFromJSON,
    MemberEventsToJSON,
    PaginatedUserListFromJSON,
    PaginatedUserListToJSON,
    PatchedUserFromJSON,
    PatchedUserToJSON,
    SessionStatusFromJSON,
    SessionStatusToJSON,
    UserFromJSON,
    UserToJSON,
} from '../models/index';

export interface IdentitySessionStatusRetrieveRequest {
    tenantRef: string;
}

export interface IdentityUsersCreateRequest {
    tenantRef: string;
    user: Omit<User, 'id'>;
}

export interface IdentityUsersDestroyRequest {
    id: number;
    tenantRef: string;
}

export interface IdentityUsersEventsRetrieveRequest {
    id: number;
    tenantRef: string;
    from?: Date;
    to?: Date;
}

export interface IdentityUsersListRequest {
    tenantRef: string;
    email?: string;
    emailIcontains?: string;
    emailIstartswith?: string;
    firstName?: string;
    firstNameIcontains?: string;
    firstNameIstartswith?: string;
    lastName?: string;
    lastNameIcontains?: string;
    lastNameIstartswith?: string;
    page?: number;
    pageSize?: number;
}

export interface IdentityUsersPartialUpdateRequest {
    id: number;
    tenantRef: string;
    patchedUser?: Omit<PatchedUser, 'id'>;
}

export interface IdentityUsersRetrieveRequest {
    id: number;
    tenantRef: string;
}

export interface IdentityUsersUpdateRequest {
    id: number;
    tenantRef: string;
    user: Omit<User, 'id'>;
}

/**
 * 
 */
export class IdentityApi extends runtime.BaseAPI {

    /**
     */
    async identitySessionStatusRetrieveRaw(requestParameters: IdentitySessionStatusRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SessionStatus>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling identitySessionStatusRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/identity/session-status/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SessionStatusFromJSON(jsonValue));
    }

    /**
     */
    async identitySessionStatusRetrieve(requestParameters: IdentitySessionStatusRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SessionStatus> {
        const response = await this.identitySessionStatusRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Base ViewSet for tenant-aware models.  Responsibilities: - Inherit tenant-aware behavior (scoped get_queryset, perform_create sets tenant) - Extend here with cross-cutting defaults common to most apps (e.g., pagination, permissions)
     */
    async identityUsersCreateRaw(requestParameters: IdentityUsersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling identityUsersCreate().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling identityUsersCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/identity/users/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters['user']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Base ViewSet for tenant-aware models.  Responsibilities: - Inherit tenant-aware behavior (scoped get_queryset, perform_create sets tenant) - Extend here with cross-cutting defaults common to most apps (e.g., pagination, permissions)
     */
    async identityUsersCreate(requestParameters: IdentityUsersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.identityUsersCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Base ViewSet for tenant-aware models.  Responsibilities: - Inherit tenant-aware behavior (scoped get_queryset, perform_create sets tenant) - Extend here with cross-cutting defaults common to most apps (e.g., pagination, permissions)
     */
    async identityUsersDestroyRaw(requestParameters: IdentityUsersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling identityUsersDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling identityUsersDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/identity/users/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Base ViewSet for tenant-aware models.  Responsibilities: - Inherit tenant-aware behavior (scoped get_queryset, perform_create sets tenant) - Extend here with cross-cutting defaults common to most apps (e.g., pagination, permissions)
     */
    async identityUsersDestroy(requestParameters: IdentityUsersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.identityUsersDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Aggregate upcoming rehearsals the user is assigned to and performances for productions the user belongs to. Optionally constrain by from/to date-times.
     * Get upcoming events for user
     */
    async identityUsersEventsRetrieveRaw(requestParameters: IdentityUsersEventsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MemberEvents>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling identityUsersEventsRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling identityUsersEventsRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['from'] != null) {
            queryParameters['from'] = (requestParameters['from'] as any).toISOString();
        }

        if (requestParameters['to'] != null) {
            queryParameters['to'] = (requestParameters['to'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/identity/users/{id}/events/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberEventsFromJSON(jsonValue));
    }

    /**
     * Aggregate upcoming rehearsals the user is assigned to and performances for productions the user belongs to. Optionally constrain by from/to date-times.
     * Get upcoming events for user
     */
    async identityUsersEventsRetrieve(requestParameters: IdentityUsersEventsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MemberEvents> {
        const response = await this.identityUsersEventsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Base ViewSet for tenant-aware models.  Responsibilities: - Inherit tenant-aware behavior (scoped get_queryset, perform_create sets tenant) - Extend here with cross-cutting defaults common to most apps (e.g., pagination, permissions)
     */
    async identityUsersListRaw(requestParameters: IdentityUsersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedUserList>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling identityUsersList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['email'] != null) {
            queryParameters['email'] = requestParameters['email'];
        }

        if (requestParameters['emailIcontains'] != null) {
            queryParameters['email__icontains'] = requestParameters['emailIcontains'];
        }

        if (requestParameters['emailIstartswith'] != null) {
            queryParameters['email__istartswith'] = requestParameters['emailIstartswith'];
        }

        if (requestParameters['firstName'] != null) {
            queryParameters['first_name'] = requestParameters['firstName'];
        }

        if (requestParameters['firstNameIcontains'] != null) {
            queryParameters['first_name__icontains'] = requestParameters['firstNameIcontains'];
        }

        if (requestParameters['firstNameIstartswith'] != null) {
            queryParameters['first_name__istartswith'] = requestParameters['firstNameIstartswith'];
        }

        if (requestParameters['lastName'] != null) {
            queryParameters['last_name'] = requestParameters['lastName'];
        }

        if (requestParameters['lastNameIcontains'] != null) {
            queryParameters['last_name__icontains'] = requestParameters['lastNameIcontains'];
        }

        if (requestParameters['lastNameIstartswith'] != null) {
            queryParameters['last_name__istartswith'] = requestParameters['lastNameIstartswith'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/identity/users/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedUserListFromJSON(jsonValue));
    }

    /**
     * Base ViewSet for tenant-aware models.  Responsibilities: - Inherit tenant-aware behavior (scoped get_queryset, perform_create sets tenant) - Extend here with cross-cutting defaults common to most apps (e.g., pagination, permissions)
     */
    async identityUsersList(requestParameters: IdentityUsersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedUserList> {
        const response = await this.identityUsersListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Base ViewSet for tenant-aware models.  Responsibilities: - Inherit tenant-aware behavior (scoped get_queryset, perform_create sets tenant) - Extend here with cross-cutting defaults common to most apps (e.g., pagination, permissions)
     */
    async identityUsersPartialUpdateRaw(requestParameters: IdentityUsersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling identityUsersPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling identityUsersPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/identity/users/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedUserToJSON(requestParameters['patchedUser']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Base ViewSet for tenant-aware models.  Responsibilities: - Inherit tenant-aware behavior (scoped get_queryset, perform_create sets tenant) - Extend here with cross-cutting defaults common to most apps (e.g., pagination, permissions)
     */
    async identityUsersPartialUpdate(requestParameters: IdentityUsersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.identityUsersPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Base ViewSet for tenant-aware models.  Responsibilities: - Inherit tenant-aware behavior (scoped get_queryset, perform_create sets tenant) - Extend here with cross-cutting defaults common to most apps (e.g., pagination, permissions)
     */
    async identityUsersRetrieveRaw(requestParameters: IdentityUsersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling identityUsersRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling identityUsersRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/identity/users/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Base ViewSet for tenant-aware models.  Responsibilities: - Inherit tenant-aware behavior (scoped get_queryset, perform_create sets tenant) - Extend here with cross-cutting defaults common to most apps (e.g., pagination, permissions)
     */
    async identityUsersRetrieve(requestParameters: IdentityUsersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.identityUsersRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Base ViewSet for tenant-aware models.  Responsibilities: - Inherit tenant-aware behavior (scoped get_queryset, perform_create sets tenant) - Extend here with cross-cutting defaults common to most apps (e.g., pagination, permissions)
     */
    async identityUsersUpdateRaw(requestParameters: IdentityUsersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling identityUsersUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling identityUsersUpdate().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling identityUsersUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/identity/users/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters['user']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Base ViewSet for tenant-aware models.  Responsibilities: - Inherit tenant-aware behavior (scoped get_queryset, perform_create sets tenant) - Extend here with cross-cutting defaults common to most apps (e.g., pagination, permissions)
     */
    async identityUsersUpdate(requestParameters: IdentityUsersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.identityUsersUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
