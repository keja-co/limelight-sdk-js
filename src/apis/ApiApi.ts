/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.41
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Address,
  AuditLog,
  Context,
  ContextKey,
  Country,
  Employee,
  EmployeeQualification,
  EmploymentType,
  PaginatedAddressList,
  PaginatedAuditLogList,
  PaginatedContextKeyList,
  PaginatedContextList,
  PaginatedCountryList,
  PaginatedEmployeeList,
  PaginatedEmployeeQualificationList,
  PaginatedEmploymentTypeList,
  PaginatedPerformanceList,
  PaginatedPermissionList,
  PaginatedProductionCategoryAssignmentList,
  PaginatedProductionCategoryList,
  PaginatedProductionList,
  PaginatedProductionMemberList,
  PaginatedProductionRoleAssignmentList,
  PaginatedQualificationList,
  PaginatedRehearsalList,
  PaginatedRehearsalParticipantList,
  PaginatedRoleList,
  PaginatedRolePermissionList,
  PaginatedStateList,
  PaginatedUserList,
  PaginatedUserRoleAssignmentList,
  PaginatedVenueCapacityList,
  PaginatedVenueList,
  PaginatedVenueTagAssignmentList,
  PaginatedVenueTagList,
  PaginatedWorkLocationList,
  PatchedAddress,
  PatchedAuditLog,
  PatchedContext,
  PatchedContextKey,
  PatchedCountry,
  PatchedEmployee,
  PatchedEmployeeQualification,
  PatchedEmploymentType,
  PatchedPerformance,
  PatchedPermission,
  PatchedProduction,
  PatchedProductionCategory,
  PatchedProductionCategoryAssignment,
  PatchedProductionMember,
  PatchedProductionRoleAssignment,
  PatchedQualification,
  PatchedRehearsal,
  PatchedRehearsalParticipant,
  PatchedRole,
  PatchedRolePermission,
  PatchedState,
  PatchedUser,
  PatchedUserRoleAssignment,
  PatchedVenue,
  PatchedVenueCapacity,
  PatchedVenueTag,
  PatchedVenueTagAssignment,
  PatchedWorkLocation,
  Performance,
  Permission,
  Production,
  ProductionCategory,
  ProductionCategoryAssignment,
  ProductionMember,
  ProductionRoleAssignment,
  Qualification,
  Rehearsal,
  RehearsalParticipant,
  Role,
  RolePermission,
  SessionStatus,
  State,
  User,
  UserRoleAssignment,
  Venue,
  VenueCapacity,
  VenueTag,
  VenueTagAssignment,
  WorkLocation,
} from '../models/index';
import {
    AddressFromJSON,
    AddressToJSON,
    AuditLogFromJSON,
    AuditLogToJSON,
    ContextFromJSON,
    ContextToJSON,
    ContextKeyFromJSON,
    ContextKeyToJSON,
    CountryFromJSON,
    CountryToJSON,
    EmployeeFromJSON,
    EmployeeToJSON,
    EmployeeQualificationFromJSON,
    EmployeeQualificationToJSON,
    EmploymentTypeFromJSON,
    EmploymentTypeToJSON,
    PaginatedAddressListFromJSON,
    PaginatedAddressListToJSON,
    PaginatedAuditLogListFromJSON,
    PaginatedAuditLogListToJSON,
    PaginatedContextKeyListFromJSON,
    PaginatedContextKeyListToJSON,
    PaginatedContextListFromJSON,
    PaginatedContextListToJSON,
    PaginatedCountryListFromJSON,
    PaginatedCountryListToJSON,
    PaginatedEmployeeListFromJSON,
    PaginatedEmployeeListToJSON,
    PaginatedEmployeeQualificationListFromJSON,
    PaginatedEmployeeQualificationListToJSON,
    PaginatedEmploymentTypeListFromJSON,
    PaginatedEmploymentTypeListToJSON,
    PaginatedPerformanceListFromJSON,
    PaginatedPerformanceListToJSON,
    PaginatedPermissionListFromJSON,
    PaginatedPermissionListToJSON,
    PaginatedProductionCategoryAssignmentListFromJSON,
    PaginatedProductionCategoryAssignmentListToJSON,
    PaginatedProductionCategoryListFromJSON,
    PaginatedProductionCategoryListToJSON,
    PaginatedProductionListFromJSON,
    PaginatedProductionListToJSON,
    PaginatedProductionMemberListFromJSON,
    PaginatedProductionMemberListToJSON,
    PaginatedProductionRoleAssignmentListFromJSON,
    PaginatedProductionRoleAssignmentListToJSON,
    PaginatedQualificationListFromJSON,
    PaginatedQualificationListToJSON,
    PaginatedRehearsalListFromJSON,
    PaginatedRehearsalListToJSON,
    PaginatedRehearsalParticipantListFromJSON,
    PaginatedRehearsalParticipantListToJSON,
    PaginatedRoleListFromJSON,
    PaginatedRoleListToJSON,
    PaginatedRolePermissionListFromJSON,
    PaginatedRolePermissionListToJSON,
    PaginatedStateListFromJSON,
    PaginatedStateListToJSON,
    PaginatedUserListFromJSON,
    PaginatedUserListToJSON,
    PaginatedUserRoleAssignmentListFromJSON,
    PaginatedUserRoleAssignmentListToJSON,
    PaginatedVenueCapacityListFromJSON,
    PaginatedVenueCapacityListToJSON,
    PaginatedVenueListFromJSON,
    PaginatedVenueListToJSON,
    PaginatedVenueTagAssignmentListFromJSON,
    PaginatedVenueTagAssignmentListToJSON,
    PaginatedVenueTagListFromJSON,
    PaginatedVenueTagListToJSON,
    PaginatedWorkLocationListFromJSON,
    PaginatedWorkLocationListToJSON,
    PatchedAddressFromJSON,
    PatchedAddressToJSON,
    PatchedAuditLogFromJSON,
    PatchedAuditLogToJSON,
    PatchedContextFromJSON,
    PatchedContextToJSON,
    PatchedContextKeyFromJSON,
    PatchedContextKeyToJSON,
    PatchedCountryFromJSON,
    PatchedCountryToJSON,
    PatchedEmployeeFromJSON,
    PatchedEmployeeToJSON,
    PatchedEmployeeQualificationFromJSON,
    PatchedEmployeeQualificationToJSON,
    PatchedEmploymentTypeFromJSON,
    PatchedEmploymentTypeToJSON,
    PatchedPerformanceFromJSON,
    PatchedPerformanceToJSON,
    PatchedPermissionFromJSON,
    PatchedPermissionToJSON,
    PatchedProductionFromJSON,
    PatchedProductionToJSON,
    PatchedProductionCategoryFromJSON,
    PatchedProductionCategoryToJSON,
    PatchedProductionCategoryAssignmentFromJSON,
    PatchedProductionCategoryAssignmentToJSON,
    PatchedProductionMemberFromJSON,
    PatchedProductionMemberToJSON,
    PatchedProductionRoleAssignmentFromJSON,
    PatchedProductionRoleAssignmentToJSON,
    PatchedQualificationFromJSON,
    PatchedQualificationToJSON,
    PatchedRehearsalFromJSON,
    PatchedRehearsalToJSON,
    PatchedRehearsalParticipantFromJSON,
    PatchedRehearsalParticipantToJSON,
    PatchedRoleFromJSON,
    PatchedRoleToJSON,
    PatchedRolePermissionFromJSON,
    PatchedRolePermissionToJSON,
    PatchedStateFromJSON,
    PatchedStateToJSON,
    PatchedUserFromJSON,
    PatchedUserToJSON,
    PatchedUserRoleAssignmentFromJSON,
    PatchedUserRoleAssignmentToJSON,
    PatchedVenueFromJSON,
    PatchedVenueToJSON,
    PatchedVenueCapacityFromJSON,
    PatchedVenueCapacityToJSON,
    PatchedVenueTagFromJSON,
    PatchedVenueTagToJSON,
    PatchedVenueTagAssignmentFromJSON,
    PatchedVenueTagAssignmentToJSON,
    PatchedWorkLocationFromJSON,
    PatchedWorkLocationToJSON,
    PerformanceFromJSON,
    PerformanceToJSON,
    PermissionFromJSON,
    PermissionToJSON,
    ProductionFromJSON,
    ProductionToJSON,
    ProductionCategoryFromJSON,
    ProductionCategoryToJSON,
    ProductionCategoryAssignmentFromJSON,
    ProductionCategoryAssignmentToJSON,
    ProductionMemberFromJSON,
    ProductionMemberToJSON,
    ProductionRoleAssignmentFromJSON,
    ProductionRoleAssignmentToJSON,
    QualificationFromJSON,
    QualificationToJSON,
    RehearsalFromJSON,
    RehearsalToJSON,
    RehearsalParticipantFromJSON,
    RehearsalParticipantToJSON,
    RoleFromJSON,
    RoleToJSON,
    RolePermissionFromJSON,
    RolePermissionToJSON,
    SessionStatusFromJSON,
    SessionStatusToJSON,
    StateFromJSON,
    StateToJSON,
    UserFromJSON,
    UserToJSON,
    UserRoleAssignmentFromJSON,
    UserRoleAssignmentToJSON,
    VenueFromJSON,
    VenueToJSON,
    VenueCapacityFromJSON,
    VenueCapacityToJSON,
    VenueTagFromJSON,
    VenueTagToJSON,
    VenueTagAssignmentFromJSON,
    VenueTagAssignmentToJSON,
    WorkLocationFromJSON,
    WorkLocationToJSON,
} from '../models/index';

export interface ApiComplianceAuditlogsCreateRequest {
    auditLog: Omit<AuditLog, 'id'|'created_at'|'updated_at'|'timestamp'>;
}

export interface ApiComplianceAuditlogsDestroyRequest {
    id: number;
}

export interface ApiComplianceAuditlogsListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiComplianceAuditlogsPartialUpdateRequest {
    id: number;
    patchedAuditLog?: Omit<PatchedAuditLog, 'id'|'created_at'|'updated_at'|'timestamp'>;
}

export interface ApiComplianceAuditlogsRetrieveRequest {
    id: number;
}

export interface ApiComplianceAuditlogsUpdateRequest {
    id: number;
    auditLog: Omit<AuditLog, 'id'|'created_at'|'updated_at'|'timestamp'>;
}

export interface ApiComplianceContextkeysCreateRequest {
    contextKey: Omit<ContextKey, 'id'|'created_at'|'updated_at'>;
}

export interface ApiComplianceContextkeysDestroyRequest {
    id: number;
}

export interface ApiComplianceContextkeysListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiComplianceContextkeysPartialUpdateRequest {
    id: number;
    patchedContextKey?: Omit<PatchedContextKey, 'id'|'created_at'|'updated_at'>;
}

export interface ApiComplianceContextkeysRetrieveRequest {
    id: number;
}

export interface ApiComplianceContextkeysUpdateRequest {
    id: number;
    contextKey: Omit<ContextKey, 'id'|'created_at'|'updated_at'>;
}

export interface ApiComplianceContextsCreateRequest {
    context: Omit<Context, 'id'|'created_at'|'updated_at'>;
}

export interface ApiComplianceContextsDestroyRequest {
    id: number;
}

export interface ApiComplianceContextsListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiComplianceContextsPartialUpdateRequest {
    id: number;
    patchedContext?: Omit<PatchedContext, 'id'|'created_at'|'updated_at'>;
}

export interface ApiComplianceContextsRetrieveRequest {
    id: number;
}

export interface ApiComplianceContextsUpdateRequest {
    id: number;
    context: Omit<Context, 'id'|'created_at'|'updated_at'>;
}

export interface ApiCompliancePermissionsCreateRequest {
    permission: Omit<Permission, 'id'|'created_at'|'updated_at'>;
}

export interface ApiCompliancePermissionsDestroyRequest {
    id: number;
}

export interface ApiCompliancePermissionsListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiCompliancePermissionsPartialUpdateRequest {
    id: number;
    patchedPermission?: Omit<PatchedPermission, 'id'|'created_at'|'updated_at'>;
}

export interface ApiCompliancePermissionsRetrieveRequest {
    id: number;
}

export interface ApiCompliancePermissionsUpdateRequest {
    id: number;
    permission: Omit<Permission, 'id'|'created_at'|'updated_at'>;
}

export interface ApiComplianceRolepermissionsCreateRequest {
    rolePermission: Omit<RolePermission, 'id'|'created_at'|'updated_at'>;
}

export interface ApiComplianceRolepermissionsDestroyRequest {
    id: number;
}

export interface ApiComplianceRolepermissionsListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiComplianceRolepermissionsPartialUpdateRequest {
    id: number;
    patchedRolePermission?: Omit<PatchedRolePermission, 'id'|'created_at'|'updated_at'>;
}

export interface ApiComplianceRolepermissionsRetrieveRequest {
    id: number;
}

export interface ApiComplianceRolepermissionsUpdateRequest {
    id: number;
    rolePermission: Omit<RolePermission, 'id'|'created_at'|'updated_at'>;
}

export interface ApiComplianceRolesCreateRequest {
    role: Omit<Role, 'id'|'created_at'|'updated_at'>;
}

export interface ApiComplianceRolesDestroyRequest {
    id: number;
}

export interface ApiComplianceRolesListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiComplianceRolesPartialUpdateRequest {
    id: number;
    patchedRole?: Omit<PatchedRole, 'id'|'created_at'|'updated_at'>;
}

export interface ApiComplianceRolesRetrieveRequest {
    id: number;
}

export interface ApiComplianceRolesUpdateRequest {
    id: number;
    role: Omit<Role, 'id'|'created_at'|'updated_at'>;
}

export interface ApiComplianceUserroleassignmentsCreateRequest {
    userRoleAssignment: Omit<UserRoleAssignment, 'id'|'created_at'|'updated_at'>;
}

export interface ApiComplianceUserroleassignmentsDestroyRequest {
    id: number;
}

export interface ApiComplianceUserroleassignmentsListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiComplianceUserroleassignmentsPartialUpdateRequest {
    id: number;
    patchedUserRoleAssignment?: Omit<PatchedUserRoleAssignment, 'id'|'created_at'|'updated_at'>;
}

export interface ApiComplianceUserroleassignmentsRetrieveRequest {
    id: number;
}

export interface ApiComplianceUserroleassignmentsUpdateRequest {
    id: number;
    userRoleAssignment: Omit<UserRoleAssignment, 'id'|'created_at'|'updated_at'>;
}

export interface ApiHrEmployeeQualificationsCreateRequest {
    employeeQualification: Omit<EmployeeQualification, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiHrEmployeeQualificationsDestroyRequest {
    id: number;
}

export interface ApiHrEmployeeQualificationsListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiHrEmployeeQualificationsPartialUpdateRequest {
    id: number;
    patchedEmployeeQualification?: Omit<PatchedEmployeeQualification, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiHrEmployeeQualificationsRetrieveRequest {
    id: number;
}

export interface ApiHrEmployeeQualificationsUpdateRequest {
    id: number;
    employeeQualification: Omit<EmployeeQualification, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiHrEmployeesCreateRequest {
    employee: Omit<Employee, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiHrEmployeesDestroyRequest {
    id: number;
}

export interface ApiHrEmployeesListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiHrEmployeesPartialUpdateRequest {
    id: number;
    patchedEmployee?: Omit<PatchedEmployee, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiHrEmployeesRetrieveRequest {
    id: number;
}

export interface ApiHrEmployeesUpdateRequest {
    id: number;
    employee: Omit<Employee, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiHrEmploymentTypesCreateRequest {
    employmentType: Omit<EmploymentType, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiHrEmploymentTypesDestroyRequest {
    id: number;
}

export interface ApiHrEmploymentTypesListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiHrEmploymentTypesPartialUpdateRequest {
    id: number;
    patchedEmploymentType?: Omit<PatchedEmploymentType, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiHrEmploymentTypesRetrieveRequest {
    id: number;
}

export interface ApiHrEmploymentTypesUpdateRequest {
    id: number;
    employmentType: Omit<EmploymentType, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiHrQualificationsCreateRequest {
    qualification: Omit<Qualification, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiHrQualificationsDestroyRequest {
    id: number;
}

export interface ApiHrQualificationsListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiHrQualificationsPartialUpdateRequest {
    id: number;
    patchedQualification?: Omit<PatchedQualification, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiHrQualificationsRetrieveRequest {
    id: number;
}

export interface ApiHrQualificationsUpdateRequest {
    id: number;
    qualification: Omit<Qualification, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiHrWorkLocationsCreateRequest {
    workLocation: Omit<WorkLocation, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiHrWorkLocationsDestroyRequest {
    id: number;
}

export interface ApiHrWorkLocationsListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiHrWorkLocationsPartialUpdateRequest {
    id: number;
    patchedWorkLocation?: Omit<PatchedWorkLocation, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiHrWorkLocationsRetrieveRequest {
    id: number;
}

export interface ApiHrWorkLocationsUpdateRequest {
    id: number;
    workLocation: Omit<WorkLocation, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiIdentityUsersCreateRequest {
    user: Omit<User, 'id'>;
}

export interface ApiIdentityUsersDestroyRequest {
    id: number;
}

export interface ApiIdentityUsersListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiIdentityUsersPartialUpdateRequest {
    id: number;
    patchedUser?: Omit<PatchedUser, 'id'>;
}

export interface ApiIdentityUsersRetrieveRequest {
    id: number;
}

export interface ApiIdentityUsersUpdateRequest {
    id: number;
    user: Omit<User, 'id'>;
}

export interface ApiLocationV1AddressesCreateRequest {
    address: Omit<Address, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiLocationV1AddressesDestroyRequest {
    id: number;
}

export interface ApiLocationV1AddressesListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiLocationV1AddressesPartialUpdateRequest {
    id: number;
    patchedAddress?: Omit<PatchedAddress, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiLocationV1AddressesRetrieveRequest {
    id: number;
}

export interface ApiLocationV1AddressesUpdateRequest {
    id: number;
    address: Omit<Address, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiLocationV1CountriesCreateRequest {
    country: Omit<Country, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiLocationV1CountriesDestroyRequest {
    id: number;
}

export interface ApiLocationV1CountriesListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiLocationV1CountriesPartialUpdateRequest {
    id: number;
    patchedCountry?: Omit<PatchedCountry, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiLocationV1CountriesRetrieveRequest {
    id: number;
}

export interface ApiLocationV1CountriesUpdateRequest {
    id: number;
    country: Omit<Country, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiLocationV1StatesCreateRequest {
    state: Omit<State, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiLocationV1StatesDestroyRequest {
    id: number;
}

export interface ApiLocationV1StatesListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiLocationV1StatesPartialUpdateRequest {
    id: number;
    patchedState?: Omit<PatchedState, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiLocationV1StatesRetrieveRequest {
    id: number;
}

export interface ApiLocationV1StatesUpdateRequest {
    id: number;
    state: Omit<State, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiLocationV1VenueCapacitiesCreateRequest {
    venueCapacity: Omit<VenueCapacity, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiLocationV1VenueCapacitiesDestroyRequest {
    id: number;
}

export interface ApiLocationV1VenueCapacitiesListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiLocationV1VenueCapacitiesPartialUpdateRequest {
    id: number;
    patchedVenueCapacity?: Omit<PatchedVenueCapacity, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiLocationV1VenueCapacitiesRetrieveRequest {
    id: number;
}

export interface ApiLocationV1VenueCapacitiesUpdateRequest {
    id: number;
    venueCapacity: Omit<VenueCapacity, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiLocationV1VenueTagAssignmentsCreateRequest {
    venueTagAssignment: Omit<VenueTagAssignment, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiLocationV1VenueTagAssignmentsDestroyRequest {
    id: number;
}

export interface ApiLocationV1VenueTagAssignmentsListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiLocationV1VenueTagAssignmentsPartialUpdateRequest {
    id: number;
    patchedVenueTagAssignment?: Omit<PatchedVenueTagAssignment, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiLocationV1VenueTagAssignmentsRetrieveRequest {
    id: number;
}

export interface ApiLocationV1VenueTagAssignmentsUpdateRequest {
    id: number;
    venueTagAssignment: Omit<VenueTagAssignment, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiLocationV1VenueTagsCreateRequest {
    venueTag: Omit<VenueTag, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiLocationV1VenueTagsDestroyRequest {
    id: number;
}

export interface ApiLocationV1VenueTagsListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiLocationV1VenueTagsPartialUpdateRequest {
    id: number;
    patchedVenueTag?: Omit<PatchedVenueTag, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiLocationV1VenueTagsRetrieveRequest {
    id: number;
}

export interface ApiLocationV1VenueTagsUpdateRequest {
    id: number;
    venueTag: Omit<VenueTag, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiLocationV1VenuesCreateRequest {
    venue: Omit<Venue, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiLocationV1VenuesDestroyRequest {
    id: number;
}

export interface ApiLocationV1VenuesListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiLocationV1VenuesPartialUpdateRequest {
    id: number;
    patchedVenue?: Omit<PatchedVenue, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiLocationV1VenuesRetrieveRequest {
    id: number;
}

export interface ApiLocationV1VenuesUpdateRequest {
    id: number;
    venue: Omit<Venue, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiProductionV1PerformanceCreateRequest {
    performance: Omit<Performance, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiProductionV1PerformanceDestroyRequest {
    id: number;
}

export interface ApiProductionV1PerformanceListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiProductionV1PerformancePartialUpdateRequest {
    id: number;
    patchedPerformance?: Omit<PatchedPerformance, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiProductionV1PerformanceRetrieveRequest {
    id: number;
}

export interface ApiProductionV1PerformanceUpdateRequest {
    id: number;
    performance: Omit<Performance, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiProductionV1ProdCategoryAssignmentCreateRequest {
    productionCategoryAssignment: Omit<ProductionCategoryAssignment, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiProductionV1ProdCategoryAssignmentDestroyRequest {
    id: number;
}

export interface ApiProductionV1ProdCategoryAssignmentListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiProductionV1ProdCategoryAssignmentPartialUpdateRequest {
    id: number;
    patchedProductionCategoryAssignment?: Omit<PatchedProductionCategoryAssignment, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiProductionV1ProdCategoryAssignmentRetrieveRequest {
    id: number;
}

export interface ApiProductionV1ProdCategoryAssignmentUpdateRequest {
    id: number;
    productionCategoryAssignment: Omit<ProductionCategoryAssignment, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiProductionV1ProdCategoryCreateRequest {
    productionCategory: Omit<ProductionCategory, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiProductionV1ProdCategoryDestroyRequest {
    id: number;
}

export interface ApiProductionV1ProdCategoryListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiProductionV1ProdCategoryPartialUpdateRequest {
    id: number;
    patchedProductionCategory?: Omit<PatchedProductionCategory, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiProductionV1ProdCategoryRetrieveRequest {
    id: number;
}

export interface ApiProductionV1ProdCategoryUpdateRequest {
    id: number;
    productionCategory: Omit<ProductionCategory, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiProductionV1ProdMembersCreateRequest {
    productionMember: Omit<ProductionMember, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiProductionV1ProdMembersDestroyRequest {
    id: number;
}

export interface ApiProductionV1ProdMembersListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiProductionV1ProdMembersPartialUpdateRequest {
    id: number;
    patchedProductionMember?: Omit<PatchedProductionMember, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiProductionV1ProdMembersRetrieveRequest {
    id: number;
}

export interface ApiProductionV1ProdMembersUpdateRequest {
    id: number;
    productionMember: Omit<ProductionMember, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiProductionV1ProdRolesCreateRequest {
    productionRoleAssignment: Omit<ProductionRoleAssignment, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiProductionV1ProdRolesDestroyRequest {
    id: number;
}

export interface ApiProductionV1ProdRolesListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiProductionV1ProdRolesPartialUpdateRequest {
    id: number;
    patchedProductionRoleAssignment?: Omit<PatchedProductionRoleAssignment, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiProductionV1ProdRolesRetrieveRequest {
    id: number;
}

export interface ApiProductionV1ProdRolesUpdateRequest {
    id: number;
    productionRoleAssignment: Omit<ProductionRoleAssignment, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiProductionV1ProductionCreateRequest {
    production: Omit<Production, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiProductionV1ProductionDestroyRequest {
    id: number;
}

export interface ApiProductionV1ProductionListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiProductionV1ProductionPartialUpdateRequest {
    id: number;
    patchedProduction?: Omit<PatchedProduction, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiProductionV1ProductionRetrieveRequest {
    id: number;
}

export interface ApiProductionV1ProductionUpdateRequest {
    id: number;
    production: Omit<Production, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiProductionV1RehearsalCreateRequest {
    rehearsal: Omit<Rehearsal, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiProductionV1RehearsalDestroyRequest {
    id: number;
}

export interface ApiProductionV1RehearsalListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiProductionV1RehearsalPartialUpdateRequest {
    id: number;
    patchedRehearsal?: Omit<PatchedRehearsal, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiProductionV1RehearsalParticipantCreateRequest {
    rehearsalParticipant: Omit<RehearsalParticipant, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiProductionV1RehearsalParticipantDestroyRequest {
    id: number;
}

export interface ApiProductionV1RehearsalParticipantListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiProductionV1RehearsalParticipantPartialUpdateRequest {
    id: number;
    patchedRehearsalParticipant?: Omit<PatchedRehearsalParticipant, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiProductionV1RehearsalParticipantRetrieveRequest {
    id: number;
}

export interface ApiProductionV1RehearsalParticipantUpdateRequest {
    id: number;
    rehearsalParticipant: Omit<RehearsalParticipant, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiProductionV1RehearsalRetrieveRequest {
    id: number;
}

export interface ApiProductionV1RehearsalUpdateRequest {
    id: number;
    rehearsal: Omit<Rehearsal, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface ApiSchemaRetrieveRequest {
    format?: ApiSchemaRetrieveFormatEnum;
    lang?: ApiSchemaRetrieveLangEnum;
}

/**
 * 
 */
export class ApiApi extends runtime.BaseAPI {

    /**
     */
    async apiComplianceAuditlogsCreateRaw(requestParameters: ApiComplianceAuditlogsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuditLog>> {
        if (requestParameters['auditLog'] == null) {
            throw new runtime.RequiredError(
                'auditLog',
                'Required parameter "auditLog" was null or undefined when calling apiComplianceAuditlogsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/auditlogs/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuditLogToJSON(requestParameters['auditLog']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuditLogFromJSON(jsonValue));
    }

    /**
     */
    async apiComplianceAuditlogsCreate(requestParameters: ApiComplianceAuditlogsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuditLog> {
        const response = await this.apiComplianceAuditlogsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiComplianceAuditlogsDestroyRaw(requestParameters: ApiComplianceAuditlogsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiComplianceAuditlogsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/auditlogs/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiComplianceAuditlogsDestroy(requestParameters: ApiComplianceAuditlogsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiComplianceAuditlogsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiComplianceAuditlogsListRaw(requestParameters: ApiComplianceAuditlogsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedAuditLogList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/auditlogs/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedAuditLogListFromJSON(jsonValue));
    }

    /**
     */
    async apiComplianceAuditlogsList(requestParameters: ApiComplianceAuditlogsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedAuditLogList> {
        const response = await this.apiComplianceAuditlogsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiComplianceAuditlogsPartialUpdateRaw(requestParameters: ApiComplianceAuditlogsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuditLog>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiComplianceAuditlogsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/auditlogs/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedAuditLogToJSON(requestParameters['patchedAuditLog']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuditLogFromJSON(jsonValue));
    }

    /**
     */
    async apiComplianceAuditlogsPartialUpdate(requestParameters: ApiComplianceAuditlogsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuditLog> {
        const response = await this.apiComplianceAuditlogsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiComplianceAuditlogsRetrieveRaw(requestParameters: ApiComplianceAuditlogsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuditLog>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiComplianceAuditlogsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/auditlogs/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuditLogFromJSON(jsonValue));
    }

    /**
     */
    async apiComplianceAuditlogsRetrieve(requestParameters: ApiComplianceAuditlogsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuditLog> {
        const response = await this.apiComplianceAuditlogsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiComplianceAuditlogsUpdateRaw(requestParameters: ApiComplianceAuditlogsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuditLog>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiComplianceAuditlogsUpdate().'
            );
        }

        if (requestParameters['auditLog'] == null) {
            throw new runtime.RequiredError(
                'auditLog',
                'Required parameter "auditLog" was null or undefined when calling apiComplianceAuditlogsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/auditlogs/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuditLogToJSON(requestParameters['auditLog']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuditLogFromJSON(jsonValue));
    }

    /**
     */
    async apiComplianceAuditlogsUpdate(requestParameters: ApiComplianceAuditlogsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuditLog> {
        const response = await this.apiComplianceAuditlogsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiComplianceContextkeysCreateRaw(requestParameters: ApiComplianceContextkeysCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContextKey>> {
        if (requestParameters['contextKey'] == null) {
            throw new runtime.RequiredError(
                'contextKey',
                'Required parameter "contextKey" was null or undefined when calling apiComplianceContextkeysCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/contextkeys/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContextKeyToJSON(requestParameters['contextKey']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextKeyFromJSON(jsonValue));
    }

    /**
     */
    async apiComplianceContextkeysCreate(requestParameters: ApiComplianceContextkeysCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContextKey> {
        const response = await this.apiComplianceContextkeysCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiComplianceContextkeysDestroyRaw(requestParameters: ApiComplianceContextkeysDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiComplianceContextkeysDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/contextkeys/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiComplianceContextkeysDestroy(requestParameters: ApiComplianceContextkeysDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiComplianceContextkeysDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiComplianceContextkeysListRaw(requestParameters: ApiComplianceContextkeysListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedContextKeyList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/contextkeys/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedContextKeyListFromJSON(jsonValue));
    }

    /**
     */
    async apiComplianceContextkeysList(requestParameters: ApiComplianceContextkeysListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedContextKeyList> {
        const response = await this.apiComplianceContextkeysListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiComplianceContextkeysPartialUpdateRaw(requestParameters: ApiComplianceContextkeysPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContextKey>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiComplianceContextkeysPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/contextkeys/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedContextKeyToJSON(requestParameters['patchedContextKey']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextKeyFromJSON(jsonValue));
    }

    /**
     */
    async apiComplianceContextkeysPartialUpdate(requestParameters: ApiComplianceContextkeysPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContextKey> {
        const response = await this.apiComplianceContextkeysPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiComplianceContextkeysRetrieveRaw(requestParameters: ApiComplianceContextkeysRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContextKey>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiComplianceContextkeysRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/contextkeys/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextKeyFromJSON(jsonValue));
    }

    /**
     */
    async apiComplianceContextkeysRetrieve(requestParameters: ApiComplianceContextkeysRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContextKey> {
        const response = await this.apiComplianceContextkeysRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiComplianceContextkeysUpdateRaw(requestParameters: ApiComplianceContextkeysUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContextKey>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiComplianceContextkeysUpdate().'
            );
        }

        if (requestParameters['contextKey'] == null) {
            throw new runtime.RequiredError(
                'contextKey',
                'Required parameter "contextKey" was null or undefined when calling apiComplianceContextkeysUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/contextkeys/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ContextKeyToJSON(requestParameters['contextKey']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextKeyFromJSON(jsonValue));
    }

    /**
     */
    async apiComplianceContextkeysUpdate(requestParameters: ApiComplianceContextkeysUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContextKey> {
        const response = await this.apiComplianceContextkeysUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiComplianceContextsCreateRaw(requestParameters: ApiComplianceContextsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Context>> {
        if (requestParameters['context'] == null) {
            throw new runtime.RequiredError(
                'context',
                'Required parameter "context" was null or undefined when calling apiComplianceContextsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/contexts/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContextToJSON(requestParameters['context']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextFromJSON(jsonValue));
    }

    /**
     */
    async apiComplianceContextsCreate(requestParameters: ApiComplianceContextsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Context> {
        const response = await this.apiComplianceContextsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiComplianceContextsDestroyRaw(requestParameters: ApiComplianceContextsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiComplianceContextsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/contexts/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiComplianceContextsDestroy(requestParameters: ApiComplianceContextsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiComplianceContextsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiComplianceContextsListRaw(requestParameters: ApiComplianceContextsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedContextList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/contexts/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedContextListFromJSON(jsonValue));
    }

    /**
     */
    async apiComplianceContextsList(requestParameters: ApiComplianceContextsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedContextList> {
        const response = await this.apiComplianceContextsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiComplianceContextsPartialUpdateRaw(requestParameters: ApiComplianceContextsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Context>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiComplianceContextsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/contexts/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedContextToJSON(requestParameters['patchedContext']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextFromJSON(jsonValue));
    }

    /**
     */
    async apiComplianceContextsPartialUpdate(requestParameters: ApiComplianceContextsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Context> {
        const response = await this.apiComplianceContextsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiComplianceContextsRetrieveRaw(requestParameters: ApiComplianceContextsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Context>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiComplianceContextsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/contexts/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextFromJSON(jsonValue));
    }

    /**
     */
    async apiComplianceContextsRetrieve(requestParameters: ApiComplianceContextsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Context> {
        const response = await this.apiComplianceContextsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiComplianceContextsUpdateRaw(requestParameters: ApiComplianceContextsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Context>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiComplianceContextsUpdate().'
            );
        }

        if (requestParameters['context'] == null) {
            throw new runtime.RequiredError(
                'context',
                'Required parameter "context" was null or undefined when calling apiComplianceContextsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/contexts/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ContextToJSON(requestParameters['context']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextFromJSON(jsonValue));
    }

    /**
     */
    async apiComplianceContextsUpdate(requestParameters: ApiComplianceContextsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Context> {
        const response = await this.apiComplianceContextsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCompliancePermissionsCreateRaw(requestParameters: ApiCompliancePermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Permission>> {
        if (requestParameters['permission'] == null) {
            throw new runtime.RequiredError(
                'permission',
                'Required parameter "permission" was null or undefined when calling apiCompliancePermissionsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/permissions/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PermissionToJSON(requestParameters['permission']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionFromJSON(jsonValue));
    }

    /**
     */
    async apiCompliancePermissionsCreate(requestParameters: ApiCompliancePermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Permission> {
        const response = await this.apiCompliancePermissionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCompliancePermissionsDestroyRaw(requestParameters: ApiCompliancePermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiCompliancePermissionsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/permissions/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiCompliancePermissionsDestroy(requestParameters: ApiCompliancePermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiCompliancePermissionsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiCompliancePermissionsListRaw(requestParameters: ApiCompliancePermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPermissionList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/permissions/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPermissionListFromJSON(jsonValue));
    }

    /**
     */
    async apiCompliancePermissionsList(requestParameters: ApiCompliancePermissionsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPermissionList> {
        const response = await this.apiCompliancePermissionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCompliancePermissionsPartialUpdateRaw(requestParameters: ApiCompliancePermissionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Permission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiCompliancePermissionsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/permissions/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedPermissionToJSON(requestParameters['patchedPermission']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionFromJSON(jsonValue));
    }

    /**
     */
    async apiCompliancePermissionsPartialUpdate(requestParameters: ApiCompliancePermissionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Permission> {
        const response = await this.apiCompliancePermissionsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCompliancePermissionsRetrieveRaw(requestParameters: ApiCompliancePermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Permission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiCompliancePermissionsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/permissions/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionFromJSON(jsonValue));
    }

    /**
     */
    async apiCompliancePermissionsRetrieve(requestParameters: ApiCompliancePermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Permission> {
        const response = await this.apiCompliancePermissionsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCompliancePermissionsUpdateRaw(requestParameters: ApiCompliancePermissionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Permission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiCompliancePermissionsUpdate().'
            );
        }

        if (requestParameters['permission'] == null) {
            throw new runtime.RequiredError(
                'permission',
                'Required parameter "permission" was null or undefined when calling apiCompliancePermissionsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/permissions/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PermissionToJSON(requestParameters['permission']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionFromJSON(jsonValue));
    }

    /**
     */
    async apiCompliancePermissionsUpdate(requestParameters: ApiCompliancePermissionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Permission> {
        const response = await this.apiCompliancePermissionsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiComplianceRolepermissionsCreateRaw(requestParameters: ApiComplianceRolepermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RolePermission>> {
        if (requestParameters['rolePermission'] == null) {
            throw new runtime.RequiredError(
                'rolePermission',
                'Required parameter "rolePermission" was null or undefined when calling apiComplianceRolepermissionsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/rolepermissions/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RolePermissionToJSON(requestParameters['rolePermission']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RolePermissionFromJSON(jsonValue));
    }

    /**
     */
    async apiComplianceRolepermissionsCreate(requestParameters: ApiComplianceRolepermissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RolePermission> {
        const response = await this.apiComplianceRolepermissionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiComplianceRolepermissionsDestroyRaw(requestParameters: ApiComplianceRolepermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiComplianceRolepermissionsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/rolepermissions/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiComplianceRolepermissionsDestroy(requestParameters: ApiComplianceRolepermissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiComplianceRolepermissionsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiComplianceRolepermissionsListRaw(requestParameters: ApiComplianceRolepermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedRolePermissionList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/rolepermissions/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedRolePermissionListFromJSON(jsonValue));
    }

    /**
     */
    async apiComplianceRolepermissionsList(requestParameters: ApiComplianceRolepermissionsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedRolePermissionList> {
        const response = await this.apiComplianceRolepermissionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiComplianceRolepermissionsPartialUpdateRaw(requestParameters: ApiComplianceRolepermissionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RolePermission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiComplianceRolepermissionsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/rolepermissions/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedRolePermissionToJSON(requestParameters['patchedRolePermission']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RolePermissionFromJSON(jsonValue));
    }

    /**
     */
    async apiComplianceRolepermissionsPartialUpdate(requestParameters: ApiComplianceRolepermissionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RolePermission> {
        const response = await this.apiComplianceRolepermissionsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiComplianceRolepermissionsRetrieveRaw(requestParameters: ApiComplianceRolepermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RolePermission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiComplianceRolepermissionsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/rolepermissions/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RolePermissionFromJSON(jsonValue));
    }

    /**
     */
    async apiComplianceRolepermissionsRetrieve(requestParameters: ApiComplianceRolepermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RolePermission> {
        const response = await this.apiComplianceRolepermissionsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiComplianceRolepermissionsUpdateRaw(requestParameters: ApiComplianceRolepermissionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RolePermission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiComplianceRolepermissionsUpdate().'
            );
        }

        if (requestParameters['rolePermission'] == null) {
            throw new runtime.RequiredError(
                'rolePermission',
                'Required parameter "rolePermission" was null or undefined when calling apiComplianceRolepermissionsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/rolepermissions/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RolePermissionToJSON(requestParameters['rolePermission']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RolePermissionFromJSON(jsonValue));
    }

    /**
     */
    async apiComplianceRolepermissionsUpdate(requestParameters: ApiComplianceRolepermissionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RolePermission> {
        const response = await this.apiComplianceRolepermissionsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiComplianceRolesCreateRaw(requestParameters: ApiComplianceRolesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Role>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling apiComplianceRolesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/roles/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RoleToJSON(requestParameters['role']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleFromJSON(jsonValue));
    }

    /**
     */
    async apiComplianceRolesCreate(requestParameters: ApiComplianceRolesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Role> {
        const response = await this.apiComplianceRolesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiComplianceRolesDestroyRaw(requestParameters: ApiComplianceRolesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiComplianceRolesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/roles/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiComplianceRolesDestroy(requestParameters: ApiComplianceRolesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiComplianceRolesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiComplianceRolesListRaw(requestParameters: ApiComplianceRolesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedRoleList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/roles/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedRoleListFromJSON(jsonValue));
    }

    /**
     */
    async apiComplianceRolesList(requestParameters: ApiComplianceRolesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedRoleList> {
        const response = await this.apiComplianceRolesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiComplianceRolesPartialUpdateRaw(requestParameters: ApiComplianceRolesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Role>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiComplianceRolesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/roles/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedRoleToJSON(requestParameters['patchedRole']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleFromJSON(jsonValue));
    }

    /**
     */
    async apiComplianceRolesPartialUpdate(requestParameters: ApiComplianceRolesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Role> {
        const response = await this.apiComplianceRolesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiComplianceRolesRetrieveRaw(requestParameters: ApiComplianceRolesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Role>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiComplianceRolesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/roles/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleFromJSON(jsonValue));
    }

    /**
     */
    async apiComplianceRolesRetrieve(requestParameters: ApiComplianceRolesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Role> {
        const response = await this.apiComplianceRolesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiComplianceRolesUpdateRaw(requestParameters: ApiComplianceRolesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Role>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiComplianceRolesUpdate().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling apiComplianceRolesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/roles/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RoleToJSON(requestParameters['role']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleFromJSON(jsonValue));
    }

    /**
     */
    async apiComplianceRolesUpdate(requestParameters: ApiComplianceRolesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Role> {
        const response = await this.apiComplianceRolesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiComplianceUserroleassignmentsCreateRaw(requestParameters: ApiComplianceUserroleassignmentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserRoleAssignment>> {
        if (requestParameters['userRoleAssignment'] == null) {
            throw new runtime.RequiredError(
                'userRoleAssignment',
                'Required parameter "userRoleAssignment" was null or undefined when calling apiComplianceUserroleassignmentsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/userroleassignments/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserRoleAssignmentToJSON(requestParameters['userRoleAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserRoleAssignmentFromJSON(jsonValue));
    }

    /**
     */
    async apiComplianceUserroleassignmentsCreate(requestParameters: ApiComplianceUserroleassignmentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserRoleAssignment> {
        const response = await this.apiComplianceUserroleassignmentsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiComplianceUserroleassignmentsDestroyRaw(requestParameters: ApiComplianceUserroleassignmentsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiComplianceUserroleassignmentsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/userroleassignments/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiComplianceUserroleassignmentsDestroy(requestParameters: ApiComplianceUserroleassignmentsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiComplianceUserroleassignmentsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiComplianceUserroleassignmentsListRaw(requestParameters: ApiComplianceUserroleassignmentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedUserRoleAssignmentList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/userroleassignments/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedUserRoleAssignmentListFromJSON(jsonValue));
    }

    /**
     */
    async apiComplianceUserroleassignmentsList(requestParameters: ApiComplianceUserroleassignmentsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedUserRoleAssignmentList> {
        const response = await this.apiComplianceUserroleassignmentsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiComplianceUserroleassignmentsPartialUpdateRaw(requestParameters: ApiComplianceUserroleassignmentsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserRoleAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiComplianceUserroleassignmentsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/userroleassignments/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedUserRoleAssignmentToJSON(requestParameters['patchedUserRoleAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserRoleAssignmentFromJSON(jsonValue));
    }

    /**
     */
    async apiComplianceUserroleassignmentsPartialUpdate(requestParameters: ApiComplianceUserroleassignmentsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserRoleAssignment> {
        const response = await this.apiComplianceUserroleassignmentsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiComplianceUserroleassignmentsRetrieveRaw(requestParameters: ApiComplianceUserroleassignmentsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserRoleAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiComplianceUserroleassignmentsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/userroleassignments/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserRoleAssignmentFromJSON(jsonValue));
    }

    /**
     */
    async apiComplianceUserroleassignmentsRetrieve(requestParameters: ApiComplianceUserroleassignmentsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserRoleAssignment> {
        const response = await this.apiComplianceUserroleassignmentsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiComplianceUserroleassignmentsUpdateRaw(requestParameters: ApiComplianceUserroleassignmentsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserRoleAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiComplianceUserroleassignmentsUpdate().'
            );
        }

        if (requestParameters['userRoleAssignment'] == null) {
            throw new runtime.RequiredError(
                'userRoleAssignment',
                'Required parameter "userRoleAssignment" was null or undefined when calling apiComplianceUserroleassignmentsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/compliance/userroleassignments/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserRoleAssignmentToJSON(requestParameters['userRoleAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserRoleAssignmentFromJSON(jsonValue));
    }

    /**
     */
    async apiComplianceUserroleassignmentsUpdate(requestParameters: ApiComplianceUserroleassignmentsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserRoleAssignment> {
        const response = await this.apiComplianceUserroleassignmentsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiHrEmployeeQualificationsCreateRaw(requestParameters: ApiHrEmployeeQualificationsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmployeeQualification>> {
        if (requestParameters['employeeQualification'] == null) {
            throw new runtime.RequiredError(
                'employeeQualification',
                'Required parameter "employeeQualification" was null or undefined when calling apiHrEmployeeQualificationsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/hr/employee-qualifications/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmployeeQualificationToJSON(requestParameters['employeeQualification']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmployeeQualificationFromJSON(jsonValue));
    }

    /**
     */
    async apiHrEmployeeQualificationsCreate(requestParameters: ApiHrEmployeeQualificationsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmployeeQualification> {
        const response = await this.apiHrEmployeeQualificationsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiHrEmployeeQualificationsDestroyRaw(requestParameters: ApiHrEmployeeQualificationsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiHrEmployeeQualificationsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/hr/employee-qualifications/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiHrEmployeeQualificationsDestroy(requestParameters: ApiHrEmployeeQualificationsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiHrEmployeeQualificationsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiHrEmployeeQualificationsListRaw(requestParameters: ApiHrEmployeeQualificationsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedEmployeeQualificationList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/hr/employee-qualifications/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedEmployeeQualificationListFromJSON(jsonValue));
    }

    /**
     */
    async apiHrEmployeeQualificationsList(requestParameters: ApiHrEmployeeQualificationsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedEmployeeQualificationList> {
        const response = await this.apiHrEmployeeQualificationsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiHrEmployeeQualificationsPartialUpdateRaw(requestParameters: ApiHrEmployeeQualificationsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmployeeQualification>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiHrEmployeeQualificationsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/hr/employee-qualifications/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedEmployeeQualificationToJSON(requestParameters['patchedEmployeeQualification']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmployeeQualificationFromJSON(jsonValue));
    }

    /**
     */
    async apiHrEmployeeQualificationsPartialUpdate(requestParameters: ApiHrEmployeeQualificationsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmployeeQualification> {
        const response = await this.apiHrEmployeeQualificationsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiHrEmployeeQualificationsRetrieveRaw(requestParameters: ApiHrEmployeeQualificationsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmployeeQualification>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiHrEmployeeQualificationsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/hr/employee-qualifications/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmployeeQualificationFromJSON(jsonValue));
    }

    /**
     */
    async apiHrEmployeeQualificationsRetrieve(requestParameters: ApiHrEmployeeQualificationsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmployeeQualification> {
        const response = await this.apiHrEmployeeQualificationsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiHrEmployeeQualificationsUpdateRaw(requestParameters: ApiHrEmployeeQualificationsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmployeeQualification>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiHrEmployeeQualificationsUpdate().'
            );
        }

        if (requestParameters['employeeQualification'] == null) {
            throw new runtime.RequiredError(
                'employeeQualification',
                'Required parameter "employeeQualification" was null or undefined when calling apiHrEmployeeQualificationsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/hr/employee-qualifications/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EmployeeQualificationToJSON(requestParameters['employeeQualification']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmployeeQualificationFromJSON(jsonValue));
    }

    /**
     */
    async apiHrEmployeeQualificationsUpdate(requestParameters: ApiHrEmployeeQualificationsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmployeeQualification> {
        const response = await this.apiHrEmployeeQualificationsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiHrEmployeesCreateRaw(requestParameters: ApiHrEmployeesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Employee>> {
        if (requestParameters['employee'] == null) {
            throw new runtime.RequiredError(
                'employee',
                'Required parameter "employee" was null or undefined when calling apiHrEmployeesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/hr/employees/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmployeeToJSON(requestParameters['employee']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmployeeFromJSON(jsonValue));
    }

    /**
     */
    async apiHrEmployeesCreate(requestParameters: ApiHrEmployeesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Employee> {
        const response = await this.apiHrEmployeesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiHrEmployeesDestroyRaw(requestParameters: ApiHrEmployeesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiHrEmployeesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/hr/employees/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiHrEmployeesDestroy(requestParameters: ApiHrEmployeesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiHrEmployeesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiHrEmployeesListRaw(requestParameters: ApiHrEmployeesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedEmployeeList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/hr/employees/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedEmployeeListFromJSON(jsonValue));
    }

    /**
     */
    async apiHrEmployeesList(requestParameters: ApiHrEmployeesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedEmployeeList> {
        const response = await this.apiHrEmployeesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiHrEmployeesPartialUpdateRaw(requestParameters: ApiHrEmployeesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Employee>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiHrEmployeesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/hr/employees/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedEmployeeToJSON(requestParameters['patchedEmployee']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmployeeFromJSON(jsonValue));
    }

    /**
     */
    async apiHrEmployeesPartialUpdate(requestParameters: ApiHrEmployeesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Employee> {
        const response = await this.apiHrEmployeesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiHrEmployeesRetrieveRaw(requestParameters: ApiHrEmployeesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Employee>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiHrEmployeesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/hr/employees/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmployeeFromJSON(jsonValue));
    }

    /**
     */
    async apiHrEmployeesRetrieve(requestParameters: ApiHrEmployeesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Employee> {
        const response = await this.apiHrEmployeesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiHrEmployeesUpdateRaw(requestParameters: ApiHrEmployeesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Employee>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiHrEmployeesUpdate().'
            );
        }

        if (requestParameters['employee'] == null) {
            throw new runtime.RequiredError(
                'employee',
                'Required parameter "employee" was null or undefined when calling apiHrEmployeesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/hr/employees/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EmployeeToJSON(requestParameters['employee']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmployeeFromJSON(jsonValue));
    }

    /**
     */
    async apiHrEmployeesUpdate(requestParameters: ApiHrEmployeesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Employee> {
        const response = await this.apiHrEmployeesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiHrEmploymentTypesCreateRaw(requestParameters: ApiHrEmploymentTypesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmploymentType>> {
        if (requestParameters['employmentType'] == null) {
            throw new runtime.RequiredError(
                'employmentType',
                'Required parameter "employmentType" was null or undefined when calling apiHrEmploymentTypesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/hr/employment-types/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmploymentTypeToJSON(requestParameters['employmentType']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmploymentTypeFromJSON(jsonValue));
    }

    /**
     */
    async apiHrEmploymentTypesCreate(requestParameters: ApiHrEmploymentTypesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmploymentType> {
        const response = await this.apiHrEmploymentTypesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiHrEmploymentTypesDestroyRaw(requestParameters: ApiHrEmploymentTypesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiHrEmploymentTypesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/hr/employment-types/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiHrEmploymentTypesDestroy(requestParameters: ApiHrEmploymentTypesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiHrEmploymentTypesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiHrEmploymentTypesListRaw(requestParameters: ApiHrEmploymentTypesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedEmploymentTypeList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/hr/employment-types/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedEmploymentTypeListFromJSON(jsonValue));
    }

    /**
     */
    async apiHrEmploymentTypesList(requestParameters: ApiHrEmploymentTypesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedEmploymentTypeList> {
        const response = await this.apiHrEmploymentTypesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiHrEmploymentTypesPartialUpdateRaw(requestParameters: ApiHrEmploymentTypesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmploymentType>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiHrEmploymentTypesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/hr/employment-types/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedEmploymentTypeToJSON(requestParameters['patchedEmploymentType']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmploymentTypeFromJSON(jsonValue));
    }

    /**
     */
    async apiHrEmploymentTypesPartialUpdate(requestParameters: ApiHrEmploymentTypesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmploymentType> {
        const response = await this.apiHrEmploymentTypesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiHrEmploymentTypesRetrieveRaw(requestParameters: ApiHrEmploymentTypesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmploymentType>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiHrEmploymentTypesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/hr/employment-types/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmploymentTypeFromJSON(jsonValue));
    }

    /**
     */
    async apiHrEmploymentTypesRetrieve(requestParameters: ApiHrEmploymentTypesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmploymentType> {
        const response = await this.apiHrEmploymentTypesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiHrEmploymentTypesUpdateRaw(requestParameters: ApiHrEmploymentTypesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmploymentType>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiHrEmploymentTypesUpdate().'
            );
        }

        if (requestParameters['employmentType'] == null) {
            throw new runtime.RequiredError(
                'employmentType',
                'Required parameter "employmentType" was null or undefined when calling apiHrEmploymentTypesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/hr/employment-types/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EmploymentTypeToJSON(requestParameters['employmentType']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmploymentTypeFromJSON(jsonValue));
    }

    /**
     */
    async apiHrEmploymentTypesUpdate(requestParameters: ApiHrEmploymentTypesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmploymentType> {
        const response = await this.apiHrEmploymentTypesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiHrQualificationsCreateRaw(requestParameters: ApiHrQualificationsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Qualification>> {
        if (requestParameters['qualification'] == null) {
            throw new runtime.RequiredError(
                'qualification',
                'Required parameter "qualification" was null or undefined when calling apiHrQualificationsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/hr/qualifications/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QualificationToJSON(requestParameters['qualification']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QualificationFromJSON(jsonValue));
    }

    /**
     */
    async apiHrQualificationsCreate(requestParameters: ApiHrQualificationsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Qualification> {
        const response = await this.apiHrQualificationsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiHrQualificationsDestroyRaw(requestParameters: ApiHrQualificationsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiHrQualificationsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/hr/qualifications/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiHrQualificationsDestroy(requestParameters: ApiHrQualificationsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiHrQualificationsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiHrQualificationsListRaw(requestParameters: ApiHrQualificationsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedQualificationList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/hr/qualifications/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedQualificationListFromJSON(jsonValue));
    }

    /**
     */
    async apiHrQualificationsList(requestParameters: ApiHrQualificationsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedQualificationList> {
        const response = await this.apiHrQualificationsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiHrQualificationsPartialUpdateRaw(requestParameters: ApiHrQualificationsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Qualification>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiHrQualificationsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/hr/qualifications/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedQualificationToJSON(requestParameters['patchedQualification']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QualificationFromJSON(jsonValue));
    }

    /**
     */
    async apiHrQualificationsPartialUpdate(requestParameters: ApiHrQualificationsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Qualification> {
        const response = await this.apiHrQualificationsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiHrQualificationsRetrieveRaw(requestParameters: ApiHrQualificationsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Qualification>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiHrQualificationsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/hr/qualifications/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QualificationFromJSON(jsonValue));
    }

    /**
     */
    async apiHrQualificationsRetrieve(requestParameters: ApiHrQualificationsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Qualification> {
        const response = await this.apiHrQualificationsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiHrQualificationsUpdateRaw(requestParameters: ApiHrQualificationsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Qualification>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiHrQualificationsUpdate().'
            );
        }

        if (requestParameters['qualification'] == null) {
            throw new runtime.RequiredError(
                'qualification',
                'Required parameter "qualification" was null or undefined when calling apiHrQualificationsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/hr/qualifications/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: QualificationToJSON(requestParameters['qualification']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QualificationFromJSON(jsonValue));
    }

    /**
     */
    async apiHrQualificationsUpdate(requestParameters: ApiHrQualificationsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Qualification> {
        const response = await this.apiHrQualificationsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiHrWorkLocationsCreateRaw(requestParameters: ApiHrWorkLocationsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkLocation>> {
        if (requestParameters['workLocation'] == null) {
            throw new runtime.RequiredError(
                'workLocation',
                'Required parameter "workLocation" was null or undefined when calling apiHrWorkLocationsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/hr/work-locations/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkLocationToJSON(requestParameters['workLocation']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkLocationFromJSON(jsonValue));
    }

    /**
     */
    async apiHrWorkLocationsCreate(requestParameters: ApiHrWorkLocationsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkLocation> {
        const response = await this.apiHrWorkLocationsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiHrWorkLocationsDestroyRaw(requestParameters: ApiHrWorkLocationsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiHrWorkLocationsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/hr/work-locations/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiHrWorkLocationsDestroy(requestParameters: ApiHrWorkLocationsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiHrWorkLocationsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiHrWorkLocationsListRaw(requestParameters: ApiHrWorkLocationsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedWorkLocationList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/hr/work-locations/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedWorkLocationListFromJSON(jsonValue));
    }

    /**
     */
    async apiHrWorkLocationsList(requestParameters: ApiHrWorkLocationsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedWorkLocationList> {
        const response = await this.apiHrWorkLocationsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiHrWorkLocationsPartialUpdateRaw(requestParameters: ApiHrWorkLocationsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkLocation>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiHrWorkLocationsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/hr/work-locations/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedWorkLocationToJSON(requestParameters['patchedWorkLocation']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkLocationFromJSON(jsonValue));
    }

    /**
     */
    async apiHrWorkLocationsPartialUpdate(requestParameters: ApiHrWorkLocationsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkLocation> {
        const response = await this.apiHrWorkLocationsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiHrWorkLocationsRetrieveRaw(requestParameters: ApiHrWorkLocationsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkLocation>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiHrWorkLocationsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/hr/work-locations/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkLocationFromJSON(jsonValue));
    }

    /**
     */
    async apiHrWorkLocationsRetrieve(requestParameters: ApiHrWorkLocationsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkLocation> {
        const response = await this.apiHrWorkLocationsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiHrWorkLocationsUpdateRaw(requestParameters: ApiHrWorkLocationsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkLocation>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiHrWorkLocationsUpdate().'
            );
        }

        if (requestParameters['workLocation'] == null) {
            throw new runtime.RequiredError(
                'workLocation',
                'Required parameter "workLocation" was null or undefined when calling apiHrWorkLocationsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/hr/work-locations/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WorkLocationToJSON(requestParameters['workLocation']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkLocationFromJSON(jsonValue));
    }

    /**
     */
    async apiHrWorkLocationsUpdate(requestParameters: ApiHrWorkLocationsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkLocation> {
        const response = await this.apiHrWorkLocationsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiIdentitySessionStatusRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SessionStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/identity/session-status/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SessionStatusFromJSON(jsonValue));
    }

    /**
     */
    async apiIdentitySessionStatusRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SessionStatus> {
        const response = await this.apiIdentitySessionStatusRetrieveRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiIdentityUsersCreateRaw(requestParameters: ApiIdentityUsersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling apiIdentityUsersCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/identity/users/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters['user']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async apiIdentityUsersCreate(requestParameters: ApiIdentityUsersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.apiIdentityUsersCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiIdentityUsersDestroyRaw(requestParameters: ApiIdentityUsersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiIdentityUsersDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/identity/users/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiIdentityUsersDestroy(requestParameters: ApiIdentityUsersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiIdentityUsersDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiIdentityUsersListRaw(requestParameters: ApiIdentityUsersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedUserList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/identity/users/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedUserListFromJSON(jsonValue));
    }

    /**
     */
    async apiIdentityUsersList(requestParameters: ApiIdentityUsersListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedUserList> {
        const response = await this.apiIdentityUsersListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiIdentityUsersPartialUpdateRaw(requestParameters: ApiIdentityUsersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiIdentityUsersPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/identity/users/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedUserToJSON(requestParameters['patchedUser']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async apiIdentityUsersPartialUpdate(requestParameters: ApiIdentityUsersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.apiIdentityUsersPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiIdentityUsersRetrieveRaw(requestParameters: ApiIdentityUsersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiIdentityUsersRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/identity/users/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async apiIdentityUsersRetrieve(requestParameters: ApiIdentityUsersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.apiIdentityUsersRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiIdentityUsersUpdateRaw(requestParameters: ApiIdentityUsersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiIdentityUsersUpdate().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling apiIdentityUsersUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/identity/users/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters['user']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async apiIdentityUsersUpdate(requestParameters: ApiIdentityUsersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.apiIdentityUsersUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLocationV1AddressesCreateRaw(requestParameters: ApiLocationV1AddressesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Address>> {
        if (requestParameters['address'] == null) {
            throw new runtime.RequiredError(
                'address',
                'Required parameter "address" was null or undefined when calling apiLocationV1AddressesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/addresses/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddressToJSON(requestParameters['address']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressFromJSON(jsonValue));
    }

    /**
     */
    async apiLocationV1AddressesCreate(requestParameters: ApiLocationV1AddressesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Address> {
        const response = await this.apiLocationV1AddressesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLocationV1AddressesDestroyRaw(requestParameters: ApiLocationV1AddressesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiLocationV1AddressesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/addresses/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiLocationV1AddressesDestroy(requestParameters: ApiLocationV1AddressesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiLocationV1AddressesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiLocationV1AddressesListRaw(requestParameters: ApiLocationV1AddressesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedAddressList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/addresses/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedAddressListFromJSON(jsonValue));
    }

    /**
     */
    async apiLocationV1AddressesList(requestParameters: ApiLocationV1AddressesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedAddressList> {
        const response = await this.apiLocationV1AddressesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLocationV1AddressesPartialUpdateRaw(requestParameters: ApiLocationV1AddressesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Address>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiLocationV1AddressesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/addresses/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedAddressToJSON(requestParameters['patchedAddress']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressFromJSON(jsonValue));
    }

    /**
     */
    async apiLocationV1AddressesPartialUpdate(requestParameters: ApiLocationV1AddressesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Address> {
        const response = await this.apiLocationV1AddressesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLocationV1AddressesRetrieveRaw(requestParameters: ApiLocationV1AddressesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Address>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiLocationV1AddressesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/addresses/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressFromJSON(jsonValue));
    }

    /**
     */
    async apiLocationV1AddressesRetrieve(requestParameters: ApiLocationV1AddressesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Address> {
        const response = await this.apiLocationV1AddressesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLocationV1AddressesUpdateRaw(requestParameters: ApiLocationV1AddressesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Address>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiLocationV1AddressesUpdate().'
            );
        }

        if (requestParameters['address'] == null) {
            throw new runtime.RequiredError(
                'address',
                'Required parameter "address" was null or undefined when calling apiLocationV1AddressesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/addresses/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AddressToJSON(requestParameters['address']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressFromJSON(jsonValue));
    }

    /**
     */
    async apiLocationV1AddressesUpdate(requestParameters: ApiLocationV1AddressesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Address> {
        const response = await this.apiLocationV1AddressesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLocationV1CountriesCreateRaw(requestParameters: ApiLocationV1CountriesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Country>> {
        if (requestParameters['country'] == null) {
            throw new runtime.RequiredError(
                'country',
                'Required parameter "country" was null or undefined when calling apiLocationV1CountriesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/countries/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CountryToJSON(requestParameters['country']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountryFromJSON(jsonValue));
    }

    /**
     */
    async apiLocationV1CountriesCreate(requestParameters: ApiLocationV1CountriesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Country> {
        const response = await this.apiLocationV1CountriesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLocationV1CountriesDestroyRaw(requestParameters: ApiLocationV1CountriesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiLocationV1CountriesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/countries/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiLocationV1CountriesDestroy(requestParameters: ApiLocationV1CountriesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiLocationV1CountriesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiLocationV1CountriesListRaw(requestParameters: ApiLocationV1CountriesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedCountryList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/countries/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedCountryListFromJSON(jsonValue));
    }

    /**
     */
    async apiLocationV1CountriesList(requestParameters: ApiLocationV1CountriesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedCountryList> {
        const response = await this.apiLocationV1CountriesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLocationV1CountriesPartialUpdateRaw(requestParameters: ApiLocationV1CountriesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Country>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiLocationV1CountriesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/countries/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedCountryToJSON(requestParameters['patchedCountry']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountryFromJSON(jsonValue));
    }

    /**
     */
    async apiLocationV1CountriesPartialUpdate(requestParameters: ApiLocationV1CountriesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Country> {
        const response = await this.apiLocationV1CountriesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLocationV1CountriesRetrieveRaw(requestParameters: ApiLocationV1CountriesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Country>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiLocationV1CountriesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/countries/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountryFromJSON(jsonValue));
    }

    /**
     */
    async apiLocationV1CountriesRetrieve(requestParameters: ApiLocationV1CountriesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Country> {
        const response = await this.apiLocationV1CountriesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLocationV1CountriesUpdateRaw(requestParameters: ApiLocationV1CountriesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Country>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiLocationV1CountriesUpdate().'
            );
        }

        if (requestParameters['country'] == null) {
            throw new runtime.RequiredError(
                'country',
                'Required parameter "country" was null or undefined when calling apiLocationV1CountriesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/countries/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CountryToJSON(requestParameters['country']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountryFromJSON(jsonValue));
    }

    /**
     */
    async apiLocationV1CountriesUpdate(requestParameters: ApiLocationV1CountriesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Country> {
        const response = await this.apiLocationV1CountriesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLocationV1StatesCreateRaw(requestParameters: ApiLocationV1StatesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<State>> {
        if (requestParameters['state'] == null) {
            throw new runtime.RequiredError(
                'state',
                'Required parameter "state" was null or undefined when calling apiLocationV1StatesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/states/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StateToJSON(requestParameters['state']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateFromJSON(jsonValue));
    }

    /**
     */
    async apiLocationV1StatesCreate(requestParameters: ApiLocationV1StatesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<State> {
        const response = await this.apiLocationV1StatesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLocationV1StatesDestroyRaw(requestParameters: ApiLocationV1StatesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiLocationV1StatesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/states/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiLocationV1StatesDestroy(requestParameters: ApiLocationV1StatesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiLocationV1StatesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiLocationV1StatesListRaw(requestParameters: ApiLocationV1StatesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedStateList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/states/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedStateListFromJSON(jsonValue));
    }

    /**
     */
    async apiLocationV1StatesList(requestParameters: ApiLocationV1StatesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedStateList> {
        const response = await this.apiLocationV1StatesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLocationV1StatesPartialUpdateRaw(requestParameters: ApiLocationV1StatesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<State>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiLocationV1StatesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/states/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedStateToJSON(requestParameters['patchedState']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateFromJSON(jsonValue));
    }

    /**
     */
    async apiLocationV1StatesPartialUpdate(requestParameters: ApiLocationV1StatesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<State> {
        const response = await this.apiLocationV1StatesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLocationV1StatesRetrieveRaw(requestParameters: ApiLocationV1StatesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<State>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiLocationV1StatesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/states/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateFromJSON(jsonValue));
    }

    /**
     */
    async apiLocationV1StatesRetrieve(requestParameters: ApiLocationV1StatesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<State> {
        const response = await this.apiLocationV1StatesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLocationV1StatesUpdateRaw(requestParameters: ApiLocationV1StatesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<State>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiLocationV1StatesUpdate().'
            );
        }

        if (requestParameters['state'] == null) {
            throw new runtime.RequiredError(
                'state',
                'Required parameter "state" was null or undefined when calling apiLocationV1StatesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/states/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StateToJSON(requestParameters['state']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateFromJSON(jsonValue));
    }

    /**
     */
    async apiLocationV1StatesUpdate(requestParameters: ApiLocationV1StatesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<State> {
        const response = await this.apiLocationV1StatesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLocationV1VenueCapacitiesCreateRaw(requestParameters: ApiLocationV1VenueCapacitiesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueCapacity>> {
        if (requestParameters['venueCapacity'] == null) {
            throw new runtime.RequiredError(
                'venueCapacity',
                'Required parameter "venueCapacity" was null or undefined when calling apiLocationV1VenueCapacitiesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/venue-capacities/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VenueCapacityToJSON(requestParameters['venueCapacity']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueCapacityFromJSON(jsonValue));
    }

    /**
     */
    async apiLocationV1VenueCapacitiesCreate(requestParameters: ApiLocationV1VenueCapacitiesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueCapacity> {
        const response = await this.apiLocationV1VenueCapacitiesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLocationV1VenueCapacitiesDestroyRaw(requestParameters: ApiLocationV1VenueCapacitiesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiLocationV1VenueCapacitiesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/venue-capacities/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiLocationV1VenueCapacitiesDestroy(requestParameters: ApiLocationV1VenueCapacitiesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiLocationV1VenueCapacitiesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiLocationV1VenueCapacitiesListRaw(requestParameters: ApiLocationV1VenueCapacitiesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedVenueCapacityList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/venue-capacities/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedVenueCapacityListFromJSON(jsonValue));
    }

    /**
     */
    async apiLocationV1VenueCapacitiesList(requestParameters: ApiLocationV1VenueCapacitiesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedVenueCapacityList> {
        const response = await this.apiLocationV1VenueCapacitiesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLocationV1VenueCapacitiesPartialUpdateRaw(requestParameters: ApiLocationV1VenueCapacitiesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueCapacity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiLocationV1VenueCapacitiesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/venue-capacities/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedVenueCapacityToJSON(requestParameters['patchedVenueCapacity']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueCapacityFromJSON(jsonValue));
    }

    /**
     */
    async apiLocationV1VenueCapacitiesPartialUpdate(requestParameters: ApiLocationV1VenueCapacitiesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueCapacity> {
        const response = await this.apiLocationV1VenueCapacitiesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLocationV1VenueCapacitiesRetrieveRaw(requestParameters: ApiLocationV1VenueCapacitiesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueCapacity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiLocationV1VenueCapacitiesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/venue-capacities/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueCapacityFromJSON(jsonValue));
    }

    /**
     */
    async apiLocationV1VenueCapacitiesRetrieve(requestParameters: ApiLocationV1VenueCapacitiesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueCapacity> {
        const response = await this.apiLocationV1VenueCapacitiesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLocationV1VenueCapacitiesUpdateRaw(requestParameters: ApiLocationV1VenueCapacitiesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueCapacity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiLocationV1VenueCapacitiesUpdate().'
            );
        }

        if (requestParameters['venueCapacity'] == null) {
            throw new runtime.RequiredError(
                'venueCapacity',
                'Required parameter "venueCapacity" was null or undefined when calling apiLocationV1VenueCapacitiesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/venue-capacities/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: VenueCapacityToJSON(requestParameters['venueCapacity']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueCapacityFromJSON(jsonValue));
    }

    /**
     */
    async apiLocationV1VenueCapacitiesUpdate(requestParameters: ApiLocationV1VenueCapacitiesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueCapacity> {
        const response = await this.apiLocationV1VenueCapacitiesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLocationV1VenueTagAssignmentsCreateRaw(requestParameters: ApiLocationV1VenueTagAssignmentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueTagAssignment>> {
        if (requestParameters['venueTagAssignment'] == null) {
            throw new runtime.RequiredError(
                'venueTagAssignment',
                'Required parameter "venueTagAssignment" was null or undefined when calling apiLocationV1VenueTagAssignmentsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/venue-tag-assignments/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VenueTagAssignmentToJSON(requestParameters['venueTagAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueTagAssignmentFromJSON(jsonValue));
    }

    /**
     */
    async apiLocationV1VenueTagAssignmentsCreate(requestParameters: ApiLocationV1VenueTagAssignmentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueTagAssignment> {
        const response = await this.apiLocationV1VenueTagAssignmentsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLocationV1VenueTagAssignmentsDestroyRaw(requestParameters: ApiLocationV1VenueTagAssignmentsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiLocationV1VenueTagAssignmentsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/venue-tag-assignments/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiLocationV1VenueTagAssignmentsDestroy(requestParameters: ApiLocationV1VenueTagAssignmentsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiLocationV1VenueTagAssignmentsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiLocationV1VenueTagAssignmentsListRaw(requestParameters: ApiLocationV1VenueTagAssignmentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedVenueTagAssignmentList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/venue-tag-assignments/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedVenueTagAssignmentListFromJSON(jsonValue));
    }

    /**
     */
    async apiLocationV1VenueTagAssignmentsList(requestParameters: ApiLocationV1VenueTagAssignmentsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedVenueTagAssignmentList> {
        const response = await this.apiLocationV1VenueTagAssignmentsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLocationV1VenueTagAssignmentsPartialUpdateRaw(requestParameters: ApiLocationV1VenueTagAssignmentsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueTagAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiLocationV1VenueTagAssignmentsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/venue-tag-assignments/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedVenueTagAssignmentToJSON(requestParameters['patchedVenueTagAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueTagAssignmentFromJSON(jsonValue));
    }

    /**
     */
    async apiLocationV1VenueTagAssignmentsPartialUpdate(requestParameters: ApiLocationV1VenueTagAssignmentsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueTagAssignment> {
        const response = await this.apiLocationV1VenueTagAssignmentsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLocationV1VenueTagAssignmentsRetrieveRaw(requestParameters: ApiLocationV1VenueTagAssignmentsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueTagAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiLocationV1VenueTagAssignmentsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/venue-tag-assignments/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueTagAssignmentFromJSON(jsonValue));
    }

    /**
     */
    async apiLocationV1VenueTagAssignmentsRetrieve(requestParameters: ApiLocationV1VenueTagAssignmentsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueTagAssignment> {
        const response = await this.apiLocationV1VenueTagAssignmentsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLocationV1VenueTagAssignmentsUpdateRaw(requestParameters: ApiLocationV1VenueTagAssignmentsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueTagAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiLocationV1VenueTagAssignmentsUpdate().'
            );
        }

        if (requestParameters['venueTagAssignment'] == null) {
            throw new runtime.RequiredError(
                'venueTagAssignment',
                'Required parameter "venueTagAssignment" was null or undefined when calling apiLocationV1VenueTagAssignmentsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/venue-tag-assignments/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: VenueTagAssignmentToJSON(requestParameters['venueTagAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueTagAssignmentFromJSON(jsonValue));
    }

    /**
     */
    async apiLocationV1VenueTagAssignmentsUpdate(requestParameters: ApiLocationV1VenueTagAssignmentsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueTagAssignment> {
        const response = await this.apiLocationV1VenueTagAssignmentsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLocationV1VenueTagsCreateRaw(requestParameters: ApiLocationV1VenueTagsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueTag>> {
        if (requestParameters['venueTag'] == null) {
            throw new runtime.RequiredError(
                'venueTag',
                'Required parameter "venueTag" was null or undefined when calling apiLocationV1VenueTagsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/venue-tags/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VenueTagToJSON(requestParameters['venueTag']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueTagFromJSON(jsonValue));
    }

    /**
     */
    async apiLocationV1VenueTagsCreate(requestParameters: ApiLocationV1VenueTagsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueTag> {
        const response = await this.apiLocationV1VenueTagsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLocationV1VenueTagsDestroyRaw(requestParameters: ApiLocationV1VenueTagsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiLocationV1VenueTagsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/venue-tags/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiLocationV1VenueTagsDestroy(requestParameters: ApiLocationV1VenueTagsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiLocationV1VenueTagsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiLocationV1VenueTagsListRaw(requestParameters: ApiLocationV1VenueTagsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedVenueTagList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/venue-tags/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedVenueTagListFromJSON(jsonValue));
    }

    /**
     */
    async apiLocationV1VenueTagsList(requestParameters: ApiLocationV1VenueTagsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedVenueTagList> {
        const response = await this.apiLocationV1VenueTagsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLocationV1VenueTagsPartialUpdateRaw(requestParameters: ApiLocationV1VenueTagsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueTag>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiLocationV1VenueTagsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/venue-tags/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedVenueTagToJSON(requestParameters['patchedVenueTag']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueTagFromJSON(jsonValue));
    }

    /**
     */
    async apiLocationV1VenueTagsPartialUpdate(requestParameters: ApiLocationV1VenueTagsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueTag> {
        const response = await this.apiLocationV1VenueTagsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLocationV1VenueTagsRetrieveRaw(requestParameters: ApiLocationV1VenueTagsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueTag>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiLocationV1VenueTagsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/venue-tags/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueTagFromJSON(jsonValue));
    }

    /**
     */
    async apiLocationV1VenueTagsRetrieve(requestParameters: ApiLocationV1VenueTagsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueTag> {
        const response = await this.apiLocationV1VenueTagsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLocationV1VenueTagsUpdateRaw(requestParameters: ApiLocationV1VenueTagsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VenueTag>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiLocationV1VenueTagsUpdate().'
            );
        }

        if (requestParameters['venueTag'] == null) {
            throw new runtime.RequiredError(
                'venueTag',
                'Required parameter "venueTag" was null or undefined when calling apiLocationV1VenueTagsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/venue-tags/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: VenueTagToJSON(requestParameters['venueTag']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueTagFromJSON(jsonValue));
    }

    /**
     */
    async apiLocationV1VenueTagsUpdate(requestParameters: ApiLocationV1VenueTagsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VenueTag> {
        const response = await this.apiLocationV1VenueTagsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLocationV1VenuesCreateRaw(requestParameters: ApiLocationV1VenuesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Venue>> {
        if (requestParameters['venue'] == null) {
            throw new runtime.RequiredError(
                'venue',
                'Required parameter "venue" was null or undefined when calling apiLocationV1VenuesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/venues/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VenueToJSON(requestParameters['venue']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueFromJSON(jsonValue));
    }

    /**
     */
    async apiLocationV1VenuesCreate(requestParameters: ApiLocationV1VenuesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Venue> {
        const response = await this.apiLocationV1VenuesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLocationV1VenuesDestroyRaw(requestParameters: ApiLocationV1VenuesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiLocationV1VenuesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/venues/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiLocationV1VenuesDestroy(requestParameters: ApiLocationV1VenuesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiLocationV1VenuesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiLocationV1VenuesListRaw(requestParameters: ApiLocationV1VenuesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedVenueList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/venues/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedVenueListFromJSON(jsonValue));
    }

    /**
     */
    async apiLocationV1VenuesList(requestParameters: ApiLocationV1VenuesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedVenueList> {
        const response = await this.apiLocationV1VenuesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLocationV1VenuesPartialUpdateRaw(requestParameters: ApiLocationV1VenuesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Venue>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiLocationV1VenuesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/venues/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedVenueToJSON(requestParameters['patchedVenue']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueFromJSON(jsonValue));
    }

    /**
     */
    async apiLocationV1VenuesPartialUpdate(requestParameters: ApiLocationV1VenuesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Venue> {
        const response = await this.apiLocationV1VenuesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLocationV1VenuesRetrieveRaw(requestParameters: ApiLocationV1VenuesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Venue>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiLocationV1VenuesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/venues/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueFromJSON(jsonValue));
    }

    /**
     */
    async apiLocationV1VenuesRetrieve(requestParameters: ApiLocationV1VenuesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Venue> {
        const response = await this.apiLocationV1VenuesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLocationV1VenuesUpdateRaw(requestParameters: ApiLocationV1VenuesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Venue>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiLocationV1VenuesUpdate().'
            );
        }

        if (requestParameters['venue'] == null) {
            throw new runtime.RequiredError(
                'venue',
                'Required parameter "venue" was null or undefined when calling apiLocationV1VenuesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/location/v1/venues/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: VenueToJSON(requestParameters['venue']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueFromJSON(jsonValue));
    }

    /**
     */
    async apiLocationV1VenuesUpdate(requestParameters: ApiLocationV1VenuesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Venue> {
        const response = await this.apiLocationV1VenuesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1PerformanceCreateRaw(requestParameters: ApiProductionV1PerformanceCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Performance>> {
        if (requestParameters['performance'] == null) {
            throw new runtime.RequiredError(
                'performance',
                'Required parameter "performance" was null or undefined when calling apiProductionV1PerformanceCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/performance/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PerformanceToJSON(requestParameters['performance']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PerformanceFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1PerformanceCreate(requestParameters: ApiProductionV1PerformanceCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Performance> {
        const response = await this.apiProductionV1PerformanceCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1PerformanceDestroyRaw(requestParameters: ApiProductionV1PerformanceDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductionV1PerformanceDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/performance/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiProductionV1PerformanceDestroy(requestParameters: ApiProductionV1PerformanceDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiProductionV1PerformanceDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiProductionV1PerformanceListRaw(requestParameters: ApiProductionV1PerformanceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPerformanceList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/performance/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPerformanceListFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1PerformanceList(requestParameters: ApiProductionV1PerformanceListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPerformanceList> {
        const response = await this.apiProductionV1PerformanceListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1PerformancePartialUpdateRaw(requestParameters: ApiProductionV1PerformancePartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Performance>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductionV1PerformancePartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/performance/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedPerformanceToJSON(requestParameters['patchedPerformance']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PerformanceFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1PerformancePartialUpdate(requestParameters: ApiProductionV1PerformancePartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Performance> {
        const response = await this.apiProductionV1PerformancePartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1PerformanceRetrieveRaw(requestParameters: ApiProductionV1PerformanceRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Performance>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductionV1PerformanceRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/performance/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PerformanceFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1PerformanceRetrieve(requestParameters: ApiProductionV1PerformanceRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Performance> {
        const response = await this.apiProductionV1PerformanceRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1PerformanceUpdateRaw(requestParameters: ApiProductionV1PerformanceUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Performance>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductionV1PerformanceUpdate().'
            );
        }

        if (requestParameters['performance'] == null) {
            throw new runtime.RequiredError(
                'performance',
                'Required parameter "performance" was null or undefined when calling apiProductionV1PerformanceUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/performance/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PerformanceToJSON(requestParameters['performance']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PerformanceFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1PerformanceUpdate(requestParameters: ApiProductionV1PerformanceUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Performance> {
        const response = await this.apiProductionV1PerformanceUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1ProdCategoryAssignmentCreateRaw(requestParameters: ApiProductionV1ProdCategoryAssignmentCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCategoryAssignment>> {
        if (requestParameters['productionCategoryAssignment'] == null) {
            throw new runtime.RequiredError(
                'productionCategoryAssignment',
                'Required parameter "productionCategoryAssignment" was null or undefined when calling apiProductionV1ProdCategoryAssignmentCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/prod-category-assignment/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionCategoryAssignmentToJSON(requestParameters['productionCategoryAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionCategoryAssignmentFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1ProdCategoryAssignmentCreate(requestParameters: ApiProductionV1ProdCategoryAssignmentCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCategoryAssignment> {
        const response = await this.apiProductionV1ProdCategoryAssignmentCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1ProdCategoryAssignmentDestroyRaw(requestParameters: ApiProductionV1ProdCategoryAssignmentDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductionV1ProdCategoryAssignmentDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/prod-category-assignment/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiProductionV1ProdCategoryAssignmentDestroy(requestParameters: ApiProductionV1ProdCategoryAssignmentDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiProductionV1ProdCategoryAssignmentDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiProductionV1ProdCategoryAssignmentListRaw(requestParameters: ApiProductionV1ProdCategoryAssignmentListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProductionCategoryAssignmentList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/prod-category-assignment/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedProductionCategoryAssignmentListFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1ProdCategoryAssignmentList(requestParameters: ApiProductionV1ProdCategoryAssignmentListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProductionCategoryAssignmentList> {
        const response = await this.apiProductionV1ProdCategoryAssignmentListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1ProdCategoryAssignmentPartialUpdateRaw(requestParameters: ApiProductionV1ProdCategoryAssignmentPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCategoryAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductionV1ProdCategoryAssignmentPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/prod-category-assignment/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedProductionCategoryAssignmentToJSON(requestParameters['patchedProductionCategoryAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionCategoryAssignmentFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1ProdCategoryAssignmentPartialUpdate(requestParameters: ApiProductionV1ProdCategoryAssignmentPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCategoryAssignment> {
        const response = await this.apiProductionV1ProdCategoryAssignmentPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1ProdCategoryAssignmentRetrieveRaw(requestParameters: ApiProductionV1ProdCategoryAssignmentRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCategoryAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductionV1ProdCategoryAssignmentRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/prod-category-assignment/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionCategoryAssignmentFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1ProdCategoryAssignmentRetrieve(requestParameters: ApiProductionV1ProdCategoryAssignmentRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCategoryAssignment> {
        const response = await this.apiProductionV1ProdCategoryAssignmentRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1ProdCategoryAssignmentUpdateRaw(requestParameters: ApiProductionV1ProdCategoryAssignmentUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCategoryAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductionV1ProdCategoryAssignmentUpdate().'
            );
        }

        if (requestParameters['productionCategoryAssignment'] == null) {
            throw new runtime.RequiredError(
                'productionCategoryAssignment',
                'Required parameter "productionCategoryAssignment" was null or undefined when calling apiProductionV1ProdCategoryAssignmentUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/prod-category-assignment/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionCategoryAssignmentToJSON(requestParameters['productionCategoryAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionCategoryAssignmentFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1ProdCategoryAssignmentUpdate(requestParameters: ApiProductionV1ProdCategoryAssignmentUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCategoryAssignment> {
        const response = await this.apiProductionV1ProdCategoryAssignmentUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1ProdCategoryCreateRaw(requestParameters: ApiProductionV1ProdCategoryCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCategory>> {
        if (requestParameters['productionCategory'] == null) {
            throw new runtime.RequiredError(
                'productionCategory',
                'Required parameter "productionCategory" was null or undefined when calling apiProductionV1ProdCategoryCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/prod-category/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionCategoryToJSON(requestParameters['productionCategory']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionCategoryFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1ProdCategoryCreate(requestParameters: ApiProductionV1ProdCategoryCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCategory> {
        const response = await this.apiProductionV1ProdCategoryCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1ProdCategoryDestroyRaw(requestParameters: ApiProductionV1ProdCategoryDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductionV1ProdCategoryDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/prod-category/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiProductionV1ProdCategoryDestroy(requestParameters: ApiProductionV1ProdCategoryDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiProductionV1ProdCategoryDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiProductionV1ProdCategoryListRaw(requestParameters: ApiProductionV1ProdCategoryListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProductionCategoryList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/prod-category/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedProductionCategoryListFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1ProdCategoryList(requestParameters: ApiProductionV1ProdCategoryListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProductionCategoryList> {
        const response = await this.apiProductionV1ProdCategoryListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1ProdCategoryPartialUpdateRaw(requestParameters: ApiProductionV1ProdCategoryPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCategory>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductionV1ProdCategoryPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/prod-category/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedProductionCategoryToJSON(requestParameters['patchedProductionCategory']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionCategoryFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1ProdCategoryPartialUpdate(requestParameters: ApiProductionV1ProdCategoryPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCategory> {
        const response = await this.apiProductionV1ProdCategoryPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1ProdCategoryRetrieveRaw(requestParameters: ApiProductionV1ProdCategoryRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCategory>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductionV1ProdCategoryRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/prod-category/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionCategoryFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1ProdCategoryRetrieve(requestParameters: ApiProductionV1ProdCategoryRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCategory> {
        const response = await this.apiProductionV1ProdCategoryRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1ProdCategoryUpdateRaw(requestParameters: ApiProductionV1ProdCategoryUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCategory>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductionV1ProdCategoryUpdate().'
            );
        }

        if (requestParameters['productionCategory'] == null) {
            throw new runtime.RequiredError(
                'productionCategory',
                'Required parameter "productionCategory" was null or undefined when calling apiProductionV1ProdCategoryUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/prod-category/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionCategoryToJSON(requestParameters['productionCategory']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionCategoryFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1ProdCategoryUpdate(requestParameters: ApiProductionV1ProdCategoryUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCategory> {
        const response = await this.apiProductionV1ProdCategoryUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1ProdMembersCreateRaw(requestParameters: ApiProductionV1ProdMembersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionMember>> {
        if (requestParameters['productionMember'] == null) {
            throw new runtime.RequiredError(
                'productionMember',
                'Required parameter "productionMember" was null or undefined when calling apiProductionV1ProdMembersCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/prod-members/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionMemberToJSON(requestParameters['productionMember']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionMemberFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1ProdMembersCreate(requestParameters: ApiProductionV1ProdMembersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionMember> {
        const response = await this.apiProductionV1ProdMembersCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1ProdMembersDestroyRaw(requestParameters: ApiProductionV1ProdMembersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductionV1ProdMembersDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/prod-members/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiProductionV1ProdMembersDestroy(requestParameters: ApiProductionV1ProdMembersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiProductionV1ProdMembersDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiProductionV1ProdMembersListRaw(requestParameters: ApiProductionV1ProdMembersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProductionMemberList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/prod-members/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedProductionMemberListFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1ProdMembersList(requestParameters: ApiProductionV1ProdMembersListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProductionMemberList> {
        const response = await this.apiProductionV1ProdMembersListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1ProdMembersPartialUpdateRaw(requestParameters: ApiProductionV1ProdMembersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionMember>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductionV1ProdMembersPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/prod-members/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedProductionMemberToJSON(requestParameters['patchedProductionMember']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionMemberFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1ProdMembersPartialUpdate(requestParameters: ApiProductionV1ProdMembersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionMember> {
        const response = await this.apiProductionV1ProdMembersPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1ProdMembersRetrieveRaw(requestParameters: ApiProductionV1ProdMembersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionMember>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductionV1ProdMembersRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/prod-members/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionMemberFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1ProdMembersRetrieve(requestParameters: ApiProductionV1ProdMembersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionMember> {
        const response = await this.apiProductionV1ProdMembersRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1ProdMembersUpdateRaw(requestParameters: ApiProductionV1ProdMembersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionMember>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductionV1ProdMembersUpdate().'
            );
        }

        if (requestParameters['productionMember'] == null) {
            throw new runtime.RequiredError(
                'productionMember',
                'Required parameter "productionMember" was null or undefined when calling apiProductionV1ProdMembersUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/prod-members/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionMemberToJSON(requestParameters['productionMember']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionMemberFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1ProdMembersUpdate(requestParameters: ApiProductionV1ProdMembersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionMember> {
        const response = await this.apiProductionV1ProdMembersUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1ProdRolesCreateRaw(requestParameters: ApiProductionV1ProdRolesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionRoleAssignment>> {
        if (requestParameters['productionRoleAssignment'] == null) {
            throw new runtime.RequiredError(
                'productionRoleAssignment',
                'Required parameter "productionRoleAssignment" was null or undefined when calling apiProductionV1ProdRolesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/prod-roles/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionRoleAssignmentToJSON(requestParameters['productionRoleAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionRoleAssignmentFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1ProdRolesCreate(requestParameters: ApiProductionV1ProdRolesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionRoleAssignment> {
        const response = await this.apiProductionV1ProdRolesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1ProdRolesDestroyRaw(requestParameters: ApiProductionV1ProdRolesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductionV1ProdRolesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/prod-roles/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiProductionV1ProdRolesDestroy(requestParameters: ApiProductionV1ProdRolesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiProductionV1ProdRolesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiProductionV1ProdRolesListRaw(requestParameters: ApiProductionV1ProdRolesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProductionRoleAssignmentList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/prod-roles/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedProductionRoleAssignmentListFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1ProdRolesList(requestParameters: ApiProductionV1ProdRolesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProductionRoleAssignmentList> {
        const response = await this.apiProductionV1ProdRolesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1ProdRolesPartialUpdateRaw(requestParameters: ApiProductionV1ProdRolesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionRoleAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductionV1ProdRolesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/prod-roles/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedProductionRoleAssignmentToJSON(requestParameters['patchedProductionRoleAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionRoleAssignmentFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1ProdRolesPartialUpdate(requestParameters: ApiProductionV1ProdRolesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionRoleAssignment> {
        const response = await this.apiProductionV1ProdRolesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1ProdRolesRetrieveRaw(requestParameters: ApiProductionV1ProdRolesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionRoleAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductionV1ProdRolesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/prod-roles/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionRoleAssignmentFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1ProdRolesRetrieve(requestParameters: ApiProductionV1ProdRolesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionRoleAssignment> {
        const response = await this.apiProductionV1ProdRolesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1ProdRolesUpdateRaw(requestParameters: ApiProductionV1ProdRolesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionRoleAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductionV1ProdRolesUpdate().'
            );
        }

        if (requestParameters['productionRoleAssignment'] == null) {
            throw new runtime.RequiredError(
                'productionRoleAssignment',
                'Required parameter "productionRoleAssignment" was null or undefined when calling apiProductionV1ProdRolesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/prod-roles/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionRoleAssignmentToJSON(requestParameters['productionRoleAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionRoleAssignmentFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1ProdRolesUpdate(requestParameters: ApiProductionV1ProdRolesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionRoleAssignment> {
        const response = await this.apiProductionV1ProdRolesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1ProductionCreateRaw(requestParameters: ApiProductionV1ProductionCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Production>> {
        if (requestParameters['production'] == null) {
            throw new runtime.RequiredError(
                'production',
                'Required parameter "production" was null or undefined when calling apiProductionV1ProductionCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/production/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionToJSON(requestParameters['production']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1ProductionCreate(requestParameters: ApiProductionV1ProductionCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Production> {
        const response = await this.apiProductionV1ProductionCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1ProductionDestroyRaw(requestParameters: ApiProductionV1ProductionDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductionV1ProductionDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/production/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiProductionV1ProductionDestroy(requestParameters: ApiProductionV1ProductionDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiProductionV1ProductionDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiProductionV1ProductionListRaw(requestParameters: ApiProductionV1ProductionListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProductionList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/production/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedProductionListFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1ProductionList(requestParameters: ApiProductionV1ProductionListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProductionList> {
        const response = await this.apiProductionV1ProductionListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1ProductionPartialUpdateRaw(requestParameters: ApiProductionV1ProductionPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Production>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductionV1ProductionPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/production/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedProductionToJSON(requestParameters['patchedProduction']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1ProductionPartialUpdate(requestParameters: ApiProductionV1ProductionPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Production> {
        const response = await this.apiProductionV1ProductionPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1ProductionRetrieveRaw(requestParameters: ApiProductionV1ProductionRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Production>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductionV1ProductionRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/production/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1ProductionRetrieve(requestParameters: ApiProductionV1ProductionRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Production> {
        const response = await this.apiProductionV1ProductionRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1ProductionUpdateRaw(requestParameters: ApiProductionV1ProductionUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Production>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductionV1ProductionUpdate().'
            );
        }

        if (requestParameters['production'] == null) {
            throw new runtime.RequiredError(
                'production',
                'Required parameter "production" was null or undefined when calling apiProductionV1ProductionUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/production/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductionToJSON(requestParameters['production']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductionFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1ProductionUpdate(requestParameters: ApiProductionV1ProductionUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Production> {
        const response = await this.apiProductionV1ProductionUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1RehearsalCreateRaw(requestParameters: ApiProductionV1RehearsalCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rehearsal>> {
        if (requestParameters['rehearsal'] == null) {
            throw new runtime.RequiredError(
                'rehearsal',
                'Required parameter "rehearsal" was null or undefined when calling apiProductionV1RehearsalCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/rehearsal/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RehearsalToJSON(requestParameters['rehearsal']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RehearsalFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1RehearsalCreate(requestParameters: ApiProductionV1RehearsalCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rehearsal> {
        const response = await this.apiProductionV1RehearsalCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1RehearsalDestroyRaw(requestParameters: ApiProductionV1RehearsalDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductionV1RehearsalDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/rehearsal/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiProductionV1RehearsalDestroy(requestParameters: ApiProductionV1RehearsalDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiProductionV1RehearsalDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiProductionV1RehearsalListRaw(requestParameters: ApiProductionV1RehearsalListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedRehearsalList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/rehearsal/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedRehearsalListFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1RehearsalList(requestParameters: ApiProductionV1RehearsalListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedRehearsalList> {
        const response = await this.apiProductionV1RehearsalListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1RehearsalPartialUpdateRaw(requestParameters: ApiProductionV1RehearsalPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rehearsal>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductionV1RehearsalPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/rehearsal/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedRehearsalToJSON(requestParameters['patchedRehearsal']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RehearsalFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1RehearsalPartialUpdate(requestParameters: ApiProductionV1RehearsalPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rehearsal> {
        const response = await this.apiProductionV1RehearsalPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1RehearsalParticipantCreateRaw(requestParameters: ApiProductionV1RehearsalParticipantCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RehearsalParticipant>> {
        if (requestParameters['rehearsalParticipant'] == null) {
            throw new runtime.RequiredError(
                'rehearsalParticipant',
                'Required parameter "rehearsalParticipant" was null or undefined when calling apiProductionV1RehearsalParticipantCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/rehearsal-participant/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RehearsalParticipantToJSON(requestParameters['rehearsalParticipant']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RehearsalParticipantFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1RehearsalParticipantCreate(requestParameters: ApiProductionV1RehearsalParticipantCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RehearsalParticipant> {
        const response = await this.apiProductionV1RehearsalParticipantCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1RehearsalParticipantDestroyRaw(requestParameters: ApiProductionV1RehearsalParticipantDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductionV1RehearsalParticipantDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/rehearsal-participant/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiProductionV1RehearsalParticipantDestroy(requestParameters: ApiProductionV1RehearsalParticipantDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiProductionV1RehearsalParticipantDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiProductionV1RehearsalParticipantListRaw(requestParameters: ApiProductionV1RehearsalParticipantListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedRehearsalParticipantList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/rehearsal-participant/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedRehearsalParticipantListFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1RehearsalParticipantList(requestParameters: ApiProductionV1RehearsalParticipantListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedRehearsalParticipantList> {
        const response = await this.apiProductionV1RehearsalParticipantListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1RehearsalParticipantPartialUpdateRaw(requestParameters: ApiProductionV1RehearsalParticipantPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RehearsalParticipant>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductionV1RehearsalParticipantPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/rehearsal-participant/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedRehearsalParticipantToJSON(requestParameters['patchedRehearsalParticipant']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RehearsalParticipantFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1RehearsalParticipantPartialUpdate(requestParameters: ApiProductionV1RehearsalParticipantPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RehearsalParticipant> {
        const response = await this.apiProductionV1RehearsalParticipantPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1RehearsalParticipantRetrieveRaw(requestParameters: ApiProductionV1RehearsalParticipantRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RehearsalParticipant>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductionV1RehearsalParticipantRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/rehearsal-participant/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RehearsalParticipantFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1RehearsalParticipantRetrieve(requestParameters: ApiProductionV1RehearsalParticipantRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RehearsalParticipant> {
        const response = await this.apiProductionV1RehearsalParticipantRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1RehearsalParticipantUpdateRaw(requestParameters: ApiProductionV1RehearsalParticipantUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RehearsalParticipant>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductionV1RehearsalParticipantUpdate().'
            );
        }

        if (requestParameters['rehearsalParticipant'] == null) {
            throw new runtime.RequiredError(
                'rehearsalParticipant',
                'Required parameter "rehearsalParticipant" was null or undefined when calling apiProductionV1RehearsalParticipantUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/rehearsal-participant/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RehearsalParticipantToJSON(requestParameters['rehearsalParticipant']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RehearsalParticipantFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1RehearsalParticipantUpdate(requestParameters: ApiProductionV1RehearsalParticipantUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RehearsalParticipant> {
        const response = await this.apiProductionV1RehearsalParticipantUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1RehearsalRetrieveRaw(requestParameters: ApiProductionV1RehearsalRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rehearsal>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductionV1RehearsalRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/rehearsal/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RehearsalFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1RehearsalRetrieve(requestParameters: ApiProductionV1RehearsalRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rehearsal> {
        const response = await this.apiProductionV1RehearsalRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductionV1RehearsalUpdateRaw(requestParameters: ApiProductionV1RehearsalUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rehearsal>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductionV1RehearsalUpdate().'
            );
        }

        if (requestParameters['rehearsal'] == null) {
            throw new runtime.RequiredError(
                'rehearsal',
                'Required parameter "rehearsal" was null or undefined when calling apiProductionV1RehearsalUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/production/v1/rehearsal/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RehearsalToJSON(requestParameters['rehearsal']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RehearsalFromJSON(jsonValue));
    }

    /**
     */
    async apiProductionV1RehearsalUpdate(requestParameters: ApiProductionV1RehearsalUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rehearsal> {
        const response = await this.apiProductionV1RehearsalUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
     */
    async apiSchemaRetrieveRaw(requestParameters: ApiSchemaRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['lang'] != null) {
            queryParameters['lang'] = requestParameters['lang'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CadenceOIDC", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/schema/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
     */
    async apiSchemaRetrieve(requestParameters: ApiSchemaRetrieveRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.apiSchemaRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ApiSchemaRetrieveFormatEnum = {
    Json: 'json',
    Yaml: 'yaml'
} as const;
export type ApiSchemaRetrieveFormatEnum = typeof ApiSchemaRetrieveFormatEnum[keyof typeof ApiSchemaRetrieveFormatEnum];
/**
 * @export
 */
export const ApiSchemaRetrieveLangEnum = {
    Af: 'af',
    Ar: 'ar',
    ArDz: 'ar-dz',
    Ast: 'ast',
    Az: 'az',
    Be: 'be',
    Bg: 'bg',
    Bn: 'bn',
    Br: 'br',
    Bs: 'bs',
    Ca: 'ca',
    Ckb: 'ckb',
    Cs: 'cs',
    Cy: 'cy',
    Da: 'da',
    De: 'de',
    Dsb: 'dsb',
    El: 'el',
    En: 'en',
    EnAu: 'en-au',
    EnGb: 'en-gb',
    Eo: 'eo',
    Es: 'es',
    EsAr: 'es-ar',
    EsCo: 'es-co',
    EsMx: 'es-mx',
    EsNi: 'es-ni',
    EsVe: 'es-ve',
    Et: 'et',
    Eu: 'eu',
    Fa: 'fa',
    Fi: 'fi',
    Fr: 'fr',
    Fy: 'fy',
    Ga: 'ga',
    Gd: 'gd',
    Gl: 'gl',
    He: 'he',
    Hi: 'hi',
    Hr: 'hr',
    Hsb: 'hsb',
    Hu: 'hu',
    Hy: 'hy',
    Ia: 'ia',
    Id: 'id',
    Ig: 'ig',
    Io: 'io',
    Is: 'is',
    It: 'it',
    Ja: 'ja',
    Ka: 'ka',
    Kab: 'kab',
    Kk: 'kk',
    Km: 'km',
    Kn: 'kn',
    Ko: 'ko',
    Ky: 'ky',
    Lb: 'lb',
    Lt: 'lt',
    Lv: 'lv',
    Mk: 'mk',
    Ml: 'ml',
    Mn: 'mn',
    Mr: 'mr',
    Ms: 'ms',
    My: 'my',
    Nb: 'nb',
    Ne: 'ne',
    Nl: 'nl',
    Nn: 'nn',
    Os: 'os',
    Pa: 'pa',
    Pl: 'pl',
    Pt: 'pt',
    PtBr: 'pt-br',
    Ro: 'ro',
    Ru: 'ru',
    Sk: 'sk',
    Sl: 'sl',
    Sq: 'sq',
    Sr: 'sr',
    SrLatn: 'sr-latn',
    Sv: 'sv',
    Sw: 'sw',
    Ta: 'ta',
    Te: 'te',
    Tg: 'tg',
    Th: 'th',
    Tk: 'tk',
    Tr: 'tr',
    Tt: 'tt',
    Udm: 'udm',
    Ug: 'ug',
    Uk: 'uk',
    Ur: 'ur',
    Uz: 'uz',
    Vi: 'vi',
    ZhHans: 'zh-hans',
    ZhHant: 'zh-hant'
} as const;
export type ApiSchemaRetrieveLangEnum = typeof ApiSchemaRetrieveLangEnum[keyof typeof ApiSchemaRetrieveLangEnum];
