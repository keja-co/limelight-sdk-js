/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.71
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Form,
  FormField,
  PaginatedFormFieldList,
  PaginatedFormList,
  PaginatedSubmissionFieldValueList,
  PaginatedSubmissionList,
  PatchedForm,
  PatchedFormField,
  PatchedSubmission,
  PatchedSubmissionFieldValue,
  Submission,
  SubmissionFieldValue,
} from '../models/index';
import {
    FormFromJSON,
    FormToJSON,
    FormFieldFromJSON,
    FormFieldToJSON,
    PaginatedFormFieldListFromJSON,
    PaginatedFormFieldListToJSON,
    PaginatedFormListFromJSON,
    PaginatedFormListToJSON,
    PaginatedSubmissionFieldValueListFromJSON,
    PaginatedSubmissionFieldValueListToJSON,
    PaginatedSubmissionListFromJSON,
    PaginatedSubmissionListToJSON,
    PatchedFormFromJSON,
    PatchedFormToJSON,
    PatchedFormFieldFromJSON,
    PatchedFormFieldToJSON,
    PatchedSubmissionFromJSON,
    PatchedSubmissionToJSON,
    PatchedSubmissionFieldValueFromJSON,
    PatchedSubmissionFieldValueToJSON,
    SubmissionFromJSON,
    SubmissionToJSON,
    SubmissionFieldValueFromJSON,
    SubmissionFieldValueToJSON,
} from '../models/index';

export interface FormsV1FormCreateRequest {
    form: Omit<Form, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface FormsV1FormDestroyRequest {
    id: number;
}

export interface FormsV1FormFieldCreateRequest {
    formField: Omit<FormField, 'id'|'created_at'|'updated_at'>;
}

export interface FormsV1FormFieldDestroyRequest {
    id: number;
}

export interface FormsV1FormFieldListRequest {
    page?: number;
    pageSize?: number;
}

export interface FormsV1FormFieldPartialUpdateRequest {
    id: number;
    patchedFormField?: Omit<PatchedFormField, 'id'|'created_at'|'updated_at'>;
}

export interface FormsV1FormFieldRetrieveRequest {
    id: number;
}

export interface FormsV1FormFieldUpdateRequest {
    id: number;
    formField: Omit<FormField, 'id'|'created_at'|'updated_at'>;
}

export interface FormsV1FormListRequest {
    page?: number;
    pageSize?: number;
}

export interface FormsV1FormPartialUpdateRequest {
    id: number;
    patchedForm?: Omit<PatchedForm, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface FormsV1FormRetrieveRequest {
    id: number;
}

export interface FormsV1FormUpdateRequest {
    id: number;
    form: Omit<Form, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface FormsV1SubmissionCreateRequest {
    submission: Omit<Submission, 'id'|'created_at'|'updated_at'|'submitted_date_time'|'created_by'>;
}

export interface FormsV1SubmissionDestroyRequest {
    id: number;
}

export interface FormsV1SubmissionFieldValueCreateRequest {
    submissionFieldValue: Omit<SubmissionFieldValue, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface FormsV1SubmissionFieldValueDestroyRequest {
    id: number;
}

export interface FormsV1SubmissionFieldValueListRequest {
    page?: number;
    pageSize?: number;
}

export interface FormsV1SubmissionFieldValuePartialUpdateRequest {
    id: number;
    patchedSubmissionFieldValue?: Omit<PatchedSubmissionFieldValue, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface FormsV1SubmissionFieldValueRetrieveRequest {
    id: number;
}

export interface FormsV1SubmissionFieldValueUpdateRequest {
    id: number;
    submissionFieldValue: Omit<SubmissionFieldValue, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface FormsV1SubmissionListRequest {
    page?: number;
    pageSize?: number;
}

export interface FormsV1SubmissionPartialUpdateRequest {
    id: number;
    patchedSubmission?: Omit<PatchedSubmission, 'id'|'created_at'|'updated_at'|'submitted_date_time'|'created_by'>;
}

export interface FormsV1SubmissionRetrieveRequest {
    id: number;
}

export interface FormsV1SubmissionUpdateRequest {
    id: number;
    submission: Omit<Submission, 'id'|'created_at'|'updated_at'|'submitted_date_time'|'created_by'>;
}

/**
 * 
 */
export class FormsApi extends runtime.BaseAPI {

    /**
     */
    async formsV1FormCreateRaw(requestParameters: FormsV1FormCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Form>> {
        if (requestParameters['form'] == null) {
            throw new runtime.RequiredError(
                'form',
                'Required parameter "form" was null or undefined when calling formsV1FormCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/forms/v1/form/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FormToJSON(requestParameters['form']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormFromJSON(jsonValue));
    }

    /**
     */
    async formsV1FormCreate(requestParameters: FormsV1FormCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Form> {
        const response = await this.formsV1FormCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async formsV1FormDestroyRaw(requestParameters: FormsV1FormDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling formsV1FormDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/forms/v1/form/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async formsV1FormDestroy(requestParameters: FormsV1FormDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.formsV1FormDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async formsV1FormFieldCreateRaw(requestParameters: FormsV1FormFieldCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FormField>> {
        if (requestParameters['formField'] == null) {
            throw new runtime.RequiredError(
                'formField',
                'Required parameter "formField" was null or undefined when calling formsV1FormFieldCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/forms/v1/form-field/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FormFieldToJSON(requestParameters['formField']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormFieldFromJSON(jsonValue));
    }

    /**
     */
    async formsV1FormFieldCreate(requestParameters: FormsV1FormFieldCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FormField> {
        const response = await this.formsV1FormFieldCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async formsV1FormFieldDestroyRaw(requestParameters: FormsV1FormFieldDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling formsV1FormFieldDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/forms/v1/form-field/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async formsV1FormFieldDestroy(requestParameters: FormsV1FormFieldDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.formsV1FormFieldDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async formsV1FormFieldListRaw(requestParameters: FormsV1FormFieldListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFormFieldList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/forms/v1/form-field/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFormFieldListFromJSON(jsonValue));
    }

    /**
     */
    async formsV1FormFieldList(requestParameters: FormsV1FormFieldListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFormFieldList> {
        const response = await this.formsV1FormFieldListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async formsV1FormFieldPartialUpdateRaw(requestParameters: FormsV1FormFieldPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FormField>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling formsV1FormFieldPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/forms/v1/form-field/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedFormFieldToJSON(requestParameters['patchedFormField']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormFieldFromJSON(jsonValue));
    }

    /**
     */
    async formsV1FormFieldPartialUpdate(requestParameters: FormsV1FormFieldPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FormField> {
        const response = await this.formsV1FormFieldPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async formsV1FormFieldRetrieveRaw(requestParameters: FormsV1FormFieldRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FormField>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling formsV1FormFieldRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/forms/v1/form-field/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormFieldFromJSON(jsonValue));
    }

    /**
     */
    async formsV1FormFieldRetrieve(requestParameters: FormsV1FormFieldRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FormField> {
        const response = await this.formsV1FormFieldRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async formsV1FormFieldUpdateRaw(requestParameters: FormsV1FormFieldUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FormField>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling formsV1FormFieldUpdate().'
            );
        }

        if (requestParameters['formField'] == null) {
            throw new runtime.RequiredError(
                'formField',
                'Required parameter "formField" was null or undefined when calling formsV1FormFieldUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/forms/v1/form-field/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FormFieldToJSON(requestParameters['formField']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormFieldFromJSON(jsonValue));
    }

    /**
     */
    async formsV1FormFieldUpdate(requestParameters: FormsV1FormFieldUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FormField> {
        const response = await this.formsV1FormFieldUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async formsV1FormListRaw(requestParameters: FormsV1FormListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFormList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/forms/v1/form/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFormListFromJSON(jsonValue));
    }

    /**
     */
    async formsV1FormList(requestParameters: FormsV1FormListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFormList> {
        const response = await this.formsV1FormListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async formsV1FormPartialUpdateRaw(requestParameters: FormsV1FormPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Form>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling formsV1FormPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/forms/v1/form/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedFormToJSON(requestParameters['patchedForm']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormFromJSON(jsonValue));
    }

    /**
     */
    async formsV1FormPartialUpdate(requestParameters: FormsV1FormPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Form> {
        const response = await this.formsV1FormPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async formsV1FormRetrieveRaw(requestParameters: FormsV1FormRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Form>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling formsV1FormRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/forms/v1/form/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormFromJSON(jsonValue));
    }

    /**
     */
    async formsV1FormRetrieve(requestParameters: FormsV1FormRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Form> {
        const response = await this.formsV1FormRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async formsV1FormUpdateRaw(requestParameters: FormsV1FormUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Form>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling formsV1FormUpdate().'
            );
        }

        if (requestParameters['form'] == null) {
            throw new runtime.RequiredError(
                'form',
                'Required parameter "form" was null or undefined when calling formsV1FormUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/forms/v1/form/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FormToJSON(requestParameters['form']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormFromJSON(jsonValue));
    }

    /**
     */
    async formsV1FormUpdate(requestParameters: FormsV1FormUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Form> {
        const response = await this.formsV1FormUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async formsV1SubmissionCreateRaw(requestParameters: FormsV1SubmissionCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Submission>> {
        if (requestParameters['submission'] == null) {
            throw new runtime.RequiredError(
                'submission',
                'Required parameter "submission" was null or undefined when calling formsV1SubmissionCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/forms/v1/submission/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubmissionToJSON(requestParameters['submission']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubmissionFromJSON(jsonValue));
    }

    /**
     */
    async formsV1SubmissionCreate(requestParameters: FormsV1SubmissionCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Submission> {
        const response = await this.formsV1SubmissionCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async formsV1SubmissionDestroyRaw(requestParameters: FormsV1SubmissionDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling formsV1SubmissionDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/forms/v1/submission/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async formsV1SubmissionDestroy(requestParameters: FormsV1SubmissionDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.formsV1SubmissionDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async formsV1SubmissionFieldValueCreateRaw(requestParameters: FormsV1SubmissionFieldValueCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubmissionFieldValue>> {
        if (requestParameters['submissionFieldValue'] == null) {
            throw new runtime.RequiredError(
                'submissionFieldValue',
                'Required parameter "submissionFieldValue" was null or undefined when calling formsV1SubmissionFieldValueCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/forms/v1/submission-field-value/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubmissionFieldValueToJSON(requestParameters['submissionFieldValue']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubmissionFieldValueFromJSON(jsonValue));
    }

    /**
     */
    async formsV1SubmissionFieldValueCreate(requestParameters: FormsV1SubmissionFieldValueCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubmissionFieldValue> {
        const response = await this.formsV1SubmissionFieldValueCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async formsV1SubmissionFieldValueDestroyRaw(requestParameters: FormsV1SubmissionFieldValueDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling formsV1SubmissionFieldValueDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/forms/v1/submission-field-value/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async formsV1SubmissionFieldValueDestroy(requestParameters: FormsV1SubmissionFieldValueDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.formsV1SubmissionFieldValueDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async formsV1SubmissionFieldValueListRaw(requestParameters: FormsV1SubmissionFieldValueListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedSubmissionFieldValueList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/forms/v1/submission-field-value/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedSubmissionFieldValueListFromJSON(jsonValue));
    }

    /**
     */
    async formsV1SubmissionFieldValueList(requestParameters: FormsV1SubmissionFieldValueListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedSubmissionFieldValueList> {
        const response = await this.formsV1SubmissionFieldValueListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async formsV1SubmissionFieldValuePartialUpdateRaw(requestParameters: FormsV1SubmissionFieldValuePartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubmissionFieldValue>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling formsV1SubmissionFieldValuePartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/forms/v1/submission-field-value/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedSubmissionFieldValueToJSON(requestParameters['patchedSubmissionFieldValue']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubmissionFieldValueFromJSON(jsonValue));
    }

    /**
     */
    async formsV1SubmissionFieldValuePartialUpdate(requestParameters: FormsV1SubmissionFieldValuePartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubmissionFieldValue> {
        const response = await this.formsV1SubmissionFieldValuePartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async formsV1SubmissionFieldValueRetrieveRaw(requestParameters: FormsV1SubmissionFieldValueRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubmissionFieldValue>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling formsV1SubmissionFieldValueRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/forms/v1/submission-field-value/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubmissionFieldValueFromJSON(jsonValue));
    }

    /**
     */
    async formsV1SubmissionFieldValueRetrieve(requestParameters: FormsV1SubmissionFieldValueRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubmissionFieldValue> {
        const response = await this.formsV1SubmissionFieldValueRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async formsV1SubmissionFieldValueUpdateRaw(requestParameters: FormsV1SubmissionFieldValueUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubmissionFieldValue>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling formsV1SubmissionFieldValueUpdate().'
            );
        }

        if (requestParameters['submissionFieldValue'] == null) {
            throw new runtime.RequiredError(
                'submissionFieldValue',
                'Required parameter "submissionFieldValue" was null or undefined when calling formsV1SubmissionFieldValueUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/forms/v1/submission-field-value/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SubmissionFieldValueToJSON(requestParameters['submissionFieldValue']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubmissionFieldValueFromJSON(jsonValue));
    }

    /**
     */
    async formsV1SubmissionFieldValueUpdate(requestParameters: FormsV1SubmissionFieldValueUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubmissionFieldValue> {
        const response = await this.formsV1SubmissionFieldValueUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async formsV1SubmissionListRaw(requestParameters: FormsV1SubmissionListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedSubmissionList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/forms/v1/submission/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedSubmissionListFromJSON(jsonValue));
    }

    /**
     */
    async formsV1SubmissionList(requestParameters: FormsV1SubmissionListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedSubmissionList> {
        const response = await this.formsV1SubmissionListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async formsV1SubmissionPartialUpdateRaw(requestParameters: FormsV1SubmissionPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Submission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling formsV1SubmissionPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/forms/v1/submission/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedSubmissionToJSON(requestParameters['patchedSubmission']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubmissionFromJSON(jsonValue));
    }

    /**
     */
    async formsV1SubmissionPartialUpdate(requestParameters: FormsV1SubmissionPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Submission> {
        const response = await this.formsV1SubmissionPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async formsV1SubmissionRetrieveRaw(requestParameters: FormsV1SubmissionRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Submission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling formsV1SubmissionRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/forms/v1/submission/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubmissionFromJSON(jsonValue));
    }

    /**
     */
    async formsV1SubmissionRetrieve(requestParameters: FormsV1SubmissionRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Submission> {
        const response = await this.formsV1SubmissionRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async formsV1SubmissionUpdateRaw(requestParameters: FormsV1SubmissionUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Submission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling formsV1SubmissionUpdate().'
            );
        }

        if (requestParameters['submission'] == null) {
            throw new runtime.RequiredError(
                'submission',
                'Required parameter "submission" was null or undefined when calling formsV1SubmissionUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/forms/v1/submission/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SubmissionToJSON(requestParameters['submission']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubmissionFromJSON(jsonValue));
    }

    /**
     */
    async formsV1SubmissionUpdate(requestParameters: FormsV1SubmissionUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Submission> {
        const response = await this.formsV1SubmissionUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
