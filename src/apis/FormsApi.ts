/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.109
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Form,
  FormField,
  PaginatedFormFieldList,
  PaginatedFormList,
  PaginatedSubmissionFieldValueList,
  PaginatedSubmissionList,
  PatchedForm,
  PatchedFormField,
  PatchedSubmission,
  PatchedSubmissionFieldValue,
  Submission,
  SubmissionFieldValue,
} from '../models/index';
import {
    FormFromJSON,
    FormToJSON,
    FormFieldFromJSON,
    FormFieldToJSON,
    PaginatedFormFieldListFromJSON,
    PaginatedFormFieldListToJSON,
    PaginatedFormListFromJSON,
    PaginatedFormListToJSON,
    PaginatedSubmissionFieldValueListFromJSON,
    PaginatedSubmissionFieldValueListToJSON,
    PaginatedSubmissionListFromJSON,
    PaginatedSubmissionListToJSON,
    PatchedFormFromJSON,
    PatchedFormToJSON,
    PatchedFormFieldFromJSON,
    PatchedFormFieldToJSON,
    PatchedSubmissionFromJSON,
    PatchedSubmissionToJSON,
    PatchedSubmissionFieldValueFromJSON,
    PatchedSubmissionFieldValueToJSON,
    SubmissionFromJSON,
    SubmissionToJSON,
    SubmissionFieldValueFromJSON,
    SubmissionFieldValueToJSON,
} from '../models/index';

export interface FormsV1FormsCreateRequest {
    tenantRef: string;
    form: Omit<Form, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface FormsV1FormsDestroyRequest {
    id: number;
    tenantRef: string;
}

export interface FormsV1FormsFieldsCreateRequest {
    formId: number;
    tenantRef: string;
    formField: Omit<FormField, 'id'|'created_at'|'updated_at'>;
}

export interface FormsV1FormsFieldsDestroyRequest {
    formId: number;
    id: number;
    tenantRef: string;
}

export interface FormsV1FormsFieldsListRequest {
    formId: number;
    tenantRef: string;
    page?: number;
    pageSize?: number;
}

export interface FormsV1FormsFieldsPartialUpdateRequest {
    formId: number;
    id: number;
    tenantRef: string;
    patchedFormField?: Omit<PatchedFormField, 'id'|'created_at'|'updated_at'>;
}

export interface FormsV1FormsFieldsRetrieveRequest {
    formId: number;
    id: number;
    tenantRef: string;
}

export interface FormsV1FormsFieldsUpdateRequest {
    formId: number;
    id: number;
    tenantRef: string;
    formField: Omit<FormField, 'id'|'created_at'|'updated_at'>;
}

export interface FormsV1FormsListRequest {
    tenantRef: string;
    page?: number;
    pageSize?: number;
}

export interface FormsV1FormsPartialUpdateRequest {
    id: number;
    tenantRef: string;
    patchedForm?: Omit<PatchedForm, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface FormsV1FormsRetrieveRequest {
    id: number;
    tenantRef: string;
}

export interface FormsV1FormsSubmissionsByMemberRetrieveRequest {
    member: number;
    tenantRef: string;
}

export interface FormsV1FormsSubmissionsCreateRequest {
    formId: number;
    tenantRef: string;
    submission: Omit<Submission, 'id'|'created_at'|'updated_at'|'archive_at'|'submitted_date_time'|'tenant'|'created_by'|'updated_by'>;
}

export interface FormsV1FormsSubmissionsDestroyRequest {
    formId: number;
    id: number;
    tenantRef: string;
}

export interface FormsV1FormsSubmissionsFieldResponseCreateRequest {
    fieldId: number;
    formId: number;
    submissionId: number;
    tenantRef: string;
    submissionFieldValue: Omit<SubmissionFieldValue, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface FormsV1FormsSubmissionsFieldResponseDestroyRequest {
    fieldId: number;
    formId: number;
    id: number;
    submissionId: number;
    tenantRef: string;
}

export interface FormsV1FormsSubmissionsFieldResponseListRequest {
    fieldId: number;
    formId: number;
    submissionId: number;
    tenantRef: string;
    page?: number;
    pageSize?: number;
}

export interface FormsV1FormsSubmissionsFieldResponsePartialUpdateRequest {
    fieldId: number;
    formId: number;
    id: number;
    submissionId: number;
    tenantRef: string;
    patchedSubmissionFieldValue?: Omit<PatchedSubmissionFieldValue, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface FormsV1FormsSubmissionsFieldResponseRetrieveRequest {
    fieldId: number;
    formId: number;
    id: number;
    submissionId: number;
    tenantRef: string;
}

export interface FormsV1FormsSubmissionsFieldResponseUpdateRequest {
    fieldId: number;
    formId: number;
    id: number;
    submissionId: number;
    tenantRef: string;
    submissionFieldValue: Omit<SubmissionFieldValue, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface FormsV1FormsSubmissionsListRequest {
    formId: number;
    tenantRef: string;
    member?: number;
    page?: number;
    pageSize?: number;
}

export interface FormsV1FormsSubmissionsPartialUpdateRequest {
    formId: number;
    id: number;
    tenantRef: string;
    patchedSubmission?: Omit<PatchedSubmission, 'id'|'created_at'|'updated_at'|'archive_at'|'submitted_date_time'|'tenant'|'created_by'|'updated_by'>;
}

export interface FormsV1FormsSubmissionsRetrieveRequest {
    formId: number;
    id: number;
    tenantRef: string;
}

export interface FormsV1FormsSubmissionsUpdateRequest {
    formId: number;
    id: number;
    tenantRef: string;
    submission: Omit<Submission, 'id'|'created_at'|'updated_at'|'archive_at'|'submitted_date_time'|'tenant'|'created_by'|'updated_by'>;
}

export interface FormsV1FormsUpdateRequest {
    id: number;
    tenantRef: string;
    form: Omit<Form, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

/**
 * 
 */
export class FormsApi extends runtime.BaseAPI {

    /**
     * Add a new form to the system.
     * Create a new form
     */
    async formsV1FormsCreateRaw(requestParameters: FormsV1FormsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Form>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling formsV1FormsCreate().'
            );
        }

        if (requestParameters['form'] == null) {
            throw new runtime.RequiredError(
                'form',
                'Required parameter "form" was null or undefined when calling formsV1FormsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/forms/v1/forms/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FormToJSON(requestParameters['form']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormFromJSON(jsonValue));
    }

    /**
     * Add a new form to the system.
     * Create a new form
     */
    async formsV1FormsCreate(requestParameters: FormsV1FormsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Form> {
        const response = await this.formsV1FormsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a form from the system by its ID.
     * Delete a form
     */
    async formsV1FormsDestroyRaw(requestParameters: FormsV1FormsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling formsV1FormsDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling formsV1FormsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/forms/v1/forms/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a form from the system by its ID.
     * Delete a form
     */
    async formsV1FormsDestroy(requestParameters: FormsV1FormsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.formsV1FormsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Add a new field to a specific form.
     * Create a new form field
     */
    async formsV1FormsFieldsCreateRaw(requestParameters: FormsV1FormsFieldsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FormField>> {
        if (requestParameters['formId'] == null) {
            throw new runtime.RequiredError(
                'formId',
                'Required parameter "formId" was null or undefined when calling formsV1FormsFieldsCreate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling formsV1FormsFieldsCreate().'
            );
        }

        if (requestParameters['formField'] == null) {
            throw new runtime.RequiredError(
                'formField',
                'Required parameter "formField" was null or undefined when calling formsV1FormsFieldsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/forms/v1/forms/{form_id}/fields/`;
        urlPath = urlPath.replace(`{${"form_id"}}`, encodeURIComponent(String(requestParameters['formId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FormFieldToJSON(requestParameters['formField']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormFieldFromJSON(jsonValue));
    }

    /**
     * Add a new field to a specific form.
     * Create a new form field
     */
    async formsV1FormsFieldsCreate(requestParameters: FormsV1FormsFieldsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FormField> {
        const response = await this.formsV1FormsFieldsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a form field from the system by its ID.
     * Delete a form field
     */
    async formsV1FormsFieldsDestroyRaw(requestParameters: FormsV1FormsFieldsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['formId'] == null) {
            throw new runtime.RequiredError(
                'formId',
                'Required parameter "formId" was null or undefined when calling formsV1FormsFieldsDestroy().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling formsV1FormsFieldsDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling formsV1FormsFieldsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/forms/v1/forms/{form_id}/fields/{id}/`;
        urlPath = urlPath.replace(`{${"form_id"}}`, encodeURIComponent(String(requestParameters['formId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a form field from the system by its ID.
     * Delete a form field
     */
    async formsV1FormsFieldsDestroy(requestParameters: FormsV1FormsFieldsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.formsV1FormsFieldsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a list of all fields associated with a specific form.
     * List all form fields
     */
    async formsV1FormsFieldsListRaw(requestParameters: FormsV1FormsFieldsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFormFieldList>> {
        if (requestParameters['formId'] == null) {
            throw new runtime.RequiredError(
                'formId',
                'Required parameter "formId" was null or undefined when calling formsV1FormsFieldsList().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling formsV1FormsFieldsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/forms/v1/forms/{form_id}/fields/`;
        urlPath = urlPath.replace(`{${"form_id"}}`, encodeURIComponent(String(requestParameters['formId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFormFieldListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all fields associated with a specific form.
     * List all form fields
     */
    async formsV1FormsFieldsList(requestParameters: FormsV1FormsFieldsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFormFieldList> {
        const response = await this.formsV1FormsFieldsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update specific fields of an existing form field without affecting others.
     * Partially update a form field
     */
    async formsV1FormsFieldsPartialUpdateRaw(requestParameters: FormsV1FormsFieldsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FormField>> {
        if (requestParameters['formId'] == null) {
            throw new runtime.RequiredError(
                'formId',
                'Required parameter "formId" was null or undefined when calling formsV1FormsFieldsPartialUpdate().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling formsV1FormsFieldsPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling formsV1FormsFieldsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/forms/v1/forms/{form_id}/fields/{id}/`;
        urlPath = urlPath.replace(`{${"form_id"}}`, encodeURIComponent(String(requestParameters['formId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedFormFieldToJSON(requestParameters['patchedFormField']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormFieldFromJSON(jsonValue));
    }

    /**
     * Update specific fields of an existing form field without affecting others.
     * Partially update a form field
     */
    async formsV1FormsFieldsPartialUpdate(requestParameters: FormsV1FormsFieldsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FormField> {
        const response = await this.formsV1FormsFieldsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed information about a specific form field by its ID.
     * Retrieve a specific form field
     */
    async formsV1FormsFieldsRetrieveRaw(requestParameters: FormsV1FormsFieldsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FormField>> {
        if (requestParameters['formId'] == null) {
            throw new runtime.RequiredError(
                'formId',
                'Required parameter "formId" was null or undefined when calling formsV1FormsFieldsRetrieve().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling formsV1FormsFieldsRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling formsV1FormsFieldsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/forms/v1/forms/{form_id}/fields/{id}/`;
        urlPath = urlPath.replace(`{${"form_id"}}`, encodeURIComponent(String(requestParameters['formId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormFieldFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a specific form field by its ID.
     * Retrieve a specific form field
     */
    async formsV1FormsFieldsRetrieve(requestParameters: FormsV1FormsFieldsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FormField> {
        const response = await this.formsV1FormsFieldsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify the details of an existing form field by its ID.
     * Update an existing form field
     */
    async formsV1FormsFieldsUpdateRaw(requestParameters: FormsV1FormsFieldsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FormField>> {
        if (requestParameters['formId'] == null) {
            throw new runtime.RequiredError(
                'formId',
                'Required parameter "formId" was null or undefined when calling formsV1FormsFieldsUpdate().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling formsV1FormsFieldsUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling formsV1FormsFieldsUpdate().'
            );
        }

        if (requestParameters['formField'] == null) {
            throw new runtime.RequiredError(
                'formField',
                'Required parameter "formField" was null or undefined when calling formsV1FormsFieldsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/forms/v1/forms/{form_id}/fields/{id}/`;
        urlPath = urlPath.replace(`{${"form_id"}}`, encodeURIComponent(String(requestParameters['formId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FormFieldToJSON(requestParameters['formField']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormFieldFromJSON(jsonValue));
    }

    /**
     * Modify the details of an existing form field by its ID.
     * Update an existing form field
     */
    async formsV1FormsFieldsUpdate(requestParameters: FormsV1FormsFieldsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FormField> {
        const response = await this.formsV1FormsFieldsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all forms in the system.
     * List all forms
     */
    async formsV1FormsListRaw(requestParameters: FormsV1FormsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFormList>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling formsV1FormsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/forms/v1/forms/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFormListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all forms in the system.
     * List all forms
     */
    async formsV1FormsList(requestParameters: FormsV1FormsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFormList> {
        const response = await this.formsV1FormsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update specific fields of an existing form without affecting others.
     * Partially update a form
     */
    async formsV1FormsPartialUpdateRaw(requestParameters: FormsV1FormsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Form>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling formsV1FormsPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling formsV1FormsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/forms/v1/forms/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedFormToJSON(requestParameters['patchedForm']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormFromJSON(jsonValue));
    }

    /**
     * Update specific fields of an existing form without affecting others.
     * Partially update a form
     */
    async formsV1FormsPartialUpdate(requestParameters: FormsV1FormsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Form> {
        const response = await this.formsV1FormsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed information about a specific form by its ID.
     * Retrieve a specific form
     */
    async formsV1FormsRetrieveRaw(requestParameters: FormsV1FormsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Form>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling formsV1FormsRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling formsV1FormsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/forms/v1/forms/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a specific form by its ID.
     * Retrieve a specific form
     */
    async formsV1FormsRetrieve(requestParameters: FormsV1FormsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Form> {
        const response = await this.formsV1FormsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Convenience endpoint to list latest submissions for a specific user across forms.
     * List submissions by member
     */
    async formsV1FormsSubmissionsByMemberRetrieveRaw(requestParameters: FormsV1FormsSubmissionsByMemberRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Form>> {
        if (requestParameters['member'] == null) {
            throw new runtime.RequiredError(
                'member',
                'Required parameter "member" was null or undefined when calling formsV1FormsSubmissionsByMemberRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling formsV1FormsSubmissionsByMemberRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['member'] != null) {
            queryParameters['member'] = requestParameters['member'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/forms/v1/forms/submissions-by-member/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormFromJSON(jsonValue));
    }

    /**
     * Convenience endpoint to list latest submissions for a specific user across forms.
     * List submissions by member
     */
    async formsV1FormsSubmissionsByMemberRetrieve(requestParameters: FormsV1FormsSubmissionsByMemberRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Form> {
        const response = await this.formsV1FormsSubmissionsByMemberRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a new submission to a specific form.
     * Create a new submission for a form
     */
    async formsV1FormsSubmissionsCreateRaw(requestParameters: FormsV1FormsSubmissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Submission>> {
        if (requestParameters['formId'] == null) {
            throw new runtime.RequiredError(
                'formId',
                'Required parameter "formId" was null or undefined when calling formsV1FormsSubmissionsCreate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling formsV1FormsSubmissionsCreate().'
            );
        }

        if (requestParameters['submission'] == null) {
            throw new runtime.RequiredError(
                'submission',
                'Required parameter "submission" was null or undefined when calling formsV1FormsSubmissionsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/forms/v1/forms/{form_id}/submissions/`;
        urlPath = urlPath.replace(`{${"form_id"}}`, encodeURIComponent(String(requestParameters['formId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubmissionToJSON(requestParameters['submission']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubmissionFromJSON(jsonValue));
    }

    /**
     * Add a new submission to a specific form.
     * Create a new submission for a form
     */
    async formsV1FormsSubmissionsCreate(requestParameters: FormsV1FormsSubmissionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Submission> {
        const response = await this.formsV1FormsSubmissionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a submission from the system by its ID.
     * Delete a submission
     */
    async formsV1FormsSubmissionsDestroyRaw(requestParameters: FormsV1FormsSubmissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['formId'] == null) {
            throw new runtime.RequiredError(
                'formId',
                'Required parameter "formId" was null or undefined when calling formsV1FormsSubmissionsDestroy().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling formsV1FormsSubmissionsDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling formsV1FormsSubmissionsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/forms/v1/forms/{form_id}/submissions/{id}/`;
        urlPath = urlPath.replace(`{${"form_id"}}`, encodeURIComponent(String(requestParameters['formId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a submission from the system by its ID.
     * Delete a submission
     */
    async formsV1FormsSubmissionsDestroy(requestParameters: FormsV1FormsSubmissionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.formsV1FormsSubmissionsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Add a new field value to a specific submission.
     * Create a new field value for a submission
     */
    async formsV1FormsSubmissionsFieldResponseCreateRaw(requestParameters: FormsV1FormsSubmissionsFieldResponseCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubmissionFieldValue>> {
        if (requestParameters['fieldId'] == null) {
            throw new runtime.RequiredError(
                'fieldId',
                'Required parameter "fieldId" was null or undefined when calling formsV1FormsSubmissionsFieldResponseCreate().'
            );
        }

        if (requestParameters['formId'] == null) {
            throw new runtime.RequiredError(
                'formId',
                'Required parameter "formId" was null or undefined when calling formsV1FormsSubmissionsFieldResponseCreate().'
            );
        }

        if (requestParameters['submissionId'] == null) {
            throw new runtime.RequiredError(
                'submissionId',
                'Required parameter "submissionId" was null or undefined when calling formsV1FormsSubmissionsFieldResponseCreate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling formsV1FormsSubmissionsFieldResponseCreate().'
            );
        }

        if (requestParameters['submissionFieldValue'] == null) {
            throw new runtime.RequiredError(
                'submissionFieldValue',
                'Required parameter "submissionFieldValue" was null or undefined when calling formsV1FormsSubmissionsFieldResponseCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/forms/v1/forms/{form_id}/submissions/{submission_id}/field/{field_id}/response/`;
        urlPath = urlPath.replace(`{${"field_id"}}`, encodeURIComponent(String(requestParameters['fieldId'])));
        urlPath = urlPath.replace(`{${"form_id"}}`, encodeURIComponent(String(requestParameters['formId'])));
        urlPath = urlPath.replace(`{${"submission_id"}}`, encodeURIComponent(String(requestParameters['submissionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubmissionFieldValueToJSON(requestParameters['submissionFieldValue']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubmissionFieldValueFromJSON(jsonValue));
    }

    /**
     * Add a new field value to a specific submission.
     * Create a new field value for a submission
     */
    async formsV1FormsSubmissionsFieldResponseCreate(requestParameters: FormsV1FormsSubmissionsFieldResponseCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubmissionFieldValue> {
        const response = await this.formsV1FormsSubmissionsFieldResponseCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a field value from the system by its ID.
     * Delete a field value
     */
    async formsV1FormsSubmissionsFieldResponseDestroyRaw(requestParameters: FormsV1FormsSubmissionsFieldResponseDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['fieldId'] == null) {
            throw new runtime.RequiredError(
                'fieldId',
                'Required parameter "fieldId" was null or undefined when calling formsV1FormsSubmissionsFieldResponseDestroy().'
            );
        }

        if (requestParameters['formId'] == null) {
            throw new runtime.RequiredError(
                'formId',
                'Required parameter "formId" was null or undefined when calling formsV1FormsSubmissionsFieldResponseDestroy().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling formsV1FormsSubmissionsFieldResponseDestroy().'
            );
        }

        if (requestParameters['submissionId'] == null) {
            throw new runtime.RequiredError(
                'submissionId',
                'Required parameter "submissionId" was null or undefined when calling formsV1FormsSubmissionsFieldResponseDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling formsV1FormsSubmissionsFieldResponseDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/forms/v1/forms/{form_id}/submissions/{submission_id}/field/{field_id}/response/{id}/`;
        urlPath = urlPath.replace(`{${"field_id"}}`, encodeURIComponent(String(requestParameters['fieldId'])));
        urlPath = urlPath.replace(`{${"form_id"}}`, encodeURIComponent(String(requestParameters['formId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"submission_id"}}`, encodeURIComponent(String(requestParameters['submissionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a field value from the system by its ID.
     * Delete a field value
     */
    async formsV1FormsSubmissionsFieldResponseDestroy(requestParameters: FormsV1FormsSubmissionsFieldResponseDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.formsV1FormsSubmissionsFieldResponseDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a list of all field values associated with a specific submission.
     * List all field values for a submission
     */
    async formsV1FormsSubmissionsFieldResponseListRaw(requestParameters: FormsV1FormsSubmissionsFieldResponseListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedSubmissionFieldValueList>> {
        if (requestParameters['fieldId'] == null) {
            throw new runtime.RequiredError(
                'fieldId',
                'Required parameter "fieldId" was null or undefined when calling formsV1FormsSubmissionsFieldResponseList().'
            );
        }

        if (requestParameters['formId'] == null) {
            throw new runtime.RequiredError(
                'formId',
                'Required parameter "formId" was null or undefined when calling formsV1FormsSubmissionsFieldResponseList().'
            );
        }

        if (requestParameters['submissionId'] == null) {
            throw new runtime.RequiredError(
                'submissionId',
                'Required parameter "submissionId" was null or undefined when calling formsV1FormsSubmissionsFieldResponseList().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling formsV1FormsSubmissionsFieldResponseList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/forms/v1/forms/{form_id}/submissions/{submission_id}/field/{field_id}/response/`;
        urlPath = urlPath.replace(`{${"field_id"}}`, encodeURIComponent(String(requestParameters['fieldId'])));
        urlPath = urlPath.replace(`{${"form_id"}}`, encodeURIComponent(String(requestParameters['formId'])));
        urlPath = urlPath.replace(`{${"submission_id"}}`, encodeURIComponent(String(requestParameters['submissionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedSubmissionFieldValueListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all field values associated with a specific submission.
     * List all field values for a submission
     */
    async formsV1FormsSubmissionsFieldResponseList(requestParameters: FormsV1FormsSubmissionsFieldResponseListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedSubmissionFieldValueList> {
        const response = await this.formsV1FormsSubmissionsFieldResponseListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update specific fields of an existing field value without affecting others.
     * Partially update a field value
     */
    async formsV1FormsSubmissionsFieldResponsePartialUpdateRaw(requestParameters: FormsV1FormsSubmissionsFieldResponsePartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubmissionFieldValue>> {
        if (requestParameters['fieldId'] == null) {
            throw new runtime.RequiredError(
                'fieldId',
                'Required parameter "fieldId" was null or undefined when calling formsV1FormsSubmissionsFieldResponsePartialUpdate().'
            );
        }

        if (requestParameters['formId'] == null) {
            throw new runtime.RequiredError(
                'formId',
                'Required parameter "formId" was null or undefined when calling formsV1FormsSubmissionsFieldResponsePartialUpdate().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling formsV1FormsSubmissionsFieldResponsePartialUpdate().'
            );
        }

        if (requestParameters['submissionId'] == null) {
            throw new runtime.RequiredError(
                'submissionId',
                'Required parameter "submissionId" was null or undefined when calling formsV1FormsSubmissionsFieldResponsePartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling formsV1FormsSubmissionsFieldResponsePartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/forms/v1/forms/{form_id}/submissions/{submission_id}/field/{field_id}/response/{id}/`;
        urlPath = urlPath.replace(`{${"field_id"}}`, encodeURIComponent(String(requestParameters['fieldId'])));
        urlPath = urlPath.replace(`{${"form_id"}}`, encodeURIComponent(String(requestParameters['formId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"submission_id"}}`, encodeURIComponent(String(requestParameters['submissionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedSubmissionFieldValueToJSON(requestParameters['patchedSubmissionFieldValue']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubmissionFieldValueFromJSON(jsonValue));
    }

    /**
     * Update specific fields of an existing field value without affecting others.
     * Partially update a field value
     */
    async formsV1FormsSubmissionsFieldResponsePartialUpdate(requestParameters: FormsV1FormsSubmissionsFieldResponsePartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubmissionFieldValue> {
        const response = await this.formsV1FormsSubmissionsFieldResponsePartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed information about a specific field value by its ID.
     * Retrieve a specific field value
     */
    async formsV1FormsSubmissionsFieldResponseRetrieveRaw(requestParameters: FormsV1FormsSubmissionsFieldResponseRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubmissionFieldValue>> {
        if (requestParameters['fieldId'] == null) {
            throw new runtime.RequiredError(
                'fieldId',
                'Required parameter "fieldId" was null or undefined when calling formsV1FormsSubmissionsFieldResponseRetrieve().'
            );
        }

        if (requestParameters['formId'] == null) {
            throw new runtime.RequiredError(
                'formId',
                'Required parameter "formId" was null or undefined when calling formsV1FormsSubmissionsFieldResponseRetrieve().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling formsV1FormsSubmissionsFieldResponseRetrieve().'
            );
        }

        if (requestParameters['submissionId'] == null) {
            throw new runtime.RequiredError(
                'submissionId',
                'Required parameter "submissionId" was null or undefined when calling formsV1FormsSubmissionsFieldResponseRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling formsV1FormsSubmissionsFieldResponseRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/forms/v1/forms/{form_id}/submissions/{submission_id}/field/{field_id}/response/{id}/`;
        urlPath = urlPath.replace(`{${"field_id"}}`, encodeURIComponent(String(requestParameters['fieldId'])));
        urlPath = urlPath.replace(`{${"form_id"}}`, encodeURIComponent(String(requestParameters['formId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"submission_id"}}`, encodeURIComponent(String(requestParameters['submissionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubmissionFieldValueFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a specific field value by its ID.
     * Retrieve a specific field value
     */
    async formsV1FormsSubmissionsFieldResponseRetrieve(requestParameters: FormsV1FormsSubmissionsFieldResponseRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubmissionFieldValue> {
        const response = await this.formsV1FormsSubmissionsFieldResponseRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify the details of an existing field value by its ID.
     * Update an existing field value
     */
    async formsV1FormsSubmissionsFieldResponseUpdateRaw(requestParameters: FormsV1FormsSubmissionsFieldResponseUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubmissionFieldValue>> {
        if (requestParameters['fieldId'] == null) {
            throw new runtime.RequiredError(
                'fieldId',
                'Required parameter "fieldId" was null or undefined when calling formsV1FormsSubmissionsFieldResponseUpdate().'
            );
        }

        if (requestParameters['formId'] == null) {
            throw new runtime.RequiredError(
                'formId',
                'Required parameter "formId" was null or undefined when calling formsV1FormsSubmissionsFieldResponseUpdate().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling formsV1FormsSubmissionsFieldResponseUpdate().'
            );
        }

        if (requestParameters['submissionId'] == null) {
            throw new runtime.RequiredError(
                'submissionId',
                'Required parameter "submissionId" was null or undefined when calling formsV1FormsSubmissionsFieldResponseUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling formsV1FormsSubmissionsFieldResponseUpdate().'
            );
        }

        if (requestParameters['submissionFieldValue'] == null) {
            throw new runtime.RequiredError(
                'submissionFieldValue',
                'Required parameter "submissionFieldValue" was null or undefined when calling formsV1FormsSubmissionsFieldResponseUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/forms/v1/forms/{form_id}/submissions/{submission_id}/field/{field_id}/response/{id}/`;
        urlPath = urlPath.replace(`{${"field_id"}}`, encodeURIComponent(String(requestParameters['fieldId'])));
        urlPath = urlPath.replace(`{${"form_id"}}`, encodeURIComponent(String(requestParameters['formId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"submission_id"}}`, encodeURIComponent(String(requestParameters['submissionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SubmissionFieldValueToJSON(requestParameters['submissionFieldValue']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubmissionFieldValueFromJSON(jsonValue));
    }

    /**
     * Modify the details of an existing field value by its ID.
     * Update an existing field value
     */
    async formsV1FormsSubmissionsFieldResponseUpdate(requestParameters: FormsV1FormsSubmissionsFieldResponseUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubmissionFieldValue> {
        const response = await this.formsV1FormsSubmissionsFieldResponseUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all submissions associated with a specific form.
     * List all submissions for a form
     */
    async formsV1FormsSubmissionsListRaw(requestParameters: FormsV1FormsSubmissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedSubmissionList>> {
        if (requestParameters['formId'] == null) {
            throw new runtime.RequiredError(
                'formId',
                'Required parameter "formId" was null or undefined when calling formsV1FormsSubmissionsList().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling formsV1FormsSubmissionsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['member'] != null) {
            queryParameters['member'] = requestParameters['member'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/forms/v1/forms/{form_id}/submissions/`;
        urlPath = urlPath.replace(`{${"form_id"}}`, encodeURIComponent(String(requestParameters['formId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedSubmissionListFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all submissions associated with a specific form.
     * List all submissions for a form
     */
    async formsV1FormsSubmissionsList(requestParameters: FormsV1FormsSubmissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedSubmissionList> {
        const response = await this.formsV1FormsSubmissionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update specific fields of an existing submission without affecting others.
     * Partially update a submission
     */
    async formsV1FormsSubmissionsPartialUpdateRaw(requestParameters: FormsV1FormsSubmissionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Submission>> {
        if (requestParameters['formId'] == null) {
            throw new runtime.RequiredError(
                'formId',
                'Required parameter "formId" was null or undefined when calling formsV1FormsSubmissionsPartialUpdate().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling formsV1FormsSubmissionsPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling formsV1FormsSubmissionsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/forms/v1/forms/{form_id}/submissions/{id}/`;
        urlPath = urlPath.replace(`{${"form_id"}}`, encodeURIComponent(String(requestParameters['formId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedSubmissionToJSON(requestParameters['patchedSubmission']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubmissionFromJSON(jsonValue));
    }

    /**
     * Update specific fields of an existing submission without affecting others.
     * Partially update a submission
     */
    async formsV1FormsSubmissionsPartialUpdate(requestParameters: FormsV1FormsSubmissionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Submission> {
        const response = await this.formsV1FormsSubmissionsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed information about a specific submission by its ID.
     * Retrieve a specific submission
     */
    async formsV1FormsSubmissionsRetrieveRaw(requestParameters: FormsV1FormsSubmissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Submission>> {
        if (requestParameters['formId'] == null) {
            throw new runtime.RequiredError(
                'formId',
                'Required parameter "formId" was null or undefined when calling formsV1FormsSubmissionsRetrieve().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling formsV1FormsSubmissionsRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling formsV1FormsSubmissionsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/forms/v1/forms/{form_id}/submissions/{id}/`;
        urlPath = urlPath.replace(`{${"form_id"}}`, encodeURIComponent(String(requestParameters['formId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubmissionFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a specific submission by its ID.
     * Retrieve a specific submission
     */
    async formsV1FormsSubmissionsRetrieve(requestParameters: FormsV1FormsSubmissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Submission> {
        const response = await this.formsV1FormsSubmissionsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify the details of an existing submission by its ID.
     * Update an existing submission
     */
    async formsV1FormsSubmissionsUpdateRaw(requestParameters: FormsV1FormsSubmissionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Submission>> {
        if (requestParameters['formId'] == null) {
            throw new runtime.RequiredError(
                'formId',
                'Required parameter "formId" was null or undefined when calling formsV1FormsSubmissionsUpdate().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling formsV1FormsSubmissionsUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling formsV1FormsSubmissionsUpdate().'
            );
        }

        if (requestParameters['submission'] == null) {
            throw new runtime.RequiredError(
                'submission',
                'Required parameter "submission" was null or undefined when calling formsV1FormsSubmissionsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/forms/v1/forms/{form_id}/submissions/{id}/`;
        urlPath = urlPath.replace(`{${"form_id"}}`, encodeURIComponent(String(requestParameters['formId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SubmissionToJSON(requestParameters['submission']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubmissionFromJSON(jsonValue));
    }

    /**
     * Modify the details of an existing submission by its ID.
     * Update an existing submission
     */
    async formsV1FormsSubmissionsUpdate(requestParameters: FormsV1FormsSubmissionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Submission> {
        const response = await this.formsV1FormsSubmissionsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify the details of an existing form by its ID.
     * Update an existing form
     */
    async formsV1FormsUpdateRaw(requestParameters: FormsV1FormsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Form>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling formsV1FormsUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling formsV1FormsUpdate().'
            );
        }

        if (requestParameters['form'] == null) {
            throw new runtime.RequiredError(
                'form',
                'Required parameter "form" was null or undefined when calling formsV1FormsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/forms/v1/forms/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FormToJSON(requestParameters['form']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormFromJSON(jsonValue));
    }

    /**
     * Modify the details of an existing form by its ID.
     * Update an existing form
     */
    async formsV1FormsUpdate(requestParameters: FormsV1FormsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Form> {
        const response = await this.formsV1FormsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
