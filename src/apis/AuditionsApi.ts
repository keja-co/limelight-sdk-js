/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.89
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Audition,
  Feedback,
  PaginatedAuditionList,
  PaginatedFeedbackList,
  PaginatedSignupList,
  PaginatedSlotList,
  PatchedAudition,
  PatchedFeedback,
  PatchedSignup,
  PatchedSlot,
  Signup,
  Slot,
} from '../models/index';
import {
    AuditionFromJSON,
    AuditionToJSON,
    FeedbackFromJSON,
    FeedbackToJSON,
    PaginatedAuditionListFromJSON,
    PaginatedAuditionListToJSON,
    PaginatedFeedbackListFromJSON,
    PaginatedFeedbackListToJSON,
    PaginatedSignupListFromJSON,
    PaginatedSignupListToJSON,
    PaginatedSlotListFromJSON,
    PaginatedSlotListToJSON,
    PatchedAuditionFromJSON,
    PatchedAuditionToJSON,
    PatchedFeedbackFromJSON,
    PatchedFeedbackToJSON,
    PatchedSignupFromJSON,
    PatchedSignupToJSON,
    PatchedSlotFromJSON,
    PatchedSlotToJSON,
    SignupFromJSON,
    SignupToJSON,
    SlotFromJSON,
    SlotToJSON,
} from '../models/index';

export interface AuditionsV1AuditionsCreateRequest {
    tenantRef: string;
    audition: Omit<Audition, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface AuditionsV1AuditionsDestroyRequest {
    id: number;
    pk: number;
    tenantRef: string;
}

export interface AuditionsV1AuditionsListRequest {
    tenantRef: string;
    description?: string;
    descriptionIcontains?: string;
    name?: string;
    nameIcontains?: string;
    page?: number;
    pageSize?: number;
    production?: number;
    venue?: number;
}

export interface AuditionsV1AuditionsPartialUpdateRequest {
    id: number;
    pk: number;
    tenantRef: string;
    patchedAudition?: Omit<PatchedAudition, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface AuditionsV1AuditionsRetrieveRequest {
    id: number;
    pk: number;
    tenantRef: string;
}

export interface AuditionsV1AuditionsSlotsCreateRequest {
    auditionId: number;
    tenantRef: string;
    slot: Omit<Slot, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface AuditionsV1AuditionsSlotsDestroyRequest {
    auditionId: number;
    id: string;
    slotId: number;
    tenantRef: string;
}

export interface AuditionsV1AuditionsSlotsListRequest {
    auditionId: number;
    tenantRef: string;
    page?: number;
    pageSize?: number;
}

export interface AuditionsV1AuditionsSlotsPartialUpdateRequest {
    auditionId: number;
    id: string;
    slotId: number;
    tenantRef: string;
    patchedSlot?: Omit<PatchedSlot, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface AuditionsV1AuditionsSlotsRetrieveRequest {
    auditionId: number;
    id: string;
    slotId: number;
    tenantRef: string;
}

export interface AuditionsV1AuditionsSlotsSignupsCreateRequest {
    auditionId: number;
    slotId: number;
    tenantRef: string;
    signup: Omit<Signup, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface AuditionsV1AuditionsSlotsSignupsDestroyRequest {
    auditionId: number;
    id: string;
    signupId: number;
    slotId: number;
    tenantRef: string;
}

export interface AuditionsV1AuditionsSlotsSignupsFeedbackCreateRequest {
    auditionId: number;
    signupId: number;
    slotId: number;
    tenantRef: string;
    feedback: Omit<Feedback, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface AuditionsV1AuditionsSlotsSignupsFeedbackDestroyRequest {
    auditionId: number;
    id: number;
    signupId: number;
    slotId: number;
    tenantRef: string;
}

export interface AuditionsV1AuditionsSlotsSignupsFeedbackListRequest {
    auditionId: number;
    signupId: number;
    slotId: number;
    tenantRef: string;
    page?: number;
    pageSize?: number;
}

export interface AuditionsV1AuditionsSlotsSignupsFeedbackPartialUpdateRequest {
    auditionId: number;
    id: number;
    signupId: number;
    slotId: number;
    tenantRef: string;
    patchedFeedback?: Omit<PatchedFeedback, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface AuditionsV1AuditionsSlotsSignupsFeedbackRetrieveRequest {
    auditionId: number;
    id: number;
    signupId: number;
    slotId: number;
    tenantRef: string;
}

export interface AuditionsV1AuditionsSlotsSignupsFeedbackUpdateRequest {
    auditionId: number;
    id: number;
    signupId: number;
    slotId: number;
    tenantRef: string;
    feedback: Omit<Feedback, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface AuditionsV1AuditionsSlotsSignupsListRequest {
    auditionId: number;
    slotId: number;
    tenantRef: string;
    page?: number;
    pageSize?: number;
}

export interface AuditionsV1AuditionsSlotsSignupsPartialUpdateRequest {
    auditionId: number;
    id: string;
    signupId: number;
    slotId: number;
    tenantRef: string;
    patchedSignup?: Omit<PatchedSignup, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface AuditionsV1AuditionsSlotsSignupsRetrieveRequest {
    auditionId: number;
    id: string;
    signupId: number;
    slotId: number;
    tenantRef: string;
}

export interface AuditionsV1AuditionsSlotsSignupsUpdateRequest {
    auditionId: number;
    id: string;
    signupId: number;
    slotId: number;
    tenantRef: string;
    signup: Omit<Signup, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface AuditionsV1AuditionsSlotsUpdateRequest {
    auditionId: number;
    id: string;
    slotId: number;
    tenantRef: string;
    slot: Omit<Slot, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

export interface AuditionsV1AuditionsUpdateRequest {
    id: number;
    pk: number;
    tenantRef: string;
    audition: Omit<Audition, 'id'|'created_at'|'updated_at'|'archive_at'|'tenant'|'created_by'|'updated_by'>;
}

/**
 * 
 */
export class AuditionsApi extends runtime.BaseAPI {

    /**
     * Create a new audition for a production.
     * Create an Audition
     */
    async auditionsV1AuditionsCreateRaw(requestParameters: AuditionsV1AuditionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Audition>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsCreate().'
            );
        }

        if (requestParameters['audition'] == null) {
            throw new runtime.RequiredError(
                'audition',
                'Required parameter "audition" was null or undefined when calling auditionsV1AuditionsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/auditions/v1/auditions/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuditionToJSON(requestParameters['audition']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuditionFromJSON(jsonValue));
    }

    /**
     * Create a new audition for a production.
     * Create an Audition
     */
    async auditionsV1AuditionsCreate(requestParameters: AuditionsV1AuditionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Audition> {
        const response = await this.auditionsV1AuditionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a specific audition.
     * Delete an Audition
     */
    async auditionsV1AuditionsDestroyRaw(requestParameters: AuditionsV1AuditionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling auditionsV1AuditionsDestroy().'
            );
        }

        if (requestParameters['pk'] == null) {
            throw new runtime.RequiredError(
                'pk',
                'Required parameter "pk" was null or undefined when calling auditionsV1AuditionsDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/auditions/v1/auditions/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"pk"}}`, encodeURIComponent(String(requestParameters['pk'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a specific audition.
     * Delete an Audition
     */
    async auditionsV1AuditionsDestroy(requestParameters: AuditionsV1AuditionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.auditionsV1AuditionsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve all auditions for productions.
     * List Auditions
     */
    async auditionsV1AuditionsListRaw(requestParameters: AuditionsV1AuditionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedAuditionList>> {
        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['descriptionIcontains'] != null) {
            queryParameters['description__icontains'] = requestParameters['descriptionIcontains'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['nameIcontains'] != null) {
            queryParameters['name__icontains'] = requestParameters['nameIcontains'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['production'] != null) {
            queryParameters['production'] = requestParameters['production'];
        }

        if (requestParameters['venue'] != null) {
            queryParameters['venue'] = requestParameters['venue'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/auditions/v1/auditions/`;
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedAuditionListFromJSON(jsonValue));
    }

    /**
     * Retrieve all auditions for productions.
     * List Auditions
     */
    async auditionsV1AuditionsList(requestParameters: AuditionsV1AuditionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedAuditionList> {
        const response = await this.auditionsV1AuditionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Partially update an existing audition.
     * Partially Update an Audition
     */
    async auditionsV1AuditionsPartialUpdateRaw(requestParameters: AuditionsV1AuditionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Audition>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling auditionsV1AuditionsPartialUpdate().'
            );
        }

        if (requestParameters['pk'] == null) {
            throw new runtime.RequiredError(
                'pk',
                'Required parameter "pk" was null or undefined when calling auditionsV1AuditionsPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/auditions/v1/auditions/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"pk"}}`, encodeURIComponent(String(requestParameters['pk'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedAuditionToJSON(requestParameters['patchedAudition']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuditionFromJSON(jsonValue));
    }

    /**
     * Partially update an existing audition.
     * Partially Update an Audition
     */
    async auditionsV1AuditionsPartialUpdate(requestParameters: AuditionsV1AuditionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Audition> {
        const response = await this.auditionsV1AuditionsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get details of a specific audition.
     * Retrieve an Audition
     */
    async auditionsV1AuditionsRetrieveRaw(requestParameters: AuditionsV1AuditionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Audition>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling auditionsV1AuditionsRetrieve().'
            );
        }

        if (requestParameters['pk'] == null) {
            throw new runtime.RequiredError(
                'pk',
                'Required parameter "pk" was null or undefined when calling auditionsV1AuditionsRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/auditions/v1/auditions/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"pk"}}`, encodeURIComponent(String(requestParameters['pk'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuditionFromJSON(jsonValue));
    }

    /**
     * Get details of a specific audition.
     * Retrieve an Audition
     */
    async auditionsV1AuditionsRetrieve(requestParameters: AuditionsV1AuditionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Audition> {
        const response = await this.auditionsV1AuditionsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new slot for a specific audition.
     * Create a Slot
     */
    async auditionsV1AuditionsSlotsCreateRaw(requestParameters: AuditionsV1AuditionsSlotsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Slot>> {
        if (requestParameters['auditionId'] == null) {
            throw new runtime.RequiredError(
                'auditionId',
                'Required parameter "auditionId" was null or undefined when calling auditionsV1AuditionsSlotsCreate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsSlotsCreate().'
            );
        }

        if (requestParameters['slot'] == null) {
            throw new runtime.RequiredError(
                'slot',
                'Required parameter "slot" was null or undefined when calling auditionsV1AuditionsSlotsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/auditions/v1/auditions/{audition_id}/slots/`;
        urlPath = urlPath.replace(`{${"audition_id"}}`, encodeURIComponent(String(requestParameters['auditionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SlotToJSON(requestParameters['slot']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SlotFromJSON(jsonValue));
    }

    /**
     * Create a new slot for a specific audition.
     * Create a Slot
     */
    async auditionsV1AuditionsSlotsCreate(requestParameters: AuditionsV1AuditionsSlotsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Slot> {
        const response = await this.auditionsV1AuditionsSlotsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a specific slot for an audition.
     * Delete a Slot
     */
    async auditionsV1AuditionsSlotsDestroyRaw(requestParameters: AuditionsV1AuditionsSlotsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['auditionId'] == null) {
            throw new runtime.RequiredError(
                'auditionId',
                'Required parameter "auditionId" was null or undefined when calling auditionsV1AuditionsSlotsDestroy().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling auditionsV1AuditionsSlotsDestroy().'
            );
        }

        if (requestParameters['slotId'] == null) {
            throw new runtime.RequiredError(
                'slotId',
                'Required parameter "slotId" was null or undefined when calling auditionsV1AuditionsSlotsDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsSlotsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/auditions/v1/auditions/{audition_id}/slots/{id}/`;
        urlPath = urlPath.replace(`{${"audition_id"}}`, encodeURIComponent(String(requestParameters['auditionId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"slot_id"}}`, encodeURIComponent(String(requestParameters['slotId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a specific slot for an audition.
     * Delete a Slot
     */
    async auditionsV1AuditionsSlotsDestroy(requestParameters: AuditionsV1AuditionsSlotsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.auditionsV1AuditionsSlotsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve all slots for a specific audition.
     * List Slots for an Audition
     */
    async auditionsV1AuditionsSlotsListRaw(requestParameters: AuditionsV1AuditionsSlotsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedSlotList>> {
        if (requestParameters['auditionId'] == null) {
            throw new runtime.RequiredError(
                'auditionId',
                'Required parameter "auditionId" was null or undefined when calling auditionsV1AuditionsSlotsList().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsSlotsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/auditions/v1/auditions/{audition_id}/slots/`;
        urlPath = urlPath.replace(`{${"audition_id"}}`, encodeURIComponent(String(requestParameters['auditionId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedSlotListFromJSON(jsonValue));
    }

    /**
     * Retrieve all slots for a specific audition.
     * List Slots for an Audition
     */
    async auditionsV1AuditionsSlotsList(requestParameters: AuditionsV1AuditionsSlotsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedSlotList> {
        const response = await this.auditionsV1AuditionsSlotsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Partially update an existing slot for a specific audition.
     * Partially Update a Slot
     */
    async auditionsV1AuditionsSlotsPartialUpdateRaw(requestParameters: AuditionsV1AuditionsSlotsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Slot>> {
        if (requestParameters['auditionId'] == null) {
            throw new runtime.RequiredError(
                'auditionId',
                'Required parameter "auditionId" was null or undefined when calling auditionsV1AuditionsSlotsPartialUpdate().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling auditionsV1AuditionsSlotsPartialUpdate().'
            );
        }

        if (requestParameters['slotId'] == null) {
            throw new runtime.RequiredError(
                'slotId',
                'Required parameter "slotId" was null or undefined when calling auditionsV1AuditionsSlotsPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsSlotsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/auditions/v1/auditions/{audition_id}/slots/{id}/`;
        urlPath = urlPath.replace(`{${"audition_id"}}`, encodeURIComponent(String(requestParameters['auditionId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"slot_id"}}`, encodeURIComponent(String(requestParameters['slotId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedSlotToJSON(requestParameters['patchedSlot']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SlotFromJSON(jsonValue));
    }

    /**
     * Partially update an existing slot for a specific audition.
     * Partially Update a Slot
     */
    async auditionsV1AuditionsSlotsPartialUpdate(requestParameters: AuditionsV1AuditionsSlotsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Slot> {
        const response = await this.auditionsV1AuditionsSlotsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get details of a specific slot for an audition.
     * Retrieve a Slot
     */
    async auditionsV1AuditionsSlotsRetrieveRaw(requestParameters: AuditionsV1AuditionsSlotsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Slot>> {
        if (requestParameters['auditionId'] == null) {
            throw new runtime.RequiredError(
                'auditionId',
                'Required parameter "auditionId" was null or undefined when calling auditionsV1AuditionsSlotsRetrieve().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling auditionsV1AuditionsSlotsRetrieve().'
            );
        }

        if (requestParameters['slotId'] == null) {
            throw new runtime.RequiredError(
                'slotId',
                'Required parameter "slotId" was null or undefined when calling auditionsV1AuditionsSlotsRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsSlotsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/auditions/v1/auditions/{audition_id}/slots/{id}/`;
        urlPath = urlPath.replace(`{${"audition_id"}}`, encodeURIComponent(String(requestParameters['auditionId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"slot_id"}}`, encodeURIComponent(String(requestParameters['slotId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SlotFromJSON(jsonValue));
    }

    /**
     * Get details of a specific slot for an audition.
     * Retrieve a Slot
     */
    async auditionsV1AuditionsSlotsRetrieve(requestParameters: AuditionsV1AuditionsSlotsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Slot> {
        const response = await this.auditionsV1AuditionsSlotsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new signup for a specific slot in an audition.
     * Create a Signup
     */
    async auditionsV1AuditionsSlotsSignupsCreateRaw(requestParameters: AuditionsV1AuditionsSlotsSignupsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Signup>> {
        if (requestParameters['auditionId'] == null) {
            throw new runtime.RequiredError(
                'auditionId',
                'Required parameter "auditionId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsCreate().'
            );
        }

        if (requestParameters['slotId'] == null) {
            throw new runtime.RequiredError(
                'slotId',
                'Required parameter "slotId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsCreate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsSlotsSignupsCreate().'
            );
        }

        if (requestParameters['signup'] == null) {
            throw new runtime.RequiredError(
                'signup',
                'Required parameter "signup" was null or undefined when calling auditionsV1AuditionsSlotsSignupsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/auditions/v1/auditions/{audition_id}/slots/{slot_id}/signups/`;
        urlPath = urlPath.replace(`{${"audition_id"}}`, encodeURIComponent(String(requestParameters['auditionId'])));
        urlPath = urlPath.replace(`{${"slot_id"}}`, encodeURIComponent(String(requestParameters['slotId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignupToJSON(requestParameters['signup']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SignupFromJSON(jsonValue));
    }

    /**
     * Create a new signup for a specific slot in an audition.
     * Create a Signup
     */
    async auditionsV1AuditionsSlotsSignupsCreate(requestParameters: AuditionsV1AuditionsSlotsSignupsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Signup> {
        const response = await this.auditionsV1AuditionsSlotsSignupsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a specific signup for a slot in an audition.
     * Delete a Signup
     */
    async auditionsV1AuditionsSlotsSignupsDestroyRaw(requestParameters: AuditionsV1AuditionsSlotsSignupsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['auditionId'] == null) {
            throw new runtime.RequiredError(
                'auditionId',
                'Required parameter "auditionId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsDestroy().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling auditionsV1AuditionsSlotsSignupsDestroy().'
            );
        }

        if (requestParameters['signupId'] == null) {
            throw new runtime.RequiredError(
                'signupId',
                'Required parameter "signupId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsDestroy().'
            );
        }

        if (requestParameters['slotId'] == null) {
            throw new runtime.RequiredError(
                'slotId',
                'Required parameter "slotId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsSlotsSignupsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/auditions/v1/auditions/{audition_id}/slots/{slot_id}/signups/{id}/`;
        urlPath = urlPath.replace(`{${"audition_id"}}`, encodeURIComponent(String(requestParameters['auditionId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"signup_id"}}`, encodeURIComponent(String(requestParameters['signupId'])));
        urlPath = urlPath.replace(`{${"slot_id"}}`, encodeURIComponent(String(requestParameters['slotId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a specific signup for a slot in an audition.
     * Delete a Signup
     */
    async auditionsV1AuditionsSlotsSignupsDestroy(requestParameters: AuditionsV1AuditionsSlotsSignupsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.auditionsV1AuditionsSlotsSignupsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Create new feedback for a specific signup in an audition slot.
     * Create Feedback
     */
    async auditionsV1AuditionsSlotsSignupsFeedbackCreateRaw(requestParameters: AuditionsV1AuditionsSlotsSignupsFeedbackCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Feedback>> {
        if (requestParameters['auditionId'] == null) {
            throw new runtime.RequiredError(
                'auditionId',
                'Required parameter "auditionId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackCreate().'
            );
        }

        if (requestParameters['signupId'] == null) {
            throw new runtime.RequiredError(
                'signupId',
                'Required parameter "signupId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackCreate().'
            );
        }

        if (requestParameters['slotId'] == null) {
            throw new runtime.RequiredError(
                'slotId',
                'Required parameter "slotId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackCreate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackCreate().'
            );
        }

        if (requestParameters['feedback'] == null) {
            throw new runtime.RequiredError(
                'feedback',
                'Required parameter "feedback" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/auditions/v1/auditions/{audition_id}/slots/{slot_id}/signups/{signup_id}/feedback/`;
        urlPath = urlPath.replace(`{${"audition_id"}}`, encodeURIComponent(String(requestParameters['auditionId'])));
        urlPath = urlPath.replace(`{${"signup_id"}}`, encodeURIComponent(String(requestParameters['signupId'])));
        urlPath = urlPath.replace(`{${"slot_id"}}`, encodeURIComponent(String(requestParameters['slotId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FeedbackToJSON(requestParameters['feedback']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeedbackFromJSON(jsonValue));
    }

    /**
     * Create new feedback for a specific signup in an audition slot.
     * Create Feedback
     */
    async auditionsV1AuditionsSlotsSignupsFeedbackCreate(requestParameters: AuditionsV1AuditionsSlotsSignupsFeedbackCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Feedback> {
        const response = await this.auditionsV1AuditionsSlotsSignupsFeedbackCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete specific feedback for a signup in an audition slot.
     * Delete Feedback
     */
    async auditionsV1AuditionsSlotsSignupsFeedbackDestroyRaw(requestParameters: AuditionsV1AuditionsSlotsSignupsFeedbackDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['auditionId'] == null) {
            throw new runtime.RequiredError(
                'auditionId',
                'Required parameter "auditionId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackDestroy().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackDestroy().'
            );
        }

        if (requestParameters['signupId'] == null) {
            throw new runtime.RequiredError(
                'signupId',
                'Required parameter "signupId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackDestroy().'
            );
        }

        if (requestParameters['slotId'] == null) {
            throw new runtime.RequiredError(
                'slotId',
                'Required parameter "slotId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackDestroy().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/auditions/v1/auditions/{audition_id}/slots/{slot_id}/signups/{signup_id}/feedback/{id}/`;
        urlPath = urlPath.replace(`{${"audition_id"}}`, encodeURIComponent(String(requestParameters['auditionId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"signup_id"}}`, encodeURIComponent(String(requestParameters['signupId'])));
        urlPath = urlPath.replace(`{${"slot_id"}}`, encodeURIComponent(String(requestParameters['slotId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete specific feedback for a signup in an audition slot.
     * Delete Feedback
     */
    async auditionsV1AuditionsSlotsSignupsFeedbackDestroy(requestParameters: AuditionsV1AuditionsSlotsSignupsFeedbackDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.auditionsV1AuditionsSlotsSignupsFeedbackDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve all feedback for a specific signup in an audition slot.
     * List Feedback for a Signup
     */
    async auditionsV1AuditionsSlotsSignupsFeedbackListRaw(requestParameters: AuditionsV1AuditionsSlotsSignupsFeedbackListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFeedbackList>> {
        if (requestParameters['auditionId'] == null) {
            throw new runtime.RequiredError(
                'auditionId',
                'Required parameter "auditionId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackList().'
            );
        }

        if (requestParameters['signupId'] == null) {
            throw new runtime.RequiredError(
                'signupId',
                'Required parameter "signupId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackList().'
            );
        }

        if (requestParameters['slotId'] == null) {
            throw new runtime.RequiredError(
                'slotId',
                'Required parameter "slotId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackList().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/auditions/v1/auditions/{audition_id}/slots/{slot_id}/signups/{signup_id}/feedback/`;
        urlPath = urlPath.replace(`{${"audition_id"}}`, encodeURIComponent(String(requestParameters['auditionId'])));
        urlPath = urlPath.replace(`{${"signup_id"}}`, encodeURIComponent(String(requestParameters['signupId'])));
        urlPath = urlPath.replace(`{${"slot_id"}}`, encodeURIComponent(String(requestParameters['slotId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFeedbackListFromJSON(jsonValue));
    }

    /**
     * Retrieve all feedback for a specific signup in an audition slot.
     * List Feedback for a Signup
     */
    async auditionsV1AuditionsSlotsSignupsFeedbackList(requestParameters: AuditionsV1AuditionsSlotsSignupsFeedbackListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFeedbackList> {
        const response = await this.auditionsV1AuditionsSlotsSignupsFeedbackListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Partially update existing feedback for a specific signup in an audition slot.
     * Partially Update Feedback
     */
    async auditionsV1AuditionsSlotsSignupsFeedbackPartialUpdateRaw(requestParameters: AuditionsV1AuditionsSlotsSignupsFeedbackPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Feedback>> {
        if (requestParameters['auditionId'] == null) {
            throw new runtime.RequiredError(
                'auditionId',
                'Required parameter "auditionId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackPartialUpdate().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackPartialUpdate().'
            );
        }

        if (requestParameters['signupId'] == null) {
            throw new runtime.RequiredError(
                'signupId',
                'Required parameter "signupId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackPartialUpdate().'
            );
        }

        if (requestParameters['slotId'] == null) {
            throw new runtime.RequiredError(
                'slotId',
                'Required parameter "slotId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/auditions/v1/auditions/{audition_id}/slots/{slot_id}/signups/{signup_id}/feedback/{id}/`;
        urlPath = urlPath.replace(`{${"audition_id"}}`, encodeURIComponent(String(requestParameters['auditionId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"signup_id"}}`, encodeURIComponent(String(requestParameters['signupId'])));
        urlPath = urlPath.replace(`{${"slot_id"}}`, encodeURIComponent(String(requestParameters['slotId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedFeedbackToJSON(requestParameters['patchedFeedback']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeedbackFromJSON(jsonValue));
    }

    /**
     * Partially update existing feedback for a specific signup in an audition slot.
     * Partially Update Feedback
     */
    async auditionsV1AuditionsSlotsSignupsFeedbackPartialUpdate(requestParameters: AuditionsV1AuditionsSlotsSignupsFeedbackPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Feedback> {
        const response = await this.auditionsV1AuditionsSlotsSignupsFeedbackPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get details of specific feedback for a signup in an audition slot.
     * Retrieve Feedback
     */
    async auditionsV1AuditionsSlotsSignupsFeedbackRetrieveRaw(requestParameters: AuditionsV1AuditionsSlotsSignupsFeedbackRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Feedback>> {
        if (requestParameters['auditionId'] == null) {
            throw new runtime.RequiredError(
                'auditionId',
                'Required parameter "auditionId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackRetrieve().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackRetrieve().'
            );
        }

        if (requestParameters['signupId'] == null) {
            throw new runtime.RequiredError(
                'signupId',
                'Required parameter "signupId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackRetrieve().'
            );
        }

        if (requestParameters['slotId'] == null) {
            throw new runtime.RequiredError(
                'slotId',
                'Required parameter "slotId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/auditions/v1/auditions/{audition_id}/slots/{slot_id}/signups/{signup_id}/feedback/{id}/`;
        urlPath = urlPath.replace(`{${"audition_id"}}`, encodeURIComponent(String(requestParameters['auditionId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"signup_id"}}`, encodeURIComponent(String(requestParameters['signupId'])));
        urlPath = urlPath.replace(`{${"slot_id"}}`, encodeURIComponent(String(requestParameters['slotId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeedbackFromJSON(jsonValue));
    }

    /**
     * Get details of specific feedback for a signup in an audition slot.
     * Retrieve Feedback
     */
    async auditionsV1AuditionsSlotsSignupsFeedbackRetrieve(requestParameters: AuditionsV1AuditionsSlotsSignupsFeedbackRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Feedback> {
        const response = await this.auditionsV1AuditionsSlotsSignupsFeedbackRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update existing feedback for a specific signup in an audition slot.
     * Update Feedback
     */
    async auditionsV1AuditionsSlotsSignupsFeedbackUpdateRaw(requestParameters: AuditionsV1AuditionsSlotsSignupsFeedbackUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Feedback>> {
        if (requestParameters['auditionId'] == null) {
            throw new runtime.RequiredError(
                'auditionId',
                'Required parameter "auditionId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackUpdate().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackUpdate().'
            );
        }

        if (requestParameters['signupId'] == null) {
            throw new runtime.RequiredError(
                'signupId',
                'Required parameter "signupId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackUpdate().'
            );
        }

        if (requestParameters['slotId'] == null) {
            throw new runtime.RequiredError(
                'slotId',
                'Required parameter "slotId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackUpdate().'
            );
        }

        if (requestParameters['feedback'] == null) {
            throw new runtime.RequiredError(
                'feedback',
                'Required parameter "feedback" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/auditions/v1/auditions/{audition_id}/slots/{slot_id}/signups/{signup_id}/feedback/{id}/`;
        urlPath = urlPath.replace(`{${"audition_id"}}`, encodeURIComponent(String(requestParameters['auditionId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"signup_id"}}`, encodeURIComponent(String(requestParameters['signupId'])));
        urlPath = urlPath.replace(`{${"slot_id"}}`, encodeURIComponent(String(requestParameters['slotId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FeedbackToJSON(requestParameters['feedback']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeedbackFromJSON(jsonValue));
    }

    /**
     * Update existing feedback for a specific signup in an audition slot.
     * Update Feedback
     */
    async auditionsV1AuditionsSlotsSignupsFeedbackUpdate(requestParameters: AuditionsV1AuditionsSlotsSignupsFeedbackUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Feedback> {
        const response = await this.auditionsV1AuditionsSlotsSignupsFeedbackUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all signups for a specific slot in an audition.
     * List Signups for a Slot
     */
    async auditionsV1AuditionsSlotsSignupsListRaw(requestParameters: AuditionsV1AuditionsSlotsSignupsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedSignupList>> {
        if (requestParameters['auditionId'] == null) {
            throw new runtime.RequiredError(
                'auditionId',
                'Required parameter "auditionId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsList().'
            );
        }

        if (requestParameters['slotId'] == null) {
            throw new runtime.RequiredError(
                'slotId',
                'Required parameter "slotId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsList().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsSlotsSignupsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/auditions/v1/auditions/{audition_id}/slots/{slot_id}/signups/`;
        urlPath = urlPath.replace(`{${"audition_id"}}`, encodeURIComponent(String(requestParameters['auditionId'])));
        urlPath = urlPath.replace(`{${"slot_id"}}`, encodeURIComponent(String(requestParameters['slotId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedSignupListFromJSON(jsonValue));
    }

    /**
     * Retrieve all signups for a specific slot in an audition.
     * List Signups for a Slot
     */
    async auditionsV1AuditionsSlotsSignupsList(requestParameters: AuditionsV1AuditionsSlotsSignupsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedSignupList> {
        const response = await this.auditionsV1AuditionsSlotsSignupsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Partially update an existing signup for a specific slot in an audition.
     * Partially Update a Signup
     */
    async auditionsV1AuditionsSlotsSignupsPartialUpdateRaw(requestParameters: AuditionsV1AuditionsSlotsSignupsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Signup>> {
        if (requestParameters['auditionId'] == null) {
            throw new runtime.RequiredError(
                'auditionId',
                'Required parameter "auditionId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsPartialUpdate().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling auditionsV1AuditionsSlotsSignupsPartialUpdate().'
            );
        }

        if (requestParameters['signupId'] == null) {
            throw new runtime.RequiredError(
                'signupId',
                'Required parameter "signupId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsPartialUpdate().'
            );
        }

        if (requestParameters['slotId'] == null) {
            throw new runtime.RequiredError(
                'slotId',
                'Required parameter "slotId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsPartialUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsSlotsSignupsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/auditions/v1/auditions/{audition_id}/slots/{slot_id}/signups/{id}/`;
        urlPath = urlPath.replace(`{${"audition_id"}}`, encodeURIComponent(String(requestParameters['auditionId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"signup_id"}}`, encodeURIComponent(String(requestParameters['signupId'])));
        urlPath = urlPath.replace(`{${"slot_id"}}`, encodeURIComponent(String(requestParameters['slotId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedSignupToJSON(requestParameters['patchedSignup']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SignupFromJSON(jsonValue));
    }

    /**
     * Partially update an existing signup for a specific slot in an audition.
     * Partially Update a Signup
     */
    async auditionsV1AuditionsSlotsSignupsPartialUpdate(requestParameters: AuditionsV1AuditionsSlotsSignupsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Signup> {
        const response = await this.auditionsV1AuditionsSlotsSignupsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get details of a specific signup for a slot in an audition.
     * Retrieve a Signup
     */
    async auditionsV1AuditionsSlotsSignupsRetrieveRaw(requestParameters: AuditionsV1AuditionsSlotsSignupsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Signup>> {
        if (requestParameters['auditionId'] == null) {
            throw new runtime.RequiredError(
                'auditionId',
                'Required parameter "auditionId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsRetrieve().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling auditionsV1AuditionsSlotsSignupsRetrieve().'
            );
        }

        if (requestParameters['signupId'] == null) {
            throw new runtime.RequiredError(
                'signupId',
                'Required parameter "signupId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsRetrieve().'
            );
        }

        if (requestParameters['slotId'] == null) {
            throw new runtime.RequiredError(
                'slotId',
                'Required parameter "slotId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsRetrieve().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsSlotsSignupsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/t/{tenant_ref}/auditions/v1/auditions/{audition_id}/slots/{slot_id}/signups/{id}/`;
        urlPath = urlPath.replace(`{${"audition_id"}}`, encodeURIComponent(String(requestParameters['auditionId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"signup_id"}}`, encodeURIComponent(String(requestParameters['signupId'])));
        urlPath = urlPath.replace(`{${"slot_id"}}`, encodeURIComponent(String(requestParameters['slotId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SignupFromJSON(jsonValue));
    }

    /**
     * Get details of a specific signup for a slot in an audition.
     * Retrieve a Signup
     */
    async auditionsV1AuditionsSlotsSignupsRetrieve(requestParameters: AuditionsV1AuditionsSlotsSignupsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Signup> {
        const response = await this.auditionsV1AuditionsSlotsSignupsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing signup for a specific slot in an audition.
     * Update a Signup
     */
    async auditionsV1AuditionsSlotsSignupsUpdateRaw(requestParameters: AuditionsV1AuditionsSlotsSignupsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Signup>> {
        if (requestParameters['auditionId'] == null) {
            throw new runtime.RequiredError(
                'auditionId',
                'Required parameter "auditionId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsUpdate().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling auditionsV1AuditionsSlotsSignupsUpdate().'
            );
        }

        if (requestParameters['signupId'] == null) {
            throw new runtime.RequiredError(
                'signupId',
                'Required parameter "signupId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsUpdate().'
            );
        }

        if (requestParameters['slotId'] == null) {
            throw new runtime.RequiredError(
                'slotId',
                'Required parameter "slotId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsSlotsSignupsUpdate().'
            );
        }

        if (requestParameters['signup'] == null) {
            throw new runtime.RequiredError(
                'signup',
                'Required parameter "signup" was null or undefined when calling auditionsV1AuditionsSlotsSignupsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/auditions/v1/auditions/{audition_id}/slots/{slot_id}/signups/{id}/`;
        urlPath = urlPath.replace(`{${"audition_id"}}`, encodeURIComponent(String(requestParameters['auditionId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"signup_id"}}`, encodeURIComponent(String(requestParameters['signupId'])));
        urlPath = urlPath.replace(`{${"slot_id"}}`, encodeURIComponent(String(requestParameters['slotId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SignupToJSON(requestParameters['signup']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SignupFromJSON(jsonValue));
    }

    /**
     * Update an existing signup for a specific slot in an audition.
     * Update a Signup
     */
    async auditionsV1AuditionsSlotsSignupsUpdate(requestParameters: AuditionsV1AuditionsSlotsSignupsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Signup> {
        const response = await this.auditionsV1AuditionsSlotsSignupsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing slot for a specific audition.
     * Update a Slot
     */
    async auditionsV1AuditionsSlotsUpdateRaw(requestParameters: AuditionsV1AuditionsSlotsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Slot>> {
        if (requestParameters['auditionId'] == null) {
            throw new runtime.RequiredError(
                'auditionId',
                'Required parameter "auditionId" was null or undefined when calling auditionsV1AuditionsSlotsUpdate().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling auditionsV1AuditionsSlotsUpdate().'
            );
        }

        if (requestParameters['slotId'] == null) {
            throw new runtime.RequiredError(
                'slotId',
                'Required parameter "slotId" was null or undefined when calling auditionsV1AuditionsSlotsUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsSlotsUpdate().'
            );
        }

        if (requestParameters['slot'] == null) {
            throw new runtime.RequiredError(
                'slot',
                'Required parameter "slot" was null or undefined when calling auditionsV1AuditionsSlotsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/auditions/v1/auditions/{audition_id}/slots/{id}/`;
        urlPath = urlPath.replace(`{${"audition_id"}}`, encodeURIComponent(String(requestParameters['auditionId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"slot_id"}}`, encodeURIComponent(String(requestParameters['slotId'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SlotToJSON(requestParameters['slot']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SlotFromJSON(jsonValue));
    }

    /**
     * Update an existing slot for a specific audition.
     * Update a Slot
     */
    async auditionsV1AuditionsSlotsUpdate(requestParameters: AuditionsV1AuditionsSlotsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Slot> {
        const response = await this.auditionsV1AuditionsSlotsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing audition.
     * Update an Audition
     */
    async auditionsV1AuditionsUpdateRaw(requestParameters: AuditionsV1AuditionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Audition>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling auditionsV1AuditionsUpdate().'
            );
        }

        if (requestParameters['pk'] == null) {
            throw new runtime.RequiredError(
                'pk',
                'Required parameter "pk" was null or undefined when calling auditionsV1AuditionsUpdate().'
            );
        }

        if (requestParameters['tenantRef'] == null) {
            throw new runtime.RequiredError(
                'tenantRef',
                'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsUpdate().'
            );
        }

        if (requestParameters['audition'] == null) {
            throw new runtime.RequiredError(
                'audition',
                'Required parameter "audition" was null or undefined when calling auditionsV1AuditionsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/t/{tenant_ref}/auditions/v1/auditions/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"pk"}}`, encodeURIComponent(String(requestParameters['pk'])));
        urlPath = urlPath.replace(`{${"tenant_ref"}}`, encodeURIComponent(String(requestParameters['tenantRef'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuditionToJSON(requestParameters['audition']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuditionFromJSON(jsonValue));
    }

    /**
     * Update an existing audition.
     * Update an Audition
     */
    async auditionsV1AuditionsUpdate(requestParameters: AuditionsV1AuditionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Audition> {
        const response = await this.auditionsV1AuditionsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
