/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.62
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Audition,
  Feedback,
  PaginatedAuditionList,
  PaginatedFeedbackList,
  PaginatedSignupList,
  PaginatedSlotList,
  PatchedAudition,
  PatchedFeedback,
  PatchedSignup,
  PatchedSlot,
  Signup,
  Slot,
} from '../models/index';
import {
    AuditionFromJSON,
    AuditionToJSON,
    FeedbackFromJSON,
    FeedbackToJSON,
    PaginatedAuditionListFromJSON,
    PaginatedAuditionListToJSON,
    PaginatedFeedbackListFromJSON,
    PaginatedFeedbackListToJSON,
    PaginatedSignupListFromJSON,
    PaginatedSignupListToJSON,
    PaginatedSlotListFromJSON,
    PaginatedSlotListToJSON,
    PatchedAuditionFromJSON,
    PatchedAuditionToJSON,
    PatchedFeedbackFromJSON,
    PatchedFeedbackToJSON,
    PatchedSignupFromJSON,
    PatchedSignupToJSON,
    PatchedSlotFromJSON,
    PatchedSlotToJSON,
    SignupFromJSON,
    SignupToJSON,
    SlotFromJSON,
    SlotToJSON,
} from '../models/index';

export interface AuditionsV1AuditionCreateRequest {
    audition: Omit<Audition, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface AuditionsV1AuditionDestroyRequest {
    id: number;
}

export interface AuditionsV1AuditionListRequest {
    page?: number;
    pageSize?: number;
}

export interface AuditionsV1AuditionPartialUpdateRequest {
    id: number;
    patchedAudition?: Omit<PatchedAudition, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface AuditionsV1AuditionRetrieveRequest {
    id: number;
}

export interface AuditionsV1AuditionUpdateRequest {
    id: number;
    audition: Omit<Audition, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface AuditionsV1FeedbackCreateRequest {
    feedback: Omit<Feedback, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface AuditionsV1FeedbackDestroyRequest {
    id: number;
}

export interface AuditionsV1FeedbackListRequest {
    page?: number;
    pageSize?: number;
}

export interface AuditionsV1FeedbackPartialUpdateRequest {
    id: number;
    patchedFeedback?: Omit<PatchedFeedback, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface AuditionsV1FeedbackRetrieveRequest {
    id: number;
}

export interface AuditionsV1FeedbackUpdateRequest {
    id: number;
    feedback: Omit<Feedback, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface AuditionsV1SignupCreateRequest {
    signup: Omit<Signup, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface AuditionsV1SignupDestroyRequest {
    id: number;
}

export interface AuditionsV1SignupListRequest {
    page?: number;
    pageSize?: number;
}

export interface AuditionsV1SignupPartialUpdateRequest {
    id: number;
    patchedSignup?: Omit<PatchedSignup, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface AuditionsV1SignupRetrieveRequest {
    id: number;
}

export interface AuditionsV1SignupUpdateRequest {
    id: number;
    signup: Omit<Signup, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface AuditionsV1SlotCreateRequest {
    slot: Omit<Slot, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface AuditionsV1SlotDestroyRequest {
    id: number;
}

export interface AuditionsV1SlotListRequest {
    page?: number;
    pageSize?: number;
}

export interface AuditionsV1SlotPartialUpdateRequest {
    id: number;
    patchedSlot?: Omit<PatchedSlot, 'id'|'created_at'|'updated_at'|'created_by'>;
}

export interface AuditionsV1SlotRetrieveRequest {
    id: number;
}

export interface AuditionsV1SlotUpdateRequest {
    id: number;
    slot: Omit<Slot, 'id'|'created_at'|'updated_at'|'created_by'>;
}

/**
 * 
 */
export class AuditionsApi extends runtime.BaseAPI {

    /**
     */
    async auditionsV1AuditionCreateRaw(requestParameters: AuditionsV1AuditionCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Audition>> {
        if (requestParameters['audition'] == null) {
            throw new runtime.RequiredError(
                'audition',
                'Required parameter "audition" was null or undefined when calling auditionsV1AuditionCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/auditions/v1/audition/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuditionToJSON(requestParameters['audition']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuditionFromJSON(jsonValue));
    }

    /**
     */
    async auditionsV1AuditionCreate(requestParameters: AuditionsV1AuditionCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Audition> {
        const response = await this.auditionsV1AuditionCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async auditionsV1AuditionDestroyRaw(requestParameters: AuditionsV1AuditionDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling auditionsV1AuditionDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/auditions/v1/audition/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async auditionsV1AuditionDestroy(requestParameters: AuditionsV1AuditionDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.auditionsV1AuditionDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async auditionsV1AuditionListRaw(requestParameters: AuditionsV1AuditionListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedAuditionList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/auditions/v1/audition/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedAuditionListFromJSON(jsonValue));
    }

    /**
     */
    async auditionsV1AuditionList(requestParameters: AuditionsV1AuditionListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedAuditionList> {
        const response = await this.auditionsV1AuditionListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async auditionsV1AuditionPartialUpdateRaw(requestParameters: AuditionsV1AuditionPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Audition>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling auditionsV1AuditionPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/auditions/v1/audition/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedAuditionToJSON(requestParameters['patchedAudition']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuditionFromJSON(jsonValue));
    }

    /**
     */
    async auditionsV1AuditionPartialUpdate(requestParameters: AuditionsV1AuditionPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Audition> {
        const response = await this.auditionsV1AuditionPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async auditionsV1AuditionRetrieveRaw(requestParameters: AuditionsV1AuditionRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Audition>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling auditionsV1AuditionRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/auditions/v1/audition/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuditionFromJSON(jsonValue));
    }

    /**
     */
    async auditionsV1AuditionRetrieve(requestParameters: AuditionsV1AuditionRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Audition> {
        const response = await this.auditionsV1AuditionRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async auditionsV1AuditionUpdateRaw(requestParameters: AuditionsV1AuditionUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Audition>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling auditionsV1AuditionUpdate().'
            );
        }

        if (requestParameters['audition'] == null) {
            throw new runtime.RequiredError(
                'audition',
                'Required parameter "audition" was null or undefined when calling auditionsV1AuditionUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/auditions/v1/audition/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuditionToJSON(requestParameters['audition']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuditionFromJSON(jsonValue));
    }

    /**
     */
    async auditionsV1AuditionUpdate(requestParameters: AuditionsV1AuditionUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Audition> {
        const response = await this.auditionsV1AuditionUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async auditionsV1FeedbackCreateRaw(requestParameters: AuditionsV1FeedbackCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Feedback>> {
        if (requestParameters['feedback'] == null) {
            throw new runtime.RequiredError(
                'feedback',
                'Required parameter "feedback" was null or undefined when calling auditionsV1FeedbackCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/auditions/v1/feedback/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FeedbackToJSON(requestParameters['feedback']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeedbackFromJSON(jsonValue));
    }

    /**
     */
    async auditionsV1FeedbackCreate(requestParameters: AuditionsV1FeedbackCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Feedback> {
        const response = await this.auditionsV1FeedbackCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async auditionsV1FeedbackDestroyRaw(requestParameters: AuditionsV1FeedbackDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling auditionsV1FeedbackDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/auditions/v1/feedback/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async auditionsV1FeedbackDestroy(requestParameters: AuditionsV1FeedbackDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.auditionsV1FeedbackDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async auditionsV1FeedbackListRaw(requestParameters: AuditionsV1FeedbackListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFeedbackList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/auditions/v1/feedback/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFeedbackListFromJSON(jsonValue));
    }

    /**
     */
    async auditionsV1FeedbackList(requestParameters: AuditionsV1FeedbackListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFeedbackList> {
        const response = await this.auditionsV1FeedbackListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async auditionsV1FeedbackPartialUpdateRaw(requestParameters: AuditionsV1FeedbackPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Feedback>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling auditionsV1FeedbackPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/auditions/v1/feedback/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedFeedbackToJSON(requestParameters['patchedFeedback']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeedbackFromJSON(jsonValue));
    }

    /**
     */
    async auditionsV1FeedbackPartialUpdate(requestParameters: AuditionsV1FeedbackPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Feedback> {
        const response = await this.auditionsV1FeedbackPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async auditionsV1FeedbackRetrieveRaw(requestParameters: AuditionsV1FeedbackRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Feedback>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling auditionsV1FeedbackRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/auditions/v1/feedback/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeedbackFromJSON(jsonValue));
    }

    /**
     */
    async auditionsV1FeedbackRetrieve(requestParameters: AuditionsV1FeedbackRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Feedback> {
        const response = await this.auditionsV1FeedbackRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async auditionsV1FeedbackUpdateRaw(requestParameters: AuditionsV1FeedbackUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Feedback>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling auditionsV1FeedbackUpdate().'
            );
        }

        if (requestParameters['feedback'] == null) {
            throw new runtime.RequiredError(
                'feedback',
                'Required parameter "feedback" was null or undefined when calling auditionsV1FeedbackUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/auditions/v1/feedback/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FeedbackToJSON(requestParameters['feedback']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeedbackFromJSON(jsonValue));
    }

    /**
     */
    async auditionsV1FeedbackUpdate(requestParameters: AuditionsV1FeedbackUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Feedback> {
        const response = await this.auditionsV1FeedbackUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async auditionsV1SignupCreateRaw(requestParameters: AuditionsV1SignupCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Signup>> {
        if (requestParameters['signup'] == null) {
            throw new runtime.RequiredError(
                'signup',
                'Required parameter "signup" was null or undefined when calling auditionsV1SignupCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/auditions/v1/signup/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignupToJSON(requestParameters['signup']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SignupFromJSON(jsonValue));
    }

    /**
     */
    async auditionsV1SignupCreate(requestParameters: AuditionsV1SignupCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Signup> {
        const response = await this.auditionsV1SignupCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async auditionsV1SignupDestroyRaw(requestParameters: AuditionsV1SignupDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling auditionsV1SignupDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/auditions/v1/signup/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async auditionsV1SignupDestroy(requestParameters: AuditionsV1SignupDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.auditionsV1SignupDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async auditionsV1SignupListRaw(requestParameters: AuditionsV1SignupListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedSignupList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/auditions/v1/signup/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedSignupListFromJSON(jsonValue));
    }

    /**
     */
    async auditionsV1SignupList(requestParameters: AuditionsV1SignupListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedSignupList> {
        const response = await this.auditionsV1SignupListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async auditionsV1SignupPartialUpdateRaw(requestParameters: AuditionsV1SignupPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Signup>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling auditionsV1SignupPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/auditions/v1/signup/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedSignupToJSON(requestParameters['patchedSignup']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SignupFromJSON(jsonValue));
    }

    /**
     */
    async auditionsV1SignupPartialUpdate(requestParameters: AuditionsV1SignupPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Signup> {
        const response = await this.auditionsV1SignupPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async auditionsV1SignupRetrieveRaw(requestParameters: AuditionsV1SignupRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Signup>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling auditionsV1SignupRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/auditions/v1/signup/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SignupFromJSON(jsonValue));
    }

    /**
     */
    async auditionsV1SignupRetrieve(requestParameters: AuditionsV1SignupRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Signup> {
        const response = await this.auditionsV1SignupRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async auditionsV1SignupUpdateRaw(requestParameters: AuditionsV1SignupUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Signup>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling auditionsV1SignupUpdate().'
            );
        }

        if (requestParameters['signup'] == null) {
            throw new runtime.RequiredError(
                'signup',
                'Required parameter "signup" was null or undefined when calling auditionsV1SignupUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/auditions/v1/signup/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SignupToJSON(requestParameters['signup']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SignupFromJSON(jsonValue));
    }

    /**
     */
    async auditionsV1SignupUpdate(requestParameters: AuditionsV1SignupUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Signup> {
        const response = await this.auditionsV1SignupUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async auditionsV1SlotCreateRaw(requestParameters: AuditionsV1SlotCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Slot>> {
        if (requestParameters['slot'] == null) {
            throw new runtime.RequiredError(
                'slot',
                'Required parameter "slot" was null or undefined when calling auditionsV1SlotCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/auditions/v1/slot/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SlotToJSON(requestParameters['slot']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SlotFromJSON(jsonValue));
    }

    /**
     */
    async auditionsV1SlotCreate(requestParameters: AuditionsV1SlotCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Slot> {
        const response = await this.auditionsV1SlotCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async auditionsV1SlotDestroyRaw(requestParameters: AuditionsV1SlotDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling auditionsV1SlotDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/auditions/v1/slot/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async auditionsV1SlotDestroy(requestParameters: AuditionsV1SlotDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.auditionsV1SlotDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async auditionsV1SlotListRaw(requestParameters: AuditionsV1SlotListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedSlotList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/auditions/v1/slot/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedSlotListFromJSON(jsonValue));
    }

    /**
     */
    async auditionsV1SlotList(requestParameters: AuditionsV1SlotListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedSlotList> {
        const response = await this.auditionsV1SlotListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async auditionsV1SlotPartialUpdateRaw(requestParameters: AuditionsV1SlotPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Slot>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling auditionsV1SlotPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/auditions/v1/slot/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedSlotToJSON(requestParameters['patchedSlot']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SlotFromJSON(jsonValue));
    }

    /**
     */
    async auditionsV1SlotPartialUpdate(requestParameters: AuditionsV1SlotPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Slot> {
        const response = await this.auditionsV1SlotPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async auditionsV1SlotRetrieveRaw(requestParameters: AuditionsV1SlotRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Slot>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling auditionsV1SlotRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/auditions/v1/slot/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SlotFromJSON(jsonValue));
    }

    /**
     */
    async auditionsV1SlotRetrieve(requestParameters: AuditionsV1SlotRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Slot> {
        const response = await this.auditionsV1SlotRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async auditionsV1SlotUpdateRaw(requestParameters: AuditionsV1SlotUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Slot>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling auditionsV1SlotUpdate().'
            );
        }

        if (requestParameters['slot'] == null) {
            throw new runtime.RequiredError(
                'slot',
                'Required parameter "slot" was null or undefined when calling auditionsV1SlotUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/auditions/v1/slot/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SlotToJSON(requestParameters['slot']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SlotFromJSON(jsonValue));
    }

    /**
     */
    async auditionsV1SlotUpdate(requestParameters: AuditionsV1SlotUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Slot> {
        const response = await this.auditionsV1SlotUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
