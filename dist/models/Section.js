"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.107
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfSection = instanceOfSection;
exports.SectionFromJSON = SectionFromJSON;
exports.SectionFromJSONTyped = SectionFromJSONTyped;
exports.SectionToJSON = SectionToJSON;
exports.SectionToJSONTyped = SectionToJSONTyped;
var SeatingSystemEnum_1 = require("./SeatingSystemEnum");
/**
 * Check if a given object implements the Section interface.
 */
function instanceOfSection(value) {
    if (!('id' in value) || value['id'] === undefined)
        return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined)
        return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined)
        return false;
    if (!('archiveAt' in value) || value['archiveAt'] === undefined)
        return false;
    if (!('sectionCode' in value) || value['sectionCode'] === undefined)
        return false;
    if (!('name' in value) || value['name'] === undefined)
        return false;
    if (!('tenant' in value) || value['tenant'] === undefined)
        return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined)
        return false;
    if (!('updatedBy' in value) || value['updatedBy'] === undefined)
        return false;
    if (!('productionVenue' in value) || value['productionVenue'] === undefined)
        return false;
    return true;
}
function SectionFromJSON(json) {
    return SectionFromJSONTyped(json, false);
}
function SectionFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'archiveAt': (json['archive_at'] == null ? null : new Date(json['archive_at'])),
        'sectionCode': json['section_code'],
        'name': json['name'],
        'floor': json['floor'] == null ? undefined : json['floor'],
        'description': json['description'] == null ? undefined : json['description'],
        'sortOrder': json['sort_order'] == null ? undefined : json['sort_order'],
        'seatingSystem': json['seating_system'] == null ? undefined : (0, SeatingSystemEnum_1.SeatingSystemEnumFromJSON)(json['seating_system']),
        'limit': json['limit'] == null ? undefined : json['limit'],
        'tenant': json['tenant'],
        'createdBy': json['created_by'],
        'updatedBy': json['updated_by'],
        'productionVenue': json['production_venue'],
    };
}
function SectionToJSON(json) {
    return SectionToJSONTyped(json, false);
}
function SectionToJSONTyped(value, ignoreDiscriminator) {
    if (ignoreDiscriminator === void 0) { ignoreDiscriminator = false; }
    if (value == null) {
        return value;
    }
    return {
        'section_code': value['sectionCode'],
        'name': value['name'],
        'floor': value['floor'],
        'description': value['description'],
        'sort_order': value['sortOrder'],
        'seating_system': (0, SeatingSystemEnum_1.SeatingSystemEnumToJSON)(value['seatingSystem']),
        'limit': value['limit'],
    };
}
