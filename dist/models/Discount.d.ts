/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.93
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { DiscountTypeEnum } from './DiscountTypeEnum';
/**
 *
 * @export
 * @interface Discount
 */
export interface Discount {
    /**
     *
     * @type {number}
     * @memberof Discount
     */
    readonly id: number;
    /**
     *
     * @type {Date}
     * @memberof Discount
     */
    readonly createdAt: Date;
    /**
     *
     * @type {Date}
     * @memberof Discount
     */
    readonly updatedAt: Date;
    /**
     *
     * @type {Date}
     * @memberof Discount
     */
    readonly archiveAt: Date | null;
    /**
     * Name of the discount, e.g., Early Bird, Student Discount, etc.
     * @type {string}
     * @memberof Discount
     */
    name: string;
    /**
     * Unique code for the discount, used by customers to apply the discount.
     * @type {string}
     * @memberof Discount
     */
    code: string;
    /**
     * Description of the discount, if any.
     * @type {string}
     * @memberof Discount
     */
    description?: string;
    /**
     * Type of discount, e.g., Percentage Off, Fixed Amount Off, Buy One Get One.
     *
     * * `percentage` - Percentage Off
     * * `fixed_amount` - Fixed Amount Off
     * * `bogo` - Buy One Get One
     * @type {DiscountTypeEnum}
     * @memberof Discount
     */
    discountType?: DiscountTypeEnum;
    /**
     * Value of the discount. For percentage discounts, this is the percentage off. For fixed amount discounts, this is the amount off.
     * @type {string}
     * @memberof Discount
     */
    value: string;
    /**
     * Minimum value of the order for the discount to apply.
     * @type {string}
     * @memberof Discount
     */
    minimumValue?: string;
    /**
     * Minimum number of tickets required for the discount to apply. 0 means no minimum.
     * @type {number}
     * @memberof Discount
     */
    minimumTickets?: number;
    /**
     * Global limit for the discount, i.e., maximum number of times this discount can be used across all venues. null means unlimited. 0 means no uses allowed.
     * @type {number}
     * @memberof Discount
     */
    globalLimit?: number | null;
    /**
     * Limit for each customer, i.e., maximum number of times a single customer can use this discount. null means unlimited. 0 means no uses allowed.
     * @type {number}
     * @memberof Discount
     */
    customerLimit?: number | null;
    /**
     * Start date and time for the discount to be valid. If null, the discount is valid immediately.
     * @type {Date}
     * @memberof Discount
     */
    validFrom?: Date | null;
    /**
     * End date and time for the discount to be valid. If null, the discount is valid indefinitely.
     * @type {Date}
     * @memberof Discount
     */
    validUntil?: Date | null;
    /**
     *
     * @type {number}
     * @memberof Discount
     */
    readonly tenant: number;
    /**
     *
     * @type {number}
     * @memberof Discount
     */
    readonly createdBy: number | null;
    /**
     *
     * @type {number}
     * @memberof Discount
     */
    readonly updatedBy: number | null;
    /**
     * The production this discount applies to.
     * @type {number}
     * @memberof Discount
     */
    production: number;
    /**
     * If the discount is specific to a venue, this field will be set. If null, the discount applies to all venues for the production.
     * @type {number}
     * @memberof Discount
     */
    productionVenue?: number | null;
    /**
     * Ticket types to which this discount applies. If empty, the discount applies to all ticket types for the production.
     * @type {Array<number>}
     * @memberof Discount
     */
    applicableTicketTypes: Array<number>;
}
/**
 * Check if a given object implements the Discount interface.
 */
export declare function instanceOfDiscount(value: object): value is Discount;
export declare function DiscountFromJSON(json: any): Discount;
export declare function DiscountFromJSONTyped(json: any, ignoreDiscriminator: boolean): Discount;
export declare function DiscountToJSON(json: any): Discount;
export declare function DiscountToJSONTyped(value?: Omit<Discount, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'> | null, ignoreDiscriminator?: boolean): any;
