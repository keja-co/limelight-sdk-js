/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.105
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Section } from './Section';
/**
 *
 * @export
 * @interface PatchedSectionSeat
 */
export interface PatchedSectionSeat {
    /**
     *
     * @type {number}
     * @memberof PatchedSectionSeat
     */
    readonly id?: number;
    /**
     *
     * @type {Section}
     * @memberof PatchedSectionSeat
     */
    readonly section?: Section;
    /**
     *
     * @type {Date}
     * @memberof PatchedSectionSeat
     */
    readonly createdAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof PatchedSectionSeat
     */
    readonly updatedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof PatchedSectionSeat
     */
    readonly archiveAt?: Date | null;
    /**
     * Seat Code, example: 1, 2, 3 etc. This should be unique within the row.
     * @type {string}
     * @memberof PatchedSectionSeat
     */
    seatCode?: string;
    /**
     * Row identifier for the seat, example: A, B, C, etc.
     * @type {string}
     * @memberof PatchedSectionSeat
     */
    row?: string;
    /**
     * Additional notes about the seat, if any.
     * @type {string}
     * @memberof PatchedSectionSeat
     */
    notes?: string;
    /**
     * Indicates if the seat has an obstructed view. True if obstructed, False otherwise. Add obstruction notes in the notes field.
     * @type {boolean}
     * @memberof PatchedSectionSeat
     */
    obstructedView?: boolean;
    /**
     * X position for display purposes, used for layout rendering.
     * @type {number}
     * @memberof PatchedSectionSeat
     */
    displayXPosition?: number;
    /**
     * Y position for display purposes, used for layout rendering.
     * @type {number}
     * @memberof PatchedSectionSeat
     */
    displayYPosition?: number;
    /**
     * Indicates if the seat is accessible for individuals with disabilities. Include accessibility notes in the notes field.
     * @type {boolean}
     * @memberof PatchedSectionSeat
     */
    accessible?: boolean;
    /**
     *
     * @type {number}
     * @memberof PatchedSectionSeat
     */
    readonly tenant?: number;
    /**
     *
     * @type {number}
     * @memberof PatchedSectionSeat
     */
    readonly createdBy?: number | null;
    /**
     *
     * @type {number}
     * @memberof PatchedSectionSeat
     */
    readonly updatedBy?: number | null;
}
/**
 * Check if a given object implements the PatchedSectionSeat interface.
 */
export declare function instanceOfPatchedSectionSeat(value: object): value is PatchedSectionSeat;
export declare function PatchedSectionSeatFromJSON(json: any): PatchedSectionSeat;
export declare function PatchedSectionSeatFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchedSectionSeat;
export declare function PatchedSectionSeatToJSON(json: any): PatchedSectionSeat;
export declare function PatchedSectionSeatToJSONTyped(value?: Omit<PatchedSectionSeat, 'id' | 'section' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'> | null, ignoreDiscriminator?: boolean): any;
