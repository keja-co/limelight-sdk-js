/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.101
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { PurchaseMethodEnum } from './PurchaseMethodEnum';
import type { CurrencyEnum } from './CurrencyEnum';
/**
 *
 * @export
 * @interface Purchase
 */
export interface Purchase {
    /**
     *
     * @type {number}
     * @memberof Purchase
     */
    readonly id: number;
    /**
     *
     * @type {Date}
     * @memberof Purchase
     */
    readonly createdAt: Date;
    /**
     *
     * @type {Date}
     * @memberof Purchase
     */
    readonly updatedAt: Date;
    /**
     *
     * @type {Date}
     * @memberof Purchase
     */
    readonly archiveAt: Date | null;
    /**
     * Title for the purchase, e.g., 'VIP Tickets for Opening Night'.
     * @type {string}
     * @memberof Purchase
     */
    title?: string;
    /**
     * First name of the customer making the purchase.
     * @type {string}
     * @memberof Purchase
     */
    customerFirstName: string;
    /**
     * Last name of the customer making the purchase.
     * @type {string}
     * @memberof Purchase
     */
    customerLastName?: string;
    /**
     * Email address of the customer making the purchase.
     * @type {string}
     * @memberof Purchase
     */
    customerEmail: string;
    /**
     * Phone number of the customer making the purchase.
     * @type {string}
     * @memberof Purchase
     */
    customerPhone?: string;
    /**
     * Address of the customer making the purchase.
     * @type {string}
     * @memberof Purchase
     */
    customerAddress: string;
    /**
     * Method of purchase, e.g., Online, In Person, Box Office, Phone, Mobile App.
     *
     * * `online` - Online
     * * `in_person` - In Person
     * * `box_office` - Box Office
     * * `phone` - Phone
     * * `mobile_app` - Mobile App
     * @type {PurchaseMethodEnum}
     * @memberof Purchase
     */
    purchaseMethod?: PurchaseMethodEnum;
    /**
     * Currency for the purchase amount.
     *
     * * `AUD` - AUD - Australian Dollar
     * * `CAD` - CAD - Canadian Dollar
     * * `EUR` - EUR - Euro
     * * `GBP` - GBP - British Pound
     * * `JPY` - JPY - Japanese Yen
     * * `NZD` - NZD - New Zealand Dollar
     * * `USD` - USD - United States Dollar
     * @type {CurrencyEnum}
     * @memberof Purchase
     */
    currency?: CurrencyEnum;
    /**
     * Subtotal amount for the purchase before any discounts.
     * @type {string}
     * @memberof Purchase
     */
    subtotalAmount: string;
    /**
     * Amount of discount applied to the purchase. 0 if no discount was applied.
     * @type {string}
     * @memberof Purchase
     */
    discountAmount?: string;
    /**
     * Booking fee applied to the purchase. 0 if no booking fee was applied.
     * @type {string}
     * @memberof Purchase
     */
    bookingFee?: string;
    /**
     * Total amount for the purchase paid by the customer, after any discounts.
     * @type {string}
     * @memberof Purchase
     */
    totalAmount: string;
    /**
     * Payment reference or transaction ID for the purchase, if applicable.
     * @type {string}
     * @memberof Purchase
     */
    paymentReference?: string;
    /**
     *
     * @type {number}
     * @memberof Purchase
     */
    readonly tenant: number;
    /**
     *
     * @type {number}
     * @memberof Purchase
     */
    readonly createdBy: number | null;
    /**
     *
     * @type {number}
     * @memberof Purchase
     */
    readonly updatedBy: number | null;
    /**
     * Discount applied to this purchase.
     * @type {number}
     * @memberof Purchase
     */
    discountApplied?: number | null;
}
/**
 * Check if a given object implements the Purchase interface.
 */
export declare function instanceOfPurchase(value: object): value is Purchase;
export declare function PurchaseFromJSON(json: any): Purchase;
export declare function PurchaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): Purchase;
export declare function PurchaseToJSON(json: any): Purchase;
export declare function PurchaseToJSONTyped(value?: Omit<Purchase, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'> | null, ignoreDiscriminator?: boolean): any;
