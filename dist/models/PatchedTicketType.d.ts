/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.94
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { CurrencyEnum } from './CurrencyEnum';
/**
 *
 * @export
 * @interface PatchedTicketType
 */
export interface PatchedTicketType {
    /**
     *
     * @type {number}
     * @memberof PatchedTicketType
     */
    readonly id?: number;
    /**
     *
     * @type {Date}
     * @memberof PatchedTicketType
     */
    readonly createdAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof PatchedTicketType
     */
    readonly updatedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof PatchedTicketType
     */
    readonly archiveAt?: Date | null;
    /**
     * Name of the ticket type, e.g., General Admission, VIP, etc.
     * @type {string}
     * @memberof PatchedTicketType
     */
    externalName?: string;
    /**
     * Internal name for the ticket type, used for system references.
     * @type {string}
     * @memberof PatchedTicketType
     */
    internalName?: string;
    /**
     * Description of the ticket type, if any.
     * @type {string}
     * @memberof PatchedTicketType
     */
    description?: string;
    /**
     * Price of the ticket type.
     * @type {string}
     * @memberof PatchedTicketType
     */
    price?: string;
    /**
     * Currency for the ticket price, e.g. AUD, USD, EUR, etc.
     *
     * * `AUD` - AUD - Australian Dollar
     * * `CAD` - CAD - Canadian Dollar
     * * `EUR` - EUR - Euro
     * * `GBP` - GBP - British Pound
     * * `JPY` - JPY - Japanese Yen
     * * `NZD` - NZD - New Zealand Dollar
     * * `USD` - USD - United States Dollar
     * @type {CurrencyEnum}
     * @memberof PatchedTicketType
     */
    currency?: CurrencyEnum;
    /**
     * Maximum number of tickets available for this type. null means unlimited. 0 means no tickets available.
     * @type {number}
     * @memberof PatchedTicketType
     */
    limit?: number | null;
    /**
     * Sort order for displaying ticket types, lower numbers appear first.
     * @type {number}
     * @memberof PatchedTicketType
     */
    sortOrder?: number;
    /**
     *
     * @type {number}
     * @memberof PatchedTicketType
     */
    readonly tenant?: number;
    /**
     *
     * @type {number}
     * @memberof PatchedTicketType
     */
    readonly createdBy?: number | null;
    /**
     *
     * @type {number}
     * @memberof PatchedTicketType
     */
    readonly updatedBy?: number | null;
    /**
     * The production venue this ticket type belongs to.
     * @type {number}
     * @memberof PatchedTicketType
     */
    readonly productionVenue?: number;
}
/**
 * Check if a given object implements the PatchedTicketType interface.
 */
export declare function instanceOfPatchedTicketType(value: object): value is PatchedTicketType;
export declare function PatchedTicketTypeFromJSON(json: any): PatchedTicketType;
export declare function PatchedTicketTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchedTicketType;
export declare function PatchedTicketTypeToJSON(json: any): PatchedTicketType;
export declare function PatchedTicketTypeToJSONTyped(value?: Omit<PatchedTicketType, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by' | 'production_venue'> | null, ignoreDiscriminator?: boolean): any;
