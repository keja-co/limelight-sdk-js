"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.103
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfDocument = instanceOfDocument;
exports.DocumentFromJSON = DocumentFromJSON;
exports.DocumentFromJSONTyped = DocumentFromJSONTyped;
exports.DocumentToJSON = DocumentToJSON;
exports.DocumentToJSONTyped = DocumentToJSONTyped;
var DocumentStatusEnum_1 = require("./DocumentStatusEnum");
/**
 * Check if a given object implements the Document interface.
 */
function instanceOfDocument(value) {
    if (!('id' in value) || value['id'] === undefined)
        return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined)
        return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined)
        return false;
    if (!('archiveAt' in value) || value['archiveAt'] === undefined)
        return false;
    if (!('title' in value) || value['title'] === undefined)
        return false;
    if (!('tenant' in value) || value['tenant'] === undefined)
        return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined)
        return false;
    if (!('updatedBy' in value) || value['updatedBy'] === undefined)
        return false;
    if (!('repo' in value) || value['repo'] === undefined)
        return false;
    if (!('tags' in value) || value['tags'] === undefined)
        return false;
    return true;
}
function DocumentFromJSON(json) {
    return DocumentFromJSONTyped(json, false);
}
function DocumentFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'archiveAt': (json['archive_at'] == null ? null : new Date(json['archive_at'])),
        'title': json['title'],
        'description': json['description'] == null ? undefined : json['description'],
        'status': json['status'] == null ? undefined : (0, DocumentStatusEnum_1.DocumentStatusEnumFromJSON)(json['status']),
        'tenant': json['tenant'],
        'createdBy': json['created_by'],
        'updatedBy': json['updated_by'],
        'production': json['production'] == null ? undefined : json['production'],
        'author': json['author'] == null ? undefined : json['author'],
        'repo': json['repo'],
        'folder': json['folder'] == null ? undefined : json['folder'],
        'supersededBy': json['superseded_by'] == null ? undefined : json['superseded_by'],
        'tags': json['tags'],
    };
}
function DocumentToJSON(json) {
    return DocumentToJSONTyped(json, false);
}
function DocumentToJSONTyped(value, ignoreDiscriminator) {
    if (ignoreDiscriminator === void 0) { ignoreDiscriminator = false; }
    if (value == null) {
        return value;
    }
    return {
        'title': value['title'],
        'description': value['description'],
        'status': (0, DocumentStatusEnum_1.DocumentStatusEnumToJSON)(value['status']),
        'production': value['production'],
        'author': value['author'],
        'folder': value['folder'],
        'superseded_by': value['supersededBy'],
        'tags': value['tags'],
    };
}
