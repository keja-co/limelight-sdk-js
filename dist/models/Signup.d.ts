/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.90
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Serializer for the Signup model.
 * @export
 * @interface Signup
 */
export interface Signup {
    /**
     *
     * @type {number}
     * @memberof Signup
     */
    readonly id: number;
    /**
     *
     * @type {Date}
     * @memberof Signup
     */
    readonly createdAt: Date;
    /**
     *
     * @type {Date}
     * @memberof Signup
     */
    readonly updatedAt: Date;
    /**
     *
     * @type {Date}
     * @memberof Signup
     */
    readonly archiveAt: Date | null;
    /**
     * First name of the user signing up
     * @type {string}
     * @memberof Signup
     */
    firstName?: string | null;
    /**
     * Last name of the user signing up
     * @type {string}
     * @memberof Signup
     */
    lastName?: string | null;
    /**
     * Email address of the user signing up
     * @type {string}
     * @memberof Signup
     */
    email?: string | null;
    /**
     * Phone number of the user signing up
     * @type {string}
     * @memberof Signup
     */
    phone?: string | null;
    /**
     * Notes for the signup. Supports markdown.
     * @type {string}
     * @memberof Signup
     */
    notes?: string | null;
    /**
     *
     * @type {number}
     * @memberof Signup
     */
    readonly tenant: number;
    /**
     *
     * @type {number}
     * @memberof Signup
     */
    readonly createdBy: number | null;
    /**
     *
     * @type {number}
     * @memberof Signup
     */
    readonly updatedBy: number | null;
    /**
     *
     * @type {number}
     * @memberof Signup
     */
    slot: number;
    /**
     * If the participant has an account, this will be set to the user. If not, it will be null and the first_name, last_name, email, and phone fields will be used to identify the participant.
     * @type {number}
     * @memberof Signup
     */
    user?: number | null;
}
/**
 * Check if a given object implements the Signup interface.
 */
export declare function instanceOfSignup(value: object): value is Signup;
export declare function SignupFromJSON(json: any): Signup;
export declare function SignupFromJSONTyped(json: any, ignoreDiscriminator: boolean): Signup;
export declare function SignupToJSON(json: any): Signup;
export declare function SignupToJSONTyped(value?: Omit<Signup, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'> | null, ignoreDiscriminator?: boolean): any;
