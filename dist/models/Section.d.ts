/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.91
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { SeatingSystemEnum } from './SeatingSystemEnum';
/**
 *
 * @export
 * @interface Section
 */
export interface Section {
    /**
     *
     * @type {number}
     * @memberof Section
     */
    readonly id: number;
    /**
     *
     * @type {Date}
     * @memberof Section
     */
    readonly createdAt: Date;
    /**
     *
     * @type {Date}
     * @memberof Section
     */
    readonly updatedAt: Date;
    /**
     *
     * @type {Date}
     * @memberof Section
     */
    readonly archiveAt: Date | null;
    /**
     * Section Code, example: L-MEZ, ORCH, R-BALC, etc.
     * @type {string}
     * @memberof Section
     */
    sectionCode: string;
    /**
     * Section Name, example: Left Mezzanine, Orchestra, Right Balcony, etc.
     * @type {string}
     * @memberof Section
     */
    name: string;
    /**
     * Floor level, example: Ground, 2nd Floor, etc.
     * @type {string}
     * @memberof Section
     */
    floor?: string;
    /**
     * Description of the section, if any.
     * @type {string}
     * @memberof Section
     */
    description?: string;
    /**
     * Sort order for displaying sections, lower numbers appear first.
     * @type {number}
     * @memberof Section
     */
    sortOrder?: number;
    /**
     * Seating system for the section, e.g., General Admission, Reserved Seating.
     *
     * * `none` - General Admission
     * * `seated` - Reserved Seating
     * @type {SeatingSystemEnum}
     * @memberof Section
     */
    seatingSystem?: SeatingSystemEnum;
    /**
     * Maximum number of seats available in this section. null means unlimited. 0 means no seats available. Required for General Admission sections, ignored for Reserved Seating sections.
     * @type {number}
     * @memberof Section
     */
    limit?: number | null;
    /**
     *
     * @type {number}
     * @memberof Section
     */
    readonly tenant: number;
    /**
     *
     * @type {number}
     * @memberof Section
     */
    readonly createdBy: number | null;
    /**
     *
     * @type {number}
     * @memberof Section
     */
    readonly updatedBy: number | null;
    /**
     * The production & venue this section belongs to
     * @type {number}
     * @memberof Section
     */
    readonly productionVenue: number;
}
/**
 * Check if a given object implements the Section interface.
 */
export declare function instanceOfSection(value: object): value is Section;
export declare function SectionFromJSON(json: any): Section;
export declare function SectionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Section;
export declare function SectionToJSON(json: any): Section;
export declare function SectionToJSONTyped(value?: Omit<Section, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by' | 'production_venue'> | null, ignoreDiscriminator?: boolean): any;
