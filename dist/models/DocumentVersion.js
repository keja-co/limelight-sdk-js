"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.93
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfDocumentVersion = instanceOfDocumentVersion;
exports.DocumentVersionFromJSON = DocumentVersionFromJSON;
exports.DocumentVersionFromJSONTyped = DocumentVersionFromJSONTyped;
exports.DocumentVersionToJSON = DocumentVersionToJSON;
exports.DocumentVersionToJSONTyped = DocumentVersionToJSONTyped;
/**
 * Check if a given object implements the DocumentVersion interface.
 */
function instanceOfDocumentVersion(value) {
    if (!('id' in value) || value['id'] === undefined)
        return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined)
        return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined)
        return false;
    if (!('archiveAt' in value) || value['archiveAt'] === undefined)
        return false;
    if (!('version' in value) || value['version'] === undefined)
        return false;
    if (!('fileUrl' in value) || value['fileUrl'] === undefined)
        return false;
    if (!('tenant' in value) || value['tenant'] === undefined)
        return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined)
        return false;
    if (!('updatedBy' in value) || value['updatedBy'] === undefined)
        return false;
    if (!('document' in value) || value['document'] === undefined)
        return false;
    return true;
}
function DocumentVersionFromJSON(json) {
    return DocumentVersionFromJSONTyped(json, false);
}
function DocumentVersionFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'archiveAt': (json['archive_at'] == null ? null : new Date(json['archive_at'])),
        'version': json['version'],
        'fileUrl': json['file_url'],
        'versionNotes': json['version_notes'] == null ? undefined : json['version_notes'],
        'tenant': json['tenant'],
        'createdBy': json['created_by'],
        'updatedBy': json['updated_by'],
        'document': json['document'],
    };
}
function DocumentVersionToJSON(json) {
    return DocumentVersionToJSONTyped(json, false);
}
function DocumentVersionToJSONTyped(value, ignoreDiscriminator) {
    if (ignoreDiscriminator === void 0) { ignoreDiscriminator = false; }
    if (value == null) {
        return value;
    }
    return {
        'file_url': value['fileUrl'],
        'version_notes': value['versionNotes'],
        'document': value['document'],
    };
}
