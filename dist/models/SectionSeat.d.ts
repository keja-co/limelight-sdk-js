/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.91
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Section } from './Section';
/**
 *
 * @export
 * @interface SectionSeat
 */
export interface SectionSeat {
    /**
     *
     * @type {number}
     * @memberof SectionSeat
     */
    readonly id: number;
    /**
     *
     * @type {Section}
     * @memberof SectionSeat
     */
    readonly section: Section;
    /**
     *
     * @type {Date}
     * @memberof SectionSeat
     */
    readonly createdAt: Date;
    /**
     *
     * @type {Date}
     * @memberof SectionSeat
     */
    readonly updatedAt: Date;
    /**
     *
     * @type {Date}
     * @memberof SectionSeat
     */
    readonly archiveAt: Date | null;
    /**
     * Seat Code, example: 1, 2, 3 etc. This should be unique within the row.
     * @type {string}
     * @memberof SectionSeat
     */
    seatCode: string;
    /**
     * Row identifier for the seat, example: A, B, C, etc.
     * @type {string}
     * @memberof SectionSeat
     */
    row: string;
    /**
     * Additional notes about the seat, if any.
     * @type {string}
     * @memberof SectionSeat
     */
    notes?: string;
    /**
     * Indicates if the seat has an obstructed view. True if obstructed, False otherwise. Add obstruction notes in the notes field.
     * @type {boolean}
     * @memberof SectionSeat
     */
    obstructedView?: boolean;
    /**
     * X position for display purposes, used for layout rendering.
     * @type {number}
     * @memberof SectionSeat
     */
    displayXPosition?: number;
    /**
     * Y position for display purposes, used for layout rendering.
     * @type {number}
     * @memberof SectionSeat
     */
    displayYPosition?: number;
    /**
     * Indicates if the seat is accessible for individuals with disabilities. Include accessibility notes in the notes field.
     * @type {boolean}
     * @memberof SectionSeat
     */
    accessible?: boolean;
    /**
     *
     * @type {number}
     * @memberof SectionSeat
     */
    readonly tenant: number;
    /**
     *
     * @type {number}
     * @memberof SectionSeat
     */
    readonly createdBy: number | null;
    /**
     *
     * @type {number}
     * @memberof SectionSeat
     */
    readonly updatedBy: number | null;
}
/**
 * Check if a given object implements the SectionSeat interface.
 */
export declare function instanceOfSectionSeat(value: object): value is SectionSeat;
export declare function SectionSeatFromJSON(json: any): SectionSeat;
export declare function SectionSeatFromJSONTyped(json: any, ignoreDiscriminator: boolean): SectionSeat;
export declare function SectionSeatToJSON(json: any): SectionSeat;
export declare function SectionSeatToJSONTyped(value?: Omit<SectionSeat, 'id' | 'section' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'> | null, ignoreDiscriminator?: boolean): any;
