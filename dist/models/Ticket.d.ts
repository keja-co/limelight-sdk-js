/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.108
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { TicketStatusEnum } from './TicketStatusEnum';
import type { Purchase } from './Purchase';
import type { SectionSeat } from './SectionSeat';
import type { TicketType } from './TicketType';
/**
 *
 * @export
 * @interface Ticket
 */
export interface Ticket {
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    readonly id: number;
    /**
     *
     * @type {SectionSeat}
     * @memberof Ticket
     */
    readonly sectionSeat: SectionSeat;
    /**
     *
     * @type {TicketType}
     * @memberof Ticket
     */
    readonly ticketType: TicketType;
    /**
     *
     * @type {Purchase}
     * @memberof Ticket
     */
    readonly purchase: Purchase;
    /**
     *
     * @type {Date}
     * @memberof Ticket
     */
    readonly createdAt: Date;
    /**
     *
     * @type {Date}
     * @memberof Ticket
     */
    readonly updatedAt: Date;
    /**
     *
     * @type {Date}
     * @memberof Ticket
     */
    readonly archiveAt: Date | null;
    /**
     * Unique identifier for the ticket, used for tracking and validation.
     * @type {string}
     * @memberof Ticket
     */
    readonly ticketUuid: string;
    /**
     * Current status of the ticket.
     *
     * * `active` - Active
     * * `used` - Used
     * * `refunded` - Refunded
     * * `cancelled` - Cancelled
     * * `transferred` - Transferred
     * @type {TicketStatusEnum}
     * @memberof Ticket
     */
    status?: TicketStatusEnum;
    /**
     * Price of the ticket at the time of purchase.
     * @type {string}
     * @memberof Ticket
     */
    price: string;
    /**
     * Timestamp when the ticket was checked in. Null if not checked in.
     * @type {Date}
     * @memberof Ticket
     */
    checkedInAt?: Date | null;
    /**
     * Alias used by the user who checked in the ticket. Useful for tracking check-ins by staff or volunteers who may not have a user account, or integrations which use a system account.
     * @type {string}
     * @memberof Ticket
     */
    checkedInByAlias?: string;
    /**
     * Location where the ticket was checked in. Useful for tracking check-ins at different points of entry or systems.
     * @type {string}
     * @memberof Ticket
     */
    checkedInLocation?: string;
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    readonly tenant: number;
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    readonly createdBy: number | null;
    /**
     *
     * @type {number}
     * @memberof Ticket
     */
    readonly updatedBy: number | null;
    /**
     * The performance for which this ticket is valid.
     * @type {number}
     * @memberof Ticket
     */
    performance: number;
    /**
     * The section for this ticket
     * @type {number}
     * @memberof Ticket
     */
    section: number;
    /**
     * The specific seat for this ticket.
     * @type {number}
     * @memberof Ticket
     */
    seat?: number | null;
    /**
     * User who checked in the ticket. Null if not checked in.
     * @type {number}
     * @memberof Ticket
     */
    checkedInByUser?: number | null;
}
/**
 * Check if a given object implements the Ticket interface.
 */
export declare function instanceOfTicket(value: object): value is Ticket;
export declare function TicketFromJSON(json: any): Ticket;
export declare function TicketFromJSONTyped(json: any, ignoreDiscriminator: boolean): Ticket;
export declare function TicketToJSON(json: any): Ticket;
export declare function TicketToJSONTyped(value?: Omit<Ticket, 'id' | 'section_seat' | 'ticket_type' | 'purchase' | 'created_at' | 'updated_at' | 'archive_at' | 'ticket_uuid' | 'tenant' | 'created_by' | 'updated_by'> | null, ignoreDiscriminator?: boolean): any;
