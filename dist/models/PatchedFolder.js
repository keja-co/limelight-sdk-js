"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.77
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfPatchedFolder = instanceOfPatchedFolder;
exports.PatchedFolderFromJSON = PatchedFolderFromJSON;
exports.PatchedFolderFromJSONTyped = PatchedFolderFromJSONTyped;
exports.PatchedFolderToJSON = PatchedFolderToJSON;
exports.PatchedFolderToJSONTyped = PatchedFolderToJSONTyped;
var Subfolder_1 = require("./Subfolder");
/**
 * Check if a given object implements the PatchedFolder interface.
 */
function instanceOfPatchedFolder(value) {
    return true;
}
function PatchedFolderFromJSON(json) {
    return PatchedFolderFromJSONTyped(json, false);
}
function PatchedFolderFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'id': json['id'] == null ? undefined : json['id'],
        'subfolders': json['subfolders'] == null ? undefined : (json['subfolders'].map(Subfolder_1.SubfolderFromJSON)),
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
        'archiveAt': json['archive_at'] == null ? undefined : (new Date(json['archive_at'])),
        'name': json['name'] == null ? undefined : json['name'],
        'tenant': json['tenant'] == null ? undefined : json['tenant'],
        'createdBy': json['created_by'] == null ? undefined : json['created_by'],
        'updatedBy': json['updated_by'] == null ? undefined : json['updated_by'],
        'repo': json['repo'] == null ? undefined : json['repo'],
        'parent': json['parent'] == null ? undefined : json['parent'],
    };
}
function PatchedFolderToJSON(json) {
    return PatchedFolderToJSONTyped(json, false);
}
function PatchedFolderToJSONTyped(value, ignoreDiscriminator) {
    if (ignoreDiscriminator === void 0) { ignoreDiscriminator = false; }
    if (value == null) {
        return value;
    }
    return {
        'subfolders': value['subfolders'] == null ? undefined : (value['subfolders'].map(Subfolder_1.SubfolderToJSON)),
        'name': value['name'],
        'repo': value['repo'],
        'parent': value['parent'],
    };
}
