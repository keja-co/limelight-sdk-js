"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.99
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfTicketType = instanceOfTicketType;
exports.TicketTypeFromJSON = TicketTypeFromJSON;
exports.TicketTypeFromJSONTyped = TicketTypeFromJSONTyped;
exports.TicketTypeToJSON = TicketTypeToJSON;
exports.TicketTypeToJSONTyped = TicketTypeToJSONTyped;
var CurrencyEnum_1 = require("./CurrencyEnum");
/**
 * Check if a given object implements the TicketType interface.
 */
function instanceOfTicketType(value) {
    if (!('id' in value) || value['id'] === undefined)
        return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined)
        return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined)
        return false;
    if (!('archiveAt' in value) || value['archiveAt'] === undefined)
        return false;
    if (!('externalName' in value) || value['externalName'] === undefined)
        return false;
    if (!('internalName' in value) || value['internalName'] === undefined)
        return false;
    if (!('price' in value) || value['price'] === undefined)
        return false;
    if (!('tenant' in value) || value['tenant'] === undefined)
        return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined)
        return false;
    if (!('updatedBy' in value) || value['updatedBy'] === undefined)
        return false;
    if (!('productionVenue' in value) || value['productionVenue'] === undefined)
        return false;
    return true;
}
function TicketTypeFromJSON(json) {
    return TicketTypeFromJSONTyped(json, false);
}
function TicketTypeFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'archiveAt': (json['archive_at'] == null ? null : new Date(json['archive_at'])),
        'externalName': json['external_name'],
        'internalName': json['internal_name'],
        'description': json['description'] == null ? undefined : json['description'],
        'price': json['price'],
        'currency': json['currency'] == null ? undefined : (0, CurrencyEnum_1.CurrencyEnumFromJSON)(json['currency']),
        'limit': json['limit'] == null ? undefined : json['limit'],
        'sortOrder': json['sort_order'] == null ? undefined : json['sort_order'],
        'tenant': json['tenant'],
        'createdBy': json['created_by'],
        'updatedBy': json['updated_by'],
        'productionVenue': json['production_venue'],
    };
}
function TicketTypeToJSON(json) {
    return TicketTypeToJSONTyped(json, false);
}
function TicketTypeToJSONTyped(value, ignoreDiscriminator) {
    if (ignoreDiscriminator === void 0) { ignoreDiscriminator = false; }
    if (value == null) {
        return value;
    }
    return {
        'external_name': value['externalName'],
        'internal_name': value['internalName'],
        'description': value['description'],
        'price': value['price'],
        'currency': (0, CurrencyEnum_1.CurrencyEnumToJSON)(value['currency']),
        'limit': value['limit'],
        'sort_order': value['sortOrder'],
    };
}
