"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.109
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfRehearsalWithParticipantRead = instanceOfRehearsalWithParticipantRead;
exports.RehearsalWithParticipantReadFromJSON = RehearsalWithParticipantReadFromJSON;
exports.RehearsalWithParticipantReadFromJSONTyped = RehearsalWithParticipantReadFromJSONTyped;
exports.RehearsalWithParticipantReadToJSON = RehearsalWithParticipantReadToJSON;
exports.RehearsalWithParticipantReadToJSONTyped = RehearsalWithParticipantReadToJSONTyped;
/**
 * Check if a given object implements the RehearsalWithParticipantRead interface.
 */
function instanceOfRehearsalWithParticipantRead(value) {
    if (!('id' in value) || value['id'] === undefined)
        return false;
    if (!('production' in value) || value['production'] === undefined)
        return false;
    if (!('startDatetime' in value) || value['startDatetime'] === undefined)
        return false;
    if (!('endDatetime' in value) || value['endDatetime'] === undefined)
        return false;
    if (!('venue' in value) || value['venue'] === undefined)
        return false;
    if (!('notes' in value) || value['notes'] === undefined)
        return false;
    if (!('participantIsRequired' in value) || value['participantIsRequired'] === undefined)
        return false;
    if (!('participantId' in value) || value['participantId'] === undefined)
        return false;
    return true;
}
function RehearsalWithParticipantReadFromJSON(json) {
    return RehearsalWithParticipantReadFromJSONTyped(json, false);
}
function RehearsalWithParticipantReadFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'id': json['id'],
        'production': json['production'],
        'startDatetime': (new Date(json['start_datetime'])),
        'endDatetime': (new Date(json['end_datetime'])),
        'venue': json['venue'],
        'notes': json['notes'],
        'participantIsRequired': json['participant_is_required'],
        'participantId': json['participant_id'],
    };
}
function RehearsalWithParticipantReadToJSON(json) {
    return RehearsalWithParticipantReadToJSONTyped(json, false);
}
function RehearsalWithParticipantReadToJSONTyped(value, ignoreDiscriminator) {
    if (ignoreDiscriminator === void 0) { ignoreDiscriminator = false; }
    if (value == null) {
        return value;
    }
    return {
        'id': value['id'],
        'production': value['production'],
        'start_datetime': ((value['startDatetime']).toISOString()),
        'end_datetime': ((value['endDatetime']).toISOString()),
        'venue': value['venue'],
        'notes': value['notes'],
        'participant_is_required': value['participantIsRequired'],
        'participant_id': value['participantId'],
    };
}
