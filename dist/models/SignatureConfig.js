"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.93
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfSignatureConfig = instanceOfSignatureConfig;
exports.SignatureConfigFromJSON = SignatureConfigFromJSON;
exports.SignatureConfigFromJSONTyped = SignatureConfigFromJSONTyped;
exports.SignatureConfigToJSON = SignatureConfigToJSON;
exports.SignatureConfigToJSONTyped = SignatureConfigToJSONTyped;
/**
 * Check if a given object implements the SignatureConfig interface.
 */
function instanceOfSignatureConfig(value) {
    return true;
}
function SignatureConfigFromJSON(json) {
    return SignatureConfigFromJSONTyped(json, false);
}
function SignatureConfigFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'allowDrawing': json['allow_drawing'] == null ? undefined : json['allow_drawing'],
        'allowUpload': json['allow_upload'] == null ? undefined : json['allow_upload'],
        'allowTyping': json['allow_typing'] == null ? undefined : json['allow_typing'],
        'maxFileSize': json['max_file_size'] == null ? undefined : json['max_file_size'],
    };
}
function SignatureConfigToJSON(json) {
    return SignatureConfigToJSONTyped(json, false);
}
function SignatureConfigToJSONTyped(value, ignoreDiscriminator) {
    if (ignoreDiscriminator === void 0) { ignoreDiscriminator = false; }
    if (value == null) {
        return value;
    }
    return {
        'allow_drawing': value['allowDrawing'],
        'allow_upload': value['allowUpload'],
        'allow_typing': value['allowTyping'],
        'max_file_size': value['maxFileSize'],
    };
}
