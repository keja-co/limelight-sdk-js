/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.74
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { CostCategory, Expense, ExpenseAttachment, Income, IncomeCategory, PaginatedCostCategoryList, PaginatedExpenseAttachmentList, PaginatedExpenseList, PaginatedIncomeCategoryList, PaginatedIncomeList, PaginatedProductionCostCategoryList, PaginatedProductionIncomeCategoryList, PaginatedReimbursementList, PaginatedVendorList, PatchedCostCategory, PatchedExpense, PatchedExpenseAttachment, PatchedIncome, PatchedIncomeCategory, PatchedProductionCostCategory, PatchedProductionIncomeCategory, PatchedReimbursement, PatchedVendor, ProductionCostCategory, ProductionIncomeCategory, Reimbursement, Vendor } from '../models/index';
export interface BudgetingV1CostCategoriesCreateRequest {
    tenantRef: string;
    costCategory: Omit<CostCategory, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface BudgetingV1CostCategoriesDestroyRequest {
    id: number;
    tenantRef: string;
}
export interface BudgetingV1CostCategoriesListRequest {
    tenantRef: string;
    page?: number;
    pageSize?: number;
}
export interface BudgetingV1CostCategoriesPartialUpdateRequest {
    id: number;
    tenantRef: string;
    patchedCostCategory?: Omit<PatchedCostCategory, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface BudgetingV1CostCategoriesRetrieveRequest {
    id: number;
    tenantRef: string;
}
export interface BudgetingV1CostCategoriesUpdateRequest {
    id: number;
    tenantRef: string;
    costCategory: Omit<CostCategory, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface BudgetingV1ExpensesAttachmentsCreateRequest {
    expenseId: number;
    tenantRef: string;
    expenseAttachment: Omit<ExpenseAttachment, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface BudgetingV1ExpensesAttachmentsDestroyRequest {
    expenseId: number;
    id: number;
    tenantRef: string;
}
export interface BudgetingV1ExpensesAttachmentsListRequest {
    expenseId: number;
    tenantRef: string;
    page?: number;
    pageSize?: number;
}
export interface BudgetingV1ExpensesAttachmentsPartialUpdateRequest {
    expenseId: number;
    id: number;
    tenantRef: string;
    patchedExpenseAttachment?: Omit<PatchedExpenseAttachment, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface BudgetingV1ExpensesAttachmentsRetrieveRequest {
    expenseId: number;
    id: number;
    tenantRef: string;
}
export interface BudgetingV1ExpensesAttachmentsUpdateRequest {
    expenseId: number;
    id: number;
    tenantRef: string;
    expenseAttachment: Omit<ExpenseAttachment, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface BudgetingV1ExpensesCreateRequest {
    tenantRef: string;
    expense: Omit<Expense, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface BudgetingV1ExpensesDestroyRequest {
    id: number;
    tenantRef: string;
}
export interface BudgetingV1ExpensesListRequest {
    tenantRef: string;
    page?: number;
    pageSize?: number;
}
export interface BudgetingV1ExpensesPartialUpdateRequest {
    id: number;
    tenantRef: string;
    patchedExpense?: Omit<PatchedExpense, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface BudgetingV1ExpensesRetrieveRequest {
    id: number;
    tenantRef: string;
}
export interface BudgetingV1ExpensesUpdateRequest {
    id: number;
    tenantRef: string;
    expense: Omit<Expense, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface BudgetingV1IncomeCategoriesCreateRequest {
    tenantRef: string;
    incomeCategory: Omit<IncomeCategory, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface BudgetingV1IncomeCategoriesDestroyRequest {
    id: number;
    tenantRef: string;
}
export interface BudgetingV1IncomeCategoriesListRequest {
    tenantRef: string;
    page?: number;
    pageSize?: number;
}
export interface BudgetingV1IncomeCategoriesPartialUpdateRequest {
    id: number;
    tenantRef: string;
    patchedIncomeCategory?: Omit<PatchedIncomeCategory, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface BudgetingV1IncomeCategoriesRetrieveRequest {
    id: number;
    tenantRef: string;
}
export interface BudgetingV1IncomeCategoriesUpdateRequest {
    id: number;
    tenantRef: string;
    incomeCategory: Omit<IncomeCategory, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface BudgetingV1IncomesCreateRequest {
    tenantRef: string;
    income: Omit<Income, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface BudgetingV1IncomesDestroyRequest {
    id: number;
    tenantRef: string;
}
export interface BudgetingV1IncomesListRequest {
    tenantRef: string;
    category?: string;
    page?: number;
    pageSize?: number;
}
export interface BudgetingV1IncomesPartialUpdateRequest {
    id: number;
    tenantRef: string;
    patchedIncome?: Omit<PatchedIncome, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface BudgetingV1IncomesRetrieveRequest {
    id: number;
    tenantRef: string;
}
export interface BudgetingV1IncomesUpdateRequest {
    id: number;
    tenantRef: string;
    income: Omit<Income, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface BudgetingV1ProductionsCostCategoriesCreateRequest {
    productionId: number;
    tenantRef: string;
    productionCostCategory: Omit<ProductionCostCategory, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface BudgetingV1ProductionsCostCategoriesDestroyRequest {
    id: number;
    productionId: number;
    tenantRef: string;
}
export interface BudgetingV1ProductionsCostCategoriesListRequest {
    productionId: number;
    tenantRef: string;
    page?: number;
    pageSize?: number;
}
export interface BudgetingV1ProductionsCostCategoriesPartialUpdateRequest {
    id: number;
    productionId: number;
    tenantRef: string;
    patchedProductionCostCategory?: Omit<PatchedProductionCostCategory, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface BudgetingV1ProductionsCostCategoriesRetrieveRequest {
    id: number;
    productionId: number;
    tenantRef: string;
}
export interface BudgetingV1ProductionsCostCategoriesUpdateRequest {
    id: number;
    productionId: number;
    tenantRef: string;
    productionCostCategory: Omit<ProductionCostCategory, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface BudgetingV1ProductionsIncomeCategoriesCreateRequest {
    productionId: number;
    tenantRef: string;
    productionIncomeCategory: Omit<ProductionIncomeCategory, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface BudgetingV1ProductionsIncomeCategoriesDestroyRequest {
    id: number;
    productionId: number;
    tenantRef: string;
}
export interface BudgetingV1ProductionsIncomeCategoriesListRequest {
    productionId: number;
    tenantRef: string;
    page?: number;
    pageSize?: number;
}
export interface BudgetingV1ProductionsIncomeCategoriesPartialUpdateRequest {
    id: number;
    productionId: number;
    tenantRef: string;
    patchedProductionIncomeCategory?: Omit<PatchedProductionIncomeCategory, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface BudgetingV1ProductionsIncomeCategoriesRetrieveRequest {
    id: number;
    productionId: number;
    tenantRef: string;
}
export interface BudgetingV1ProductionsIncomeCategoriesUpdateRequest {
    id: number;
    productionId: number;
    tenantRef: string;
    productionIncomeCategory: Omit<ProductionIncomeCategory, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface BudgetingV1ReimbursementsCreateRequest {
    tenantRef: string;
    reimbursement: Omit<Reimbursement, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface BudgetingV1ReimbursementsDestroyRequest {
    id: number;
    tenantRef: string;
}
export interface BudgetingV1ReimbursementsListRequest {
    tenantRef: string;
    page?: number;
    pageSize?: number;
}
export interface BudgetingV1ReimbursementsPartialUpdateRequest {
    id: number;
    tenantRef: string;
    patchedReimbursement?: Omit<PatchedReimbursement, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface BudgetingV1ReimbursementsRetrieveRequest {
    id: number;
    tenantRef: string;
}
export interface BudgetingV1ReimbursementsUpdateRequest {
    id: number;
    tenantRef: string;
    reimbursement: Omit<Reimbursement, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface BudgetingV1VendorsCreateRequest {
    tenantRef: string;
    vendor: Omit<Vendor, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface BudgetingV1VendorsDestroyRequest {
    id: number;
    tenantRef: string;
}
export interface BudgetingV1VendorsListRequest {
    tenantRef: string;
    page?: number;
    pageSize?: number;
}
export interface BudgetingV1VendorsPartialUpdateRequest {
    id: number;
    tenantRef: string;
    patchedVendor?: Omit<PatchedVendor, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface BudgetingV1VendorsRetrieveRequest {
    id: number;
    tenantRef: string;
}
export interface BudgetingV1VendorsUpdateRequest {
    id: number;
    tenantRef: string;
    vendor: Omit<Vendor, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
/**
 *
 */
export declare class BudgetingApi extends runtime.BaseAPI {
    /**
     * Add a new cost category to the system.
     * Create a new cost category
     */
    budgetingV1CostCategoriesCreateRaw(requestParameters: BudgetingV1CostCategoriesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CostCategory>>;
    /**
     * Add a new cost category to the system.
     * Create a new cost category
     */
    budgetingV1CostCategoriesCreate(requestParameters: BudgetingV1CostCategoriesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CostCategory>;
    /**
     * Remove a cost category from the system by its ID.
     * Delete a cost category
     */
    budgetingV1CostCategoriesDestroyRaw(requestParameters: BudgetingV1CostCategoriesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Remove a cost category from the system by its ID.
     * Delete a cost category
     */
    budgetingV1CostCategoriesDestroy(requestParameters: BudgetingV1CostCategoriesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Retrieve a list of all cost categories in the system.
     * List all cost categories
     */
    budgetingV1CostCategoriesListRaw(requestParameters: BudgetingV1CostCategoriesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedCostCategoryList>>;
    /**
     * Retrieve a list of all cost categories in the system.
     * List all cost categories
     */
    budgetingV1CostCategoriesList(requestParameters: BudgetingV1CostCategoriesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedCostCategoryList>;
    /**
     * Update specific fields of an existing cost category without affecting others.
     * Partially update a cost category
     */
    budgetingV1CostCategoriesPartialUpdateRaw(requestParameters: BudgetingV1CostCategoriesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CostCategory>>;
    /**
     * Update specific fields of an existing cost category without affecting others.
     * Partially update a cost category
     */
    budgetingV1CostCategoriesPartialUpdate(requestParameters: BudgetingV1CostCategoriesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CostCategory>;
    /**
     * Get detailed information about a specific cost category by its ID.
     * Retrieve a specific cost category
     */
    budgetingV1CostCategoriesRetrieveRaw(requestParameters: BudgetingV1CostCategoriesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CostCategory>>;
    /**
     * Get detailed information about a specific cost category by its ID.
     * Retrieve a specific cost category
     */
    budgetingV1CostCategoriesRetrieve(requestParameters: BudgetingV1CostCategoriesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CostCategory>;
    /**
     * Modify the details of an existing cost category by its ID.
     * Update an existing cost category
     */
    budgetingV1CostCategoriesUpdateRaw(requestParameters: BudgetingV1CostCategoriesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CostCategory>>;
    /**
     * Modify the details of an existing cost category by its ID.
     * Update an existing cost category
     */
    budgetingV1CostCategoriesUpdate(requestParameters: BudgetingV1CostCategoriesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CostCategory>;
    /**
     * Add a new attachment to a specific expense.
     * Create a new attachment for an expense
     */
    budgetingV1ExpensesAttachmentsCreateRaw(requestParameters: BudgetingV1ExpensesAttachmentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExpenseAttachment>>;
    /**
     * Add a new attachment to a specific expense.
     * Create a new attachment for an expense
     */
    budgetingV1ExpensesAttachmentsCreate(requestParameters: BudgetingV1ExpensesAttachmentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExpenseAttachment>;
    /**
     * Remove an attachment from the system by its ID.
     * Delete an attachment
     */
    budgetingV1ExpensesAttachmentsDestroyRaw(requestParameters: BudgetingV1ExpensesAttachmentsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Remove an attachment from the system by its ID.
     * Delete an attachment
     */
    budgetingV1ExpensesAttachmentsDestroy(requestParameters: BudgetingV1ExpensesAttachmentsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Retrieve a list of all attachments associated with a specific expense.
     * List all attachments for an expense
     */
    budgetingV1ExpensesAttachmentsListRaw(requestParameters: BudgetingV1ExpensesAttachmentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedExpenseAttachmentList>>;
    /**
     * Retrieve a list of all attachments associated with a specific expense.
     * List all attachments for an expense
     */
    budgetingV1ExpensesAttachmentsList(requestParameters: BudgetingV1ExpensesAttachmentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedExpenseAttachmentList>;
    /**
     * Update specific fields of an existing attachment without affecting others.
     * Partially update an attachment
     */
    budgetingV1ExpensesAttachmentsPartialUpdateRaw(requestParameters: BudgetingV1ExpensesAttachmentsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExpenseAttachment>>;
    /**
     * Update specific fields of an existing attachment without affecting others.
     * Partially update an attachment
     */
    budgetingV1ExpensesAttachmentsPartialUpdate(requestParameters: BudgetingV1ExpensesAttachmentsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExpenseAttachment>;
    /**
     * Get detailed information about a specific attachment by its ID.
     * Retrieve a specific attachment
     */
    budgetingV1ExpensesAttachmentsRetrieveRaw(requestParameters: BudgetingV1ExpensesAttachmentsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExpenseAttachment>>;
    /**
     * Get detailed information about a specific attachment by its ID.
     * Retrieve a specific attachment
     */
    budgetingV1ExpensesAttachmentsRetrieve(requestParameters: BudgetingV1ExpensesAttachmentsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExpenseAttachment>;
    /**
     * Modify the details of an existing attachment by its ID.
     * Update an existing attachment
     */
    budgetingV1ExpensesAttachmentsUpdateRaw(requestParameters: BudgetingV1ExpensesAttachmentsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExpenseAttachment>>;
    /**
     * Modify the details of an existing attachment by its ID.
     * Update an existing attachment
     */
    budgetingV1ExpensesAttachmentsUpdate(requestParameters: BudgetingV1ExpensesAttachmentsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExpenseAttachment>;
    /**
     * Add a new expense to the system.
     * Create a new expense
     */
    budgetingV1ExpensesCreateRaw(requestParameters: BudgetingV1ExpensesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Expense>>;
    /**
     * Add a new expense to the system.
     * Create a new expense
     */
    budgetingV1ExpensesCreate(requestParameters: BudgetingV1ExpensesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Expense>;
    /**
     * Remove an expense from the system by its ID.
     * Delete an expense
     */
    budgetingV1ExpensesDestroyRaw(requestParameters: BudgetingV1ExpensesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Remove an expense from the system by its ID.
     * Delete an expense
     */
    budgetingV1ExpensesDestroy(requestParameters: BudgetingV1ExpensesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Retrieve a list of all expenses in the system.
     * List all expenses
     */
    budgetingV1ExpensesListRaw(requestParameters: BudgetingV1ExpensesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedExpenseList>>;
    /**
     * Retrieve a list of all expenses in the system.
     * List all expenses
     */
    budgetingV1ExpensesList(requestParameters: BudgetingV1ExpensesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedExpenseList>;
    /**
     * Update specific fields of an existing expense without affecting others.
     * Partially update an expense
     */
    budgetingV1ExpensesPartialUpdateRaw(requestParameters: BudgetingV1ExpensesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Expense>>;
    /**
     * Update specific fields of an existing expense without affecting others.
     * Partially update an expense
     */
    budgetingV1ExpensesPartialUpdate(requestParameters: BudgetingV1ExpensesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Expense>;
    /**
     * Get detailed information about a specific expense by its ID.
     * Retrieve a specific expense
     */
    budgetingV1ExpensesRetrieveRaw(requestParameters: BudgetingV1ExpensesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Expense>>;
    /**
     * Get detailed information about a specific expense by its ID.
     * Retrieve a specific expense
     */
    budgetingV1ExpensesRetrieve(requestParameters: BudgetingV1ExpensesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Expense>;
    /**
     * Modify the details of an existing expense by its ID.
     * Update an existing expense
     */
    budgetingV1ExpensesUpdateRaw(requestParameters: BudgetingV1ExpensesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Expense>>;
    /**
     * Modify the details of an existing expense by its ID.
     * Update an existing expense
     */
    budgetingV1ExpensesUpdate(requestParameters: BudgetingV1ExpensesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Expense>;
    /**
     * Add a new income category to the system.
     * Create a new income category
     */
    budgetingV1IncomeCategoriesCreateRaw(requestParameters: BudgetingV1IncomeCategoriesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IncomeCategory>>;
    /**
     * Add a new income category to the system.
     * Create a new income category
     */
    budgetingV1IncomeCategoriesCreate(requestParameters: BudgetingV1IncomeCategoriesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IncomeCategory>;
    /**
     * Remove an income category from the system by its ID.
     * Delete an income category
     */
    budgetingV1IncomeCategoriesDestroyRaw(requestParameters: BudgetingV1IncomeCategoriesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Remove an income category from the system by its ID.
     * Delete an income category
     */
    budgetingV1IncomeCategoriesDestroy(requestParameters: BudgetingV1IncomeCategoriesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Retrieve a list of all income categories in the system.
     * List all income categories
     */
    budgetingV1IncomeCategoriesListRaw(requestParameters: BudgetingV1IncomeCategoriesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedIncomeCategoryList>>;
    /**
     * Retrieve a list of all income categories in the system.
     * List all income categories
     */
    budgetingV1IncomeCategoriesList(requestParameters: BudgetingV1IncomeCategoriesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedIncomeCategoryList>;
    /**
     * Update specific fields of an existing income category without affecting others.
     * Partially update an income category
     */
    budgetingV1IncomeCategoriesPartialUpdateRaw(requestParameters: BudgetingV1IncomeCategoriesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IncomeCategory>>;
    /**
     * Update specific fields of an existing income category without affecting others.
     * Partially update an income category
     */
    budgetingV1IncomeCategoriesPartialUpdate(requestParameters: BudgetingV1IncomeCategoriesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IncomeCategory>;
    /**
     * Get detailed information about a specific income category by its ID.
     * Retrieve a specific income category
     */
    budgetingV1IncomeCategoriesRetrieveRaw(requestParameters: BudgetingV1IncomeCategoriesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IncomeCategory>>;
    /**
     * Get detailed information about a specific income category by its ID.
     * Retrieve a specific income category
     */
    budgetingV1IncomeCategoriesRetrieve(requestParameters: BudgetingV1IncomeCategoriesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IncomeCategory>;
    /**
     * Modify the details of an existing income category by its ID.
     * Update an existing income category
     */
    budgetingV1IncomeCategoriesUpdateRaw(requestParameters: BudgetingV1IncomeCategoriesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IncomeCategory>>;
    /**
     * Modify the details of an existing income category by its ID.
     * Update an existing income category
     */
    budgetingV1IncomeCategoriesUpdate(requestParameters: BudgetingV1IncomeCategoriesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IncomeCategory>;
    /**
     * Add a new income to the system.
     * Create a new income
     */
    budgetingV1IncomesCreateRaw(requestParameters: BudgetingV1IncomesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Income>>;
    /**
     * Add a new income to the system.
     * Create a new income
     */
    budgetingV1IncomesCreate(requestParameters: BudgetingV1IncomesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Income>;
    /**
     * Remove an income from the system by its ID.
     * Delete an income
     */
    budgetingV1IncomesDestroyRaw(requestParameters: BudgetingV1IncomesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Remove an income from the system by its ID.
     * Delete an income
     */
    budgetingV1IncomesDestroy(requestParameters: BudgetingV1IncomesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Retrieve a list of all incomes in the system, optionally filtered by category.
     * List all incomes
     */
    budgetingV1IncomesListRaw(requestParameters: BudgetingV1IncomesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedIncomeList>>;
    /**
     * Retrieve a list of all incomes in the system, optionally filtered by category.
     * List all incomes
     */
    budgetingV1IncomesList(requestParameters: BudgetingV1IncomesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedIncomeList>;
    /**
     * Update specific fields of an existing income without affecting others.
     * Partially update an income
     */
    budgetingV1IncomesPartialUpdateRaw(requestParameters: BudgetingV1IncomesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Income>>;
    /**
     * Update specific fields of an existing income without affecting others.
     * Partially update an income
     */
    budgetingV1IncomesPartialUpdate(requestParameters: BudgetingV1IncomesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Income>;
    /**
     * Get detailed information about a specific income by its ID.
     * Retrieve a specific income
     */
    budgetingV1IncomesRetrieveRaw(requestParameters: BudgetingV1IncomesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Income>>;
    /**
     * Get detailed information about a specific income by its ID.
     * Retrieve a specific income
     */
    budgetingV1IncomesRetrieve(requestParameters: BudgetingV1IncomesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Income>;
    /**
     * Modify the details of an existing income by its ID.
     * Update an existing income
     */
    budgetingV1IncomesUpdateRaw(requestParameters: BudgetingV1IncomesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Income>>;
    /**
     * Modify the details of an existing income by its ID.
     * Update an existing income
     */
    budgetingV1IncomesUpdate(requestParameters: BudgetingV1IncomesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Income>;
    /**
     * Add a new production cost category to the system.
     * Create a new production cost category
     */
    budgetingV1ProductionsCostCategoriesCreateRaw(requestParameters: BudgetingV1ProductionsCostCategoriesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCostCategory>>;
    /**
     * Add a new production cost category to the system.
     * Create a new production cost category
     */
    budgetingV1ProductionsCostCategoriesCreate(requestParameters: BudgetingV1ProductionsCostCategoriesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCostCategory>;
    /**
     * Remove a production cost category from the system by its ID.
     * Delete a production cost category
     */
    budgetingV1ProductionsCostCategoriesDestroyRaw(requestParameters: BudgetingV1ProductionsCostCategoriesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Remove a production cost category from the system by its ID.
     * Delete a production cost category
     */
    budgetingV1ProductionsCostCategoriesDestroy(requestParameters: BudgetingV1ProductionsCostCategoriesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Retrieve a list of all production cost categories for a specific production.
     * List all production cost categories
     */
    budgetingV1ProductionsCostCategoriesListRaw(requestParameters: BudgetingV1ProductionsCostCategoriesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProductionCostCategoryList>>;
    /**
     * Retrieve a list of all production cost categories for a specific production.
     * List all production cost categories
     */
    budgetingV1ProductionsCostCategoriesList(requestParameters: BudgetingV1ProductionsCostCategoriesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProductionCostCategoryList>;
    /**
     * Update specific fields of an existing production cost category without affecting others.
     * Partially update a production cost category
     */
    budgetingV1ProductionsCostCategoriesPartialUpdateRaw(requestParameters: BudgetingV1ProductionsCostCategoriesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCostCategory>>;
    /**
     * Update specific fields of an existing production cost category without affecting others.
     * Partially update a production cost category
     */
    budgetingV1ProductionsCostCategoriesPartialUpdate(requestParameters: BudgetingV1ProductionsCostCategoriesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCostCategory>;
    /**
     * Get detailed information about a specific production cost category by its ID.
     * Retrieve a specific production cost category
     */
    budgetingV1ProductionsCostCategoriesRetrieveRaw(requestParameters: BudgetingV1ProductionsCostCategoriesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCostCategory>>;
    /**
     * Get detailed information about a specific production cost category by its ID.
     * Retrieve a specific production cost category
     */
    budgetingV1ProductionsCostCategoriesRetrieve(requestParameters: BudgetingV1ProductionsCostCategoriesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCostCategory>;
    /**
     * Modify the details of an existing production cost category by its ID.
     * Update an existing production cost category
     */
    budgetingV1ProductionsCostCategoriesUpdateRaw(requestParameters: BudgetingV1ProductionsCostCategoriesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCostCategory>>;
    /**
     * Modify the details of an existing production cost category by its ID.
     * Update an existing production cost category
     */
    budgetingV1ProductionsCostCategoriesUpdate(requestParameters: BudgetingV1ProductionsCostCategoriesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCostCategory>;
    /**
     * Add a new production income category to the system.
     * Create a new production income category
     */
    budgetingV1ProductionsIncomeCategoriesCreateRaw(requestParameters: BudgetingV1ProductionsIncomeCategoriesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionIncomeCategory>>;
    /**
     * Add a new production income category to the system.
     * Create a new production income category
     */
    budgetingV1ProductionsIncomeCategoriesCreate(requestParameters: BudgetingV1ProductionsIncomeCategoriesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionIncomeCategory>;
    /**
     * Remove a production income category from the system by its ID.
     * Delete a production income category
     */
    budgetingV1ProductionsIncomeCategoriesDestroyRaw(requestParameters: BudgetingV1ProductionsIncomeCategoriesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Remove a production income category from the system by its ID.
     * Delete a production income category
     */
    budgetingV1ProductionsIncomeCategoriesDestroy(requestParameters: BudgetingV1ProductionsIncomeCategoriesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Retrieve a list of all income categories for a specific production.
     * List all production income categories
     */
    budgetingV1ProductionsIncomeCategoriesListRaw(requestParameters: BudgetingV1ProductionsIncomeCategoriesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProductionIncomeCategoryList>>;
    /**
     * Retrieve a list of all income categories for a specific production.
     * List all production income categories
     */
    budgetingV1ProductionsIncomeCategoriesList(requestParameters: BudgetingV1ProductionsIncomeCategoriesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProductionIncomeCategoryList>;
    /**
     * Update specific fields of an existing production income category without affecting others.
     * Partially update a production income category
     */
    budgetingV1ProductionsIncomeCategoriesPartialUpdateRaw(requestParameters: BudgetingV1ProductionsIncomeCategoriesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionIncomeCategory>>;
    /**
     * Update specific fields of an existing production income category without affecting others.
     * Partially update a production income category
     */
    budgetingV1ProductionsIncomeCategoriesPartialUpdate(requestParameters: BudgetingV1ProductionsIncomeCategoriesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionIncomeCategory>;
    /**
     * Get detailed information about a specific production income category by its ID.
     * Retrieve a specific production income category
     */
    budgetingV1ProductionsIncomeCategoriesRetrieveRaw(requestParameters: BudgetingV1ProductionsIncomeCategoriesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionIncomeCategory>>;
    /**
     * Get detailed information about a specific production income category by its ID.
     * Retrieve a specific production income category
     */
    budgetingV1ProductionsIncomeCategoriesRetrieve(requestParameters: BudgetingV1ProductionsIncomeCategoriesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionIncomeCategory>;
    /**
     * Modify the details of an existing production income category by its ID.
     * Update an existing production income category
     */
    budgetingV1ProductionsIncomeCategoriesUpdateRaw(requestParameters: BudgetingV1ProductionsIncomeCategoriesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionIncomeCategory>>;
    /**
     * Modify the details of an existing production income category by its ID.
     * Update an existing production income category
     */
    budgetingV1ProductionsIncomeCategoriesUpdate(requestParameters: BudgetingV1ProductionsIncomeCategoriesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionIncomeCategory>;
    /**
     * Add a new reimbursement to the system.
     * Create a new reimbursement
     */
    budgetingV1ReimbursementsCreateRaw(requestParameters: BudgetingV1ReimbursementsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reimbursement>>;
    /**
     * Add a new reimbursement to the system.
     * Create a new reimbursement
     */
    budgetingV1ReimbursementsCreate(requestParameters: BudgetingV1ReimbursementsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reimbursement>;
    /**
     * Remove a reimbursement from the system by its ID.
     * Delete a reimbursement
     */
    budgetingV1ReimbursementsDestroyRaw(requestParameters: BudgetingV1ReimbursementsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Remove a reimbursement from the system by its ID.
     * Delete a reimbursement
     */
    budgetingV1ReimbursementsDestroy(requestParameters: BudgetingV1ReimbursementsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Retrieve a list of all reimbursements in the system.
     * List all reimbursements
     */
    budgetingV1ReimbursementsListRaw(requestParameters: BudgetingV1ReimbursementsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedReimbursementList>>;
    /**
     * Retrieve a list of all reimbursements in the system.
     * List all reimbursements
     */
    budgetingV1ReimbursementsList(requestParameters: BudgetingV1ReimbursementsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedReimbursementList>;
    /**
     * Update specific fields of an existing reimbursement without affecting others.
     * Partially update a reimbursement
     */
    budgetingV1ReimbursementsPartialUpdateRaw(requestParameters: BudgetingV1ReimbursementsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reimbursement>>;
    /**
     * Update specific fields of an existing reimbursement without affecting others.
     * Partially update a reimbursement
     */
    budgetingV1ReimbursementsPartialUpdate(requestParameters: BudgetingV1ReimbursementsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reimbursement>;
    /**
     * Get detailed information about a specific reimbursement by its ID.
     * Retrieve a specific reimbursement
     */
    budgetingV1ReimbursementsRetrieveRaw(requestParameters: BudgetingV1ReimbursementsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reimbursement>>;
    /**
     * Get detailed information about a specific reimbursement by its ID.
     * Retrieve a specific reimbursement
     */
    budgetingV1ReimbursementsRetrieve(requestParameters: BudgetingV1ReimbursementsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reimbursement>;
    /**
     * Modify the details of an existing reimbursement by its ID.
     * Update an existing reimbursement
     */
    budgetingV1ReimbursementsUpdateRaw(requestParameters: BudgetingV1ReimbursementsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reimbursement>>;
    /**
     * Modify the details of an existing reimbursement by its ID.
     * Update an existing reimbursement
     */
    budgetingV1ReimbursementsUpdate(requestParameters: BudgetingV1ReimbursementsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reimbursement>;
    /**
     * Add a new vendor to the system.
     * Create a new vendor
     */
    budgetingV1VendorsCreateRaw(requestParameters: BudgetingV1VendorsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Vendor>>;
    /**
     * Add a new vendor to the system.
     * Create a new vendor
     */
    budgetingV1VendorsCreate(requestParameters: BudgetingV1VendorsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Vendor>;
    /**
     * Remove a vendor from the system by its ID.
     * Delete a vendor
     */
    budgetingV1VendorsDestroyRaw(requestParameters: BudgetingV1VendorsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Remove a vendor from the system by its ID.
     * Delete a vendor
     */
    budgetingV1VendorsDestroy(requestParameters: BudgetingV1VendorsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Retrieve a list of all vendors in the system.
     * List all vendors
     */
    budgetingV1VendorsListRaw(requestParameters: BudgetingV1VendorsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedVendorList>>;
    /**
     * Retrieve a list of all vendors in the system.
     * List all vendors
     */
    budgetingV1VendorsList(requestParameters: BudgetingV1VendorsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedVendorList>;
    /**
     * Update specific fields of an existing vendor without affecting others.
     * Partially update a vendor
     */
    budgetingV1VendorsPartialUpdateRaw(requestParameters: BudgetingV1VendorsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Vendor>>;
    /**
     * Update specific fields of an existing vendor without affecting others.
     * Partially update a vendor
     */
    budgetingV1VendorsPartialUpdate(requestParameters: BudgetingV1VendorsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Vendor>;
    /**
     * Get detailed information about a specific vendor by its ID.
     * Retrieve a specific vendor
     */
    budgetingV1VendorsRetrieveRaw(requestParameters: BudgetingV1VendorsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Vendor>>;
    /**
     * Get detailed information about a specific vendor by its ID.
     * Retrieve a specific vendor
     */
    budgetingV1VendorsRetrieve(requestParameters: BudgetingV1VendorsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Vendor>;
    /**
     * Modify the details of an existing vendor by its ID.
     * Update an existing vendor
     */
    budgetingV1VendorsUpdateRaw(requestParameters: BudgetingV1VendorsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Vendor>>;
    /**
     * Modify the details of an existing vendor by its ID.
     * Update an existing vendor
     */
    budgetingV1VendorsUpdate(requestParameters: BudgetingV1VendorsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Vendor>;
}
