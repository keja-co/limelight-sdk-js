"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.90
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetsApi = void 0;
var runtime = require("../runtime");
var index_1 = require("../models/index");
/**
 *
 */
var AssetsApi = /** @class */ (function (_super) {
    __extends(AssetsApi, _super);
    function AssetsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Add a new assignment to a specific asset.
     * Create a new assignment for an asset
     */
    AssetsApi.prototype.assetsV1AssetsAssignmentsCreateRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['assetId'] == null) {
                            throw new runtime.RequiredError('assetId', 'Required parameter "assetId" was null or undefined when calling assetsV1AssetsAssignmentsCreate().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling assetsV1AssetsAssignmentsCreate().');
                        }
                        if (requestParameters['assignment'] == null) {
                            throw new runtime.RequiredError('assignment', 'Required parameter "assignment" was null or undefined when calling assetsV1AssetsAssignmentsCreate().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/t/{tenant_ref}/assets/v1/assets/{asset_id}/assignments/";
                        urlPath = urlPath.replace("{".concat("asset_id", "}"), encodeURIComponent(String(requestParameters['assetId'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.AssignmentToJSON)(requestParameters['assignment']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.AssignmentFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Add a new assignment to a specific asset.
     * Create a new assignment for an asset
     */
    AssetsApi.prototype.assetsV1AssetsAssignmentsCreate = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.assetsV1AssetsAssignmentsCreateRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Remove an assignment from the system by its ID.
     * Delete an assignment
     */
    AssetsApi.prototype.assetsV1AssetsAssignmentsDestroyRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['assetId'] == null) {
                            throw new runtime.RequiredError('assetId', 'Required parameter "assetId" was null or undefined when calling assetsV1AssetsAssignmentsDestroy().');
                        }
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling assetsV1AssetsAssignmentsDestroy().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling assetsV1AssetsAssignmentsDestroy().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/t/{tenant_ref}/assets/v1/assets/{asset_id}/assignments/{id}/";
                        urlPath = urlPath.replace("{".concat("asset_id", "}"), encodeURIComponent(String(requestParameters['assetId'])));
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Remove an assignment from the system by its ID.
     * Delete an assignment
     */
    AssetsApi.prototype.assetsV1AssetsAssignmentsDestroy = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.assetsV1AssetsAssignmentsDestroyRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Retrieve a list of all assignments associated with a specific asset.
     * List all assignments for an asset
     */
    AssetsApi.prototype.assetsV1AssetsAssignmentsListRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['assetId'] == null) {
                            throw new runtime.RequiredError('assetId', 'Required parameter "assetId" was null or undefined when calling assetsV1AssetsAssignmentsList().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling assetsV1AssetsAssignmentsList().');
                        }
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['pageSize'] != null) {
                            queryParameters['page_size'] = requestParameters['pageSize'];
                        }
                        headerParameters = {};
                        urlPath = "/api/t/{tenant_ref}/assets/v1/assets/{asset_id}/assignments/";
                        urlPath = urlPath.replace("{".concat("asset_id", "}"), encodeURIComponent(String(requestParameters['assetId'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PaginatedAssignmentListFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Retrieve a list of all assignments associated with a specific asset.
     * List all assignments for an asset
     */
    AssetsApi.prototype.assetsV1AssetsAssignmentsList = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.assetsV1AssetsAssignmentsListRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update specific fields of an existing assignment without affecting others.
     * Partially update an assignment
     */
    AssetsApi.prototype.assetsV1AssetsAssignmentsPartialUpdateRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['assetId'] == null) {
                            throw new runtime.RequiredError('assetId', 'Required parameter "assetId" was null or undefined when calling assetsV1AssetsAssignmentsPartialUpdate().');
                        }
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling assetsV1AssetsAssignmentsPartialUpdate().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling assetsV1AssetsAssignmentsPartialUpdate().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/t/{tenant_ref}/assets/v1/assets/{asset_id}/assignments/{id}/";
                        urlPath = urlPath.replace("{".concat("asset_id", "}"), encodeURIComponent(String(requestParameters['assetId'])));
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'PATCH',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.PatchedAssignmentToJSON)(requestParameters['patchedAssignment']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.AssignmentFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Update specific fields of an existing assignment without affecting others.
     * Partially update an assignment
     */
    AssetsApi.prototype.assetsV1AssetsAssignmentsPartialUpdate = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.assetsV1AssetsAssignmentsPartialUpdateRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get detailed information about a specific assignment by its ID.
     * Retrieve a specific assignment
     */
    AssetsApi.prototype.assetsV1AssetsAssignmentsRetrieveRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['assetId'] == null) {
                            throw new runtime.RequiredError('assetId', 'Required parameter "assetId" was null or undefined when calling assetsV1AssetsAssignmentsRetrieve().');
                        }
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling assetsV1AssetsAssignmentsRetrieve().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling assetsV1AssetsAssignmentsRetrieve().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/t/{tenant_ref}/assets/v1/assets/{asset_id}/assignments/{id}/";
                        urlPath = urlPath.replace("{".concat("asset_id", "}"), encodeURIComponent(String(requestParameters['assetId'])));
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.AssignmentFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get detailed information about a specific assignment by its ID.
     * Retrieve a specific assignment
     */
    AssetsApi.prototype.assetsV1AssetsAssignmentsRetrieve = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.assetsV1AssetsAssignmentsRetrieveRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Modify the details of an existing assignment by its ID.
     * Update an existing assignment
     */
    AssetsApi.prototype.assetsV1AssetsAssignmentsUpdateRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['assetId'] == null) {
                            throw new runtime.RequiredError('assetId', 'Required parameter "assetId" was null or undefined when calling assetsV1AssetsAssignmentsUpdate().');
                        }
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling assetsV1AssetsAssignmentsUpdate().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling assetsV1AssetsAssignmentsUpdate().');
                        }
                        if (requestParameters['assignment'] == null) {
                            throw new runtime.RequiredError('assignment', 'Required parameter "assignment" was null or undefined when calling assetsV1AssetsAssignmentsUpdate().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/t/{tenant_ref}/assets/v1/assets/{asset_id}/assignments/{id}/";
                        urlPath = urlPath.replace("{".concat("asset_id", "}"), encodeURIComponent(String(requestParameters['assetId'])));
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.AssignmentToJSON)(requestParameters['assignment']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.AssignmentFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Modify the details of an existing assignment by its ID.
     * Update an existing assignment
     */
    AssetsApi.prototype.assetsV1AssetsAssignmentsUpdate = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.assetsV1AssetsAssignmentsUpdateRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Add a new asset to the system.
     * Create a new asset
     */
    AssetsApi.prototype.assetsV1AssetsCreateRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling assetsV1AssetsCreate().');
                        }
                        if (requestParameters['asset'] == null) {
                            throw new runtime.RequiredError('asset', 'Required parameter "asset" was null or undefined when calling assetsV1AssetsCreate().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/t/{tenant_ref}/assets/v1/assets/";
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.AssetToJSON)(requestParameters['asset']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.AssetFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Add a new asset to the system.
     * Create a new asset
     */
    AssetsApi.prototype.assetsV1AssetsCreate = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.assetsV1AssetsCreateRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Remove an asset from the system by its ID.
     * Delete an asset
     */
    AssetsApi.prototype.assetsV1AssetsDestroyRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling assetsV1AssetsDestroy().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling assetsV1AssetsDestroy().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/t/{tenant_ref}/assets/v1/assets/{id}/";
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Remove an asset from the system by its ID.
     * Delete an asset
     */
    AssetsApi.prototype.assetsV1AssetsDestroy = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.assetsV1AssetsDestroyRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Retrieve a list of all assets in the system.
     * List all assets
     */
    AssetsApi.prototype.assetsV1AssetsListRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling assetsV1AssetsList().');
                        }
                        queryParameters = {};
                        if (requestParameters['condition'] != null) {
                            queryParameters['condition'] = requestParameters['condition'];
                        }
                        if (requestParameters['name'] != null) {
                            queryParameters['name'] = requestParameters['name'];
                        }
                        if (requestParameters['nameIcontains'] != null) {
                            queryParameters['name__icontains'] = requestParameters['nameIcontains'];
                        }
                        if (requestParameters['nameIstartswith'] != null) {
                            queryParameters['name__istartswith'] = requestParameters['nameIstartswith'];
                        }
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['pageSize'] != null) {
                            queryParameters['page_size'] = requestParameters['pageSize'];
                        }
                        if (requestParameters['type'] != null) {
                            queryParameters['type'] = requestParameters['type'];
                        }
                        headerParameters = {};
                        urlPath = "/api/t/{tenant_ref}/assets/v1/assets/";
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PaginatedAssetListFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Retrieve a list of all assets in the system.
     * List all assets
     */
    AssetsApi.prototype.assetsV1AssetsList = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.assetsV1AssetsListRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update specific fields of an existing asset without affecting others.
     * Partially update an asset
     */
    AssetsApi.prototype.assetsV1AssetsPartialUpdateRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling assetsV1AssetsPartialUpdate().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling assetsV1AssetsPartialUpdate().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/t/{tenant_ref}/assets/v1/assets/{id}/";
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'PATCH',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.PatchedAssetToJSON)(requestParameters['patchedAsset']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.AssetFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Update specific fields of an existing asset without affecting others.
     * Partially update an asset
     */
    AssetsApi.prototype.assetsV1AssetsPartialUpdate = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.assetsV1AssetsPartialUpdateRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get detailed information about a specific asset by its ID.
     * Retrieve a specific asset
     */
    AssetsApi.prototype.assetsV1AssetsRetrieveRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling assetsV1AssetsRetrieve().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling assetsV1AssetsRetrieve().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/t/{tenant_ref}/assets/v1/assets/{id}/";
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.AssetFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get detailed information about a specific asset by its ID.
     * Retrieve a specific asset
     */
    AssetsApi.prototype.assetsV1AssetsRetrieve = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.assetsV1AssetsRetrieveRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Modify the details of an existing asset by its ID.
     * Update an existing asset
     */
    AssetsApi.prototype.assetsV1AssetsUpdateRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling assetsV1AssetsUpdate().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling assetsV1AssetsUpdate().');
                        }
                        if (requestParameters['asset'] == null) {
                            throw new runtime.RequiredError('asset', 'Required parameter "asset" was null or undefined when calling assetsV1AssetsUpdate().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/t/{tenant_ref}/assets/v1/assets/{id}/";
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.AssetToJSON)(requestParameters['asset']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.AssetFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Modify the details of an existing asset by its ID.
     * Update an existing asset
     */
    AssetsApi.prototype.assetsV1AssetsUpdate = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.assetsV1AssetsUpdateRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return AssetsApi;
}(runtime.BaseAPI));
exports.AssetsApi = AssetsApi;
