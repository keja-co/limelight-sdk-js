/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.98
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { Audition, Feedback, PaginatedAuditionList, PaginatedFeedbackList, PaginatedSignupList, PaginatedSlotList, PatchedAudition, PatchedFeedback, PatchedSignup, PatchedSlot, Signup, Slot } from '../models/index';
export interface AuditionsV1AuditionsCreateRequest {
    tenantRef: string;
    audition: Omit<Audition, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface AuditionsV1AuditionsDestroyRequest {
    id: number;
    pk: number;
    tenantRef: string;
}
export interface AuditionsV1AuditionsListRequest {
    tenantRef: string;
    description?: string;
    descriptionIcontains?: string;
    name?: string;
    nameIcontains?: string;
    page?: number;
    pageSize?: number;
    production?: number;
    venue?: number;
}
export interface AuditionsV1AuditionsPartialUpdateRequest {
    id: number;
    pk: number;
    tenantRef: string;
    patchedAudition?: Omit<PatchedAudition, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface AuditionsV1AuditionsRetrieveRequest {
    id: number;
    pk: number;
    tenantRef: string;
}
export interface AuditionsV1AuditionsSlotsCreateRequest {
    auditionId: number;
    tenantRef: string;
    slot: Omit<Slot, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface AuditionsV1AuditionsSlotsDestroyRequest {
    auditionId: number;
    id: number;
    slotId: number;
    tenantRef: string;
}
export interface AuditionsV1AuditionsSlotsListRequest {
    auditionId: number;
    tenantRef: string;
    page?: number;
    pageSize?: number;
}
export interface AuditionsV1AuditionsSlotsPartialUpdateRequest {
    auditionId: number;
    id: number;
    slotId: number;
    tenantRef: string;
    patchedSlot?: Omit<PatchedSlot, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface AuditionsV1AuditionsSlotsRetrieveRequest {
    auditionId: number;
    id: number;
    slotId: number;
    tenantRef: string;
}
export interface AuditionsV1AuditionsSlotsSignupsCreateRequest {
    auditionId: number;
    slotId: number;
    tenantRef: string;
    signup: Omit<Signup, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface AuditionsV1AuditionsSlotsSignupsDestroyRequest {
    auditionId: number;
    id: number;
    signupId: number;
    slotId: number;
    tenantRef: string;
}
export interface AuditionsV1AuditionsSlotsSignupsFeedbackCreateRequest {
    auditionId: number;
    signupId: number;
    slotId: number;
    tenantRef: string;
    feedback: Omit<Feedback, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface AuditionsV1AuditionsSlotsSignupsFeedbackDestroyRequest {
    auditionId: number;
    id: number;
    signupId: number;
    slotId: number;
    tenantRef: string;
}
export interface AuditionsV1AuditionsSlotsSignupsFeedbackListRequest {
    auditionId: number;
    signupId: number;
    slotId: number;
    tenantRef: string;
    page?: number;
    pageSize?: number;
}
export interface AuditionsV1AuditionsSlotsSignupsFeedbackPartialUpdateRequest {
    auditionId: number;
    id: number;
    signupId: number;
    slotId: number;
    tenantRef: string;
    patchedFeedback?: Omit<PatchedFeedback, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface AuditionsV1AuditionsSlotsSignupsFeedbackRetrieveRequest {
    auditionId: number;
    id: number;
    signupId: number;
    slotId: number;
    tenantRef: string;
}
export interface AuditionsV1AuditionsSlotsSignupsFeedbackUpdateRequest {
    auditionId: number;
    id: number;
    signupId: number;
    slotId: number;
    tenantRef: string;
    feedback: Omit<Feedback, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface AuditionsV1AuditionsSlotsSignupsListRequest {
    auditionId: number;
    slotId: number;
    tenantRef: string;
    page?: number;
    pageSize?: number;
}
export interface AuditionsV1AuditionsSlotsSignupsPartialUpdateRequest {
    auditionId: number;
    id: number;
    signupId: number;
    slotId: number;
    tenantRef: string;
    patchedSignup?: Omit<PatchedSignup, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface AuditionsV1AuditionsSlotsSignupsRetrieveRequest {
    auditionId: number;
    id: number;
    signupId: number;
    slotId: number;
    tenantRef: string;
}
export interface AuditionsV1AuditionsSlotsSignupsUpdateRequest {
    auditionId: number;
    id: number;
    signupId: number;
    slotId: number;
    tenantRef: string;
    signup: Omit<Signup, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface AuditionsV1AuditionsSlotsUpdateRequest {
    auditionId: number;
    id: number;
    slotId: number;
    tenantRef: string;
    slot: Omit<Slot, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
export interface AuditionsV1AuditionsUpdateRequest {
    id: number;
    pk: number;
    tenantRef: string;
    audition: Omit<Audition, 'id' | 'created_at' | 'updated_at' | 'archive_at' | 'tenant' | 'created_by' | 'updated_by'>;
}
/**
 *
 */
export declare class AuditionsApi extends runtime.BaseAPI {
    /**
     * Create a new audition for a production.
     * Create an Audition
     */
    auditionsV1AuditionsCreateRaw(requestParameters: AuditionsV1AuditionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Audition>>;
    /**
     * Create a new audition for a production.
     * Create an Audition
     */
    auditionsV1AuditionsCreate(requestParameters: AuditionsV1AuditionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Audition>;
    /**
     * Delete a specific audition.
     * Delete an Audition
     */
    auditionsV1AuditionsDestroyRaw(requestParameters: AuditionsV1AuditionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete a specific audition.
     * Delete an Audition
     */
    auditionsV1AuditionsDestroy(requestParameters: AuditionsV1AuditionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Retrieve all auditions for productions.
     * List Auditions
     */
    auditionsV1AuditionsListRaw(requestParameters: AuditionsV1AuditionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedAuditionList>>;
    /**
     * Retrieve all auditions for productions.
     * List Auditions
     */
    auditionsV1AuditionsList(requestParameters: AuditionsV1AuditionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedAuditionList>;
    /**
     * Partially update an existing audition.
     * Partially Update an Audition
     */
    auditionsV1AuditionsPartialUpdateRaw(requestParameters: AuditionsV1AuditionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Audition>>;
    /**
     * Partially update an existing audition.
     * Partially Update an Audition
     */
    auditionsV1AuditionsPartialUpdate(requestParameters: AuditionsV1AuditionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Audition>;
    /**
     * Get details of a specific audition.
     * Retrieve an Audition
     */
    auditionsV1AuditionsRetrieveRaw(requestParameters: AuditionsV1AuditionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Audition>>;
    /**
     * Get details of a specific audition.
     * Retrieve an Audition
     */
    auditionsV1AuditionsRetrieve(requestParameters: AuditionsV1AuditionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Audition>;
    /**
     * Create a new slot for a specific audition.
     * Create a Slot
     */
    auditionsV1AuditionsSlotsCreateRaw(requestParameters: AuditionsV1AuditionsSlotsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Slot>>;
    /**
     * Create a new slot for a specific audition.
     * Create a Slot
     */
    auditionsV1AuditionsSlotsCreate(requestParameters: AuditionsV1AuditionsSlotsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Slot>;
    /**
     * Delete a specific slot for an audition.
     * Delete a Slot
     */
    auditionsV1AuditionsSlotsDestroyRaw(requestParameters: AuditionsV1AuditionsSlotsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete a specific slot for an audition.
     * Delete a Slot
     */
    auditionsV1AuditionsSlotsDestroy(requestParameters: AuditionsV1AuditionsSlotsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Retrieve all slots for a specific audition.
     * List Slots for an Audition
     */
    auditionsV1AuditionsSlotsListRaw(requestParameters: AuditionsV1AuditionsSlotsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedSlotList>>;
    /**
     * Retrieve all slots for a specific audition.
     * List Slots for an Audition
     */
    auditionsV1AuditionsSlotsList(requestParameters: AuditionsV1AuditionsSlotsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedSlotList>;
    /**
     * Partially update an existing slot for a specific audition.
     * Partially Update a Slot
     */
    auditionsV1AuditionsSlotsPartialUpdateRaw(requestParameters: AuditionsV1AuditionsSlotsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Slot>>;
    /**
     * Partially update an existing slot for a specific audition.
     * Partially Update a Slot
     */
    auditionsV1AuditionsSlotsPartialUpdate(requestParameters: AuditionsV1AuditionsSlotsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Slot>;
    /**
     * Get details of a specific slot for an audition.
     * Retrieve a Slot
     */
    auditionsV1AuditionsSlotsRetrieveRaw(requestParameters: AuditionsV1AuditionsSlotsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Slot>>;
    /**
     * Get details of a specific slot for an audition.
     * Retrieve a Slot
     */
    auditionsV1AuditionsSlotsRetrieve(requestParameters: AuditionsV1AuditionsSlotsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Slot>;
    /**
     * Create a new signup for a specific slot in an audition.
     * Create a Signup
     */
    auditionsV1AuditionsSlotsSignupsCreateRaw(requestParameters: AuditionsV1AuditionsSlotsSignupsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Signup>>;
    /**
     * Create a new signup for a specific slot in an audition.
     * Create a Signup
     */
    auditionsV1AuditionsSlotsSignupsCreate(requestParameters: AuditionsV1AuditionsSlotsSignupsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Signup>;
    /**
     * Delete a specific signup for a slot in an audition.
     * Delete a Signup
     */
    auditionsV1AuditionsSlotsSignupsDestroyRaw(requestParameters: AuditionsV1AuditionsSlotsSignupsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete a specific signup for a slot in an audition.
     * Delete a Signup
     */
    auditionsV1AuditionsSlotsSignupsDestroy(requestParameters: AuditionsV1AuditionsSlotsSignupsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Create new feedback for a specific signup in an audition slot.
     * Create Feedback
     */
    auditionsV1AuditionsSlotsSignupsFeedbackCreateRaw(requestParameters: AuditionsV1AuditionsSlotsSignupsFeedbackCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Feedback>>;
    /**
     * Create new feedback for a specific signup in an audition slot.
     * Create Feedback
     */
    auditionsV1AuditionsSlotsSignupsFeedbackCreate(requestParameters: AuditionsV1AuditionsSlotsSignupsFeedbackCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Feedback>;
    /**
     * Delete specific feedback for a signup in an audition slot.
     * Delete Feedback
     */
    auditionsV1AuditionsSlotsSignupsFeedbackDestroyRaw(requestParameters: AuditionsV1AuditionsSlotsSignupsFeedbackDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete specific feedback for a signup in an audition slot.
     * Delete Feedback
     */
    auditionsV1AuditionsSlotsSignupsFeedbackDestroy(requestParameters: AuditionsV1AuditionsSlotsSignupsFeedbackDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Retrieve all feedback for a specific signup in an audition slot.
     * List Feedback for a Signup
     */
    auditionsV1AuditionsSlotsSignupsFeedbackListRaw(requestParameters: AuditionsV1AuditionsSlotsSignupsFeedbackListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedFeedbackList>>;
    /**
     * Retrieve all feedback for a specific signup in an audition slot.
     * List Feedback for a Signup
     */
    auditionsV1AuditionsSlotsSignupsFeedbackList(requestParameters: AuditionsV1AuditionsSlotsSignupsFeedbackListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedFeedbackList>;
    /**
     * Partially update existing feedback for a specific signup in an audition slot.
     * Partially Update Feedback
     */
    auditionsV1AuditionsSlotsSignupsFeedbackPartialUpdateRaw(requestParameters: AuditionsV1AuditionsSlotsSignupsFeedbackPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Feedback>>;
    /**
     * Partially update existing feedback for a specific signup in an audition slot.
     * Partially Update Feedback
     */
    auditionsV1AuditionsSlotsSignupsFeedbackPartialUpdate(requestParameters: AuditionsV1AuditionsSlotsSignupsFeedbackPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Feedback>;
    /**
     * Get details of specific feedback for a signup in an audition slot.
     * Retrieve Feedback
     */
    auditionsV1AuditionsSlotsSignupsFeedbackRetrieveRaw(requestParameters: AuditionsV1AuditionsSlotsSignupsFeedbackRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Feedback>>;
    /**
     * Get details of specific feedback for a signup in an audition slot.
     * Retrieve Feedback
     */
    auditionsV1AuditionsSlotsSignupsFeedbackRetrieve(requestParameters: AuditionsV1AuditionsSlotsSignupsFeedbackRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Feedback>;
    /**
     * Update existing feedback for a specific signup in an audition slot.
     * Update Feedback
     */
    auditionsV1AuditionsSlotsSignupsFeedbackUpdateRaw(requestParameters: AuditionsV1AuditionsSlotsSignupsFeedbackUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Feedback>>;
    /**
     * Update existing feedback for a specific signup in an audition slot.
     * Update Feedback
     */
    auditionsV1AuditionsSlotsSignupsFeedbackUpdate(requestParameters: AuditionsV1AuditionsSlotsSignupsFeedbackUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Feedback>;
    /**
     * Retrieve all signups for a specific slot in an audition.
     * List Signups for a Slot
     */
    auditionsV1AuditionsSlotsSignupsListRaw(requestParameters: AuditionsV1AuditionsSlotsSignupsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedSignupList>>;
    /**
     * Retrieve all signups for a specific slot in an audition.
     * List Signups for a Slot
     */
    auditionsV1AuditionsSlotsSignupsList(requestParameters: AuditionsV1AuditionsSlotsSignupsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedSignupList>;
    /**
     * Partially update an existing signup for a specific slot in an audition.
     * Partially Update a Signup
     */
    auditionsV1AuditionsSlotsSignupsPartialUpdateRaw(requestParameters: AuditionsV1AuditionsSlotsSignupsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Signup>>;
    /**
     * Partially update an existing signup for a specific slot in an audition.
     * Partially Update a Signup
     */
    auditionsV1AuditionsSlotsSignupsPartialUpdate(requestParameters: AuditionsV1AuditionsSlotsSignupsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Signup>;
    /**
     * Get details of a specific signup for a slot in an audition.
     * Retrieve a Signup
     */
    auditionsV1AuditionsSlotsSignupsRetrieveRaw(requestParameters: AuditionsV1AuditionsSlotsSignupsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Signup>>;
    /**
     * Get details of a specific signup for a slot in an audition.
     * Retrieve a Signup
     */
    auditionsV1AuditionsSlotsSignupsRetrieve(requestParameters: AuditionsV1AuditionsSlotsSignupsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Signup>;
    /**
     * Update an existing signup for a specific slot in an audition.
     * Update a Signup
     */
    auditionsV1AuditionsSlotsSignupsUpdateRaw(requestParameters: AuditionsV1AuditionsSlotsSignupsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Signup>>;
    /**
     * Update an existing signup for a specific slot in an audition.
     * Update a Signup
     */
    auditionsV1AuditionsSlotsSignupsUpdate(requestParameters: AuditionsV1AuditionsSlotsSignupsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Signup>;
    /**
     * Update an existing slot for a specific audition.
     * Update a Slot
     */
    auditionsV1AuditionsSlotsUpdateRaw(requestParameters: AuditionsV1AuditionsSlotsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Slot>>;
    /**
     * Update an existing slot for a specific audition.
     * Update a Slot
     */
    auditionsV1AuditionsSlotsUpdate(requestParameters: AuditionsV1AuditionsSlotsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Slot>;
    /**
     * Update an existing audition.
     * Update an Audition
     */
    auditionsV1AuditionsUpdateRaw(requestParameters: AuditionsV1AuditionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Audition>>;
    /**
     * Update an existing audition.
     * Update an Audition
     */
    auditionsV1AuditionsUpdate(requestParameters: AuditionsV1AuditionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Audition>;
}
