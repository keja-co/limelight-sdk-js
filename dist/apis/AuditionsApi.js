"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.109
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuditionsApi = void 0;
var runtime = require("../runtime");
var index_1 = require("../models/index");
/**
 *
 */
var AuditionsApi = /** @class */ (function (_super) {
    __extends(AuditionsApi, _super);
    function AuditionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a new audition for a production.
     * Create an Audition
     */
    AuditionsApi.prototype.auditionsV1AuditionsCreateRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsCreate().');
                        }
                        if (requestParameters['audition'] == null) {
                            throw new runtime.RequiredError('audition', 'Required parameter "audition" was null or undefined when calling auditionsV1AuditionsCreate().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/t/{tenant_ref}/auditions/v1/auditions/";
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.AuditionToJSON)(requestParameters['audition']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.AuditionFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Create a new audition for a production.
     * Create an Audition
     */
    AuditionsApi.prototype.auditionsV1AuditionsCreate = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.auditionsV1AuditionsCreateRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Delete a specific audition.
     * Delete an Audition
     */
    AuditionsApi.prototype.auditionsV1AuditionsDestroyRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling auditionsV1AuditionsDestroy().');
                        }
                        if (requestParameters['pk'] == null) {
                            throw new runtime.RequiredError('pk', 'Required parameter "pk" was null or undefined when calling auditionsV1AuditionsDestroy().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsDestroy().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/t/{tenant_ref}/auditions/v1/auditions/{id}/";
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("pk", "}"), encodeURIComponent(String(requestParameters['pk'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Delete a specific audition.
     * Delete an Audition
     */
    AuditionsApi.prototype.auditionsV1AuditionsDestroy = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.auditionsV1AuditionsDestroyRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Retrieve all auditions for productions.
     * List Auditions
     */
    AuditionsApi.prototype.auditionsV1AuditionsListRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsList().');
                        }
                        queryParameters = {};
                        if (requestParameters['description'] != null) {
                            queryParameters['description'] = requestParameters['description'];
                        }
                        if (requestParameters['descriptionIcontains'] != null) {
                            queryParameters['description__icontains'] = requestParameters['descriptionIcontains'];
                        }
                        if (requestParameters['name'] != null) {
                            queryParameters['name'] = requestParameters['name'];
                        }
                        if (requestParameters['nameIcontains'] != null) {
                            queryParameters['name__icontains'] = requestParameters['nameIcontains'];
                        }
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['pageSize'] != null) {
                            queryParameters['page_size'] = requestParameters['pageSize'];
                        }
                        if (requestParameters['production'] != null) {
                            queryParameters['production'] = requestParameters['production'];
                        }
                        if (requestParameters['venue'] != null) {
                            queryParameters['venue'] = requestParameters['venue'];
                        }
                        headerParameters = {};
                        urlPath = "/api/t/{tenant_ref}/auditions/v1/auditions/";
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PaginatedAuditionListFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Retrieve all auditions for productions.
     * List Auditions
     */
    AuditionsApi.prototype.auditionsV1AuditionsList = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.auditionsV1AuditionsListRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Partially update an existing audition.
     * Partially Update an Audition
     */
    AuditionsApi.prototype.auditionsV1AuditionsPartialUpdateRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling auditionsV1AuditionsPartialUpdate().');
                        }
                        if (requestParameters['pk'] == null) {
                            throw new runtime.RequiredError('pk', 'Required parameter "pk" was null or undefined when calling auditionsV1AuditionsPartialUpdate().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsPartialUpdate().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/t/{tenant_ref}/auditions/v1/auditions/{id}/";
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("pk", "}"), encodeURIComponent(String(requestParameters['pk'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'PATCH',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.PatchedAuditionToJSON)(requestParameters['patchedAudition']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.AuditionFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Partially update an existing audition.
     * Partially Update an Audition
     */
    AuditionsApi.prototype.auditionsV1AuditionsPartialUpdate = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.auditionsV1AuditionsPartialUpdateRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get details of a specific audition.
     * Retrieve an Audition
     */
    AuditionsApi.prototype.auditionsV1AuditionsRetrieveRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling auditionsV1AuditionsRetrieve().');
                        }
                        if (requestParameters['pk'] == null) {
                            throw new runtime.RequiredError('pk', 'Required parameter "pk" was null or undefined when calling auditionsV1AuditionsRetrieve().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsRetrieve().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/t/{tenant_ref}/auditions/v1/auditions/{id}/";
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("pk", "}"), encodeURIComponent(String(requestParameters['pk'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.AuditionFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get details of a specific audition.
     * Retrieve an Audition
     */
    AuditionsApi.prototype.auditionsV1AuditionsRetrieve = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.auditionsV1AuditionsRetrieveRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Create a new slot for a specific audition.
     * Create a Slot
     */
    AuditionsApi.prototype.auditionsV1AuditionsSlotsCreateRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['auditionId'] == null) {
                            throw new runtime.RequiredError('auditionId', 'Required parameter "auditionId" was null or undefined when calling auditionsV1AuditionsSlotsCreate().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsSlotsCreate().');
                        }
                        if (requestParameters['slot'] == null) {
                            throw new runtime.RequiredError('slot', 'Required parameter "slot" was null or undefined when calling auditionsV1AuditionsSlotsCreate().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/t/{tenant_ref}/auditions/v1/auditions/{audition_id}/slots/";
                        urlPath = urlPath.replace("{".concat("audition_id", "}"), encodeURIComponent(String(requestParameters['auditionId'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.SlotToJSON)(requestParameters['slot']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.SlotFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Create a new slot for a specific audition.
     * Create a Slot
     */
    AuditionsApi.prototype.auditionsV1AuditionsSlotsCreate = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.auditionsV1AuditionsSlotsCreateRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Delete a specific slot for an audition.
     * Delete a Slot
     */
    AuditionsApi.prototype.auditionsV1AuditionsSlotsDestroyRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['auditionId'] == null) {
                            throw new runtime.RequiredError('auditionId', 'Required parameter "auditionId" was null or undefined when calling auditionsV1AuditionsSlotsDestroy().');
                        }
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling auditionsV1AuditionsSlotsDestroy().');
                        }
                        if (requestParameters['slotId'] == null) {
                            throw new runtime.RequiredError('slotId', 'Required parameter "slotId" was null or undefined when calling auditionsV1AuditionsSlotsDestroy().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsSlotsDestroy().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/t/{tenant_ref}/auditions/v1/auditions/{audition_id}/slots/{id}/";
                        urlPath = urlPath.replace("{".concat("audition_id", "}"), encodeURIComponent(String(requestParameters['auditionId'])));
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("slot_id", "}"), encodeURIComponent(String(requestParameters['slotId'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Delete a specific slot for an audition.
     * Delete a Slot
     */
    AuditionsApi.prototype.auditionsV1AuditionsSlotsDestroy = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.auditionsV1AuditionsSlotsDestroyRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Retrieve all slots for a specific audition.
     * List Slots for an Audition
     */
    AuditionsApi.prototype.auditionsV1AuditionsSlotsListRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['auditionId'] == null) {
                            throw new runtime.RequiredError('auditionId', 'Required parameter "auditionId" was null or undefined when calling auditionsV1AuditionsSlotsList().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsSlotsList().');
                        }
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['pageSize'] != null) {
                            queryParameters['page_size'] = requestParameters['pageSize'];
                        }
                        headerParameters = {};
                        urlPath = "/api/t/{tenant_ref}/auditions/v1/auditions/{audition_id}/slots/";
                        urlPath = urlPath.replace("{".concat("audition_id", "}"), encodeURIComponent(String(requestParameters['auditionId'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PaginatedSlotListFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Retrieve all slots for a specific audition.
     * List Slots for an Audition
     */
    AuditionsApi.prototype.auditionsV1AuditionsSlotsList = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.auditionsV1AuditionsSlotsListRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Partially update an existing slot for a specific audition.
     * Partially Update a Slot
     */
    AuditionsApi.prototype.auditionsV1AuditionsSlotsPartialUpdateRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['auditionId'] == null) {
                            throw new runtime.RequiredError('auditionId', 'Required parameter "auditionId" was null or undefined when calling auditionsV1AuditionsSlotsPartialUpdate().');
                        }
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling auditionsV1AuditionsSlotsPartialUpdate().');
                        }
                        if (requestParameters['slotId'] == null) {
                            throw new runtime.RequiredError('slotId', 'Required parameter "slotId" was null or undefined when calling auditionsV1AuditionsSlotsPartialUpdate().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsSlotsPartialUpdate().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/t/{tenant_ref}/auditions/v1/auditions/{audition_id}/slots/{id}/";
                        urlPath = urlPath.replace("{".concat("audition_id", "}"), encodeURIComponent(String(requestParameters['auditionId'])));
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("slot_id", "}"), encodeURIComponent(String(requestParameters['slotId'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'PATCH',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.PatchedSlotToJSON)(requestParameters['patchedSlot']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.SlotFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Partially update an existing slot for a specific audition.
     * Partially Update a Slot
     */
    AuditionsApi.prototype.auditionsV1AuditionsSlotsPartialUpdate = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.auditionsV1AuditionsSlotsPartialUpdateRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get details of a specific slot for an audition.
     * Retrieve a Slot
     */
    AuditionsApi.prototype.auditionsV1AuditionsSlotsRetrieveRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['auditionId'] == null) {
                            throw new runtime.RequiredError('auditionId', 'Required parameter "auditionId" was null or undefined when calling auditionsV1AuditionsSlotsRetrieve().');
                        }
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling auditionsV1AuditionsSlotsRetrieve().');
                        }
                        if (requestParameters['slotId'] == null) {
                            throw new runtime.RequiredError('slotId', 'Required parameter "slotId" was null or undefined when calling auditionsV1AuditionsSlotsRetrieve().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsSlotsRetrieve().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/t/{tenant_ref}/auditions/v1/auditions/{audition_id}/slots/{id}/";
                        urlPath = urlPath.replace("{".concat("audition_id", "}"), encodeURIComponent(String(requestParameters['auditionId'])));
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("slot_id", "}"), encodeURIComponent(String(requestParameters['slotId'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.SlotFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get details of a specific slot for an audition.
     * Retrieve a Slot
     */
    AuditionsApi.prototype.auditionsV1AuditionsSlotsRetrieve = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.auditionsV1AuditionsSlotsRetrieveRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Create a new signup for a specific slot in an audition.
     * Create a Signup
     */
    AuditionsApi.prototype.auditionsV1AuditionsSlotsSignupsCreateRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['auditionId'] == null) {
                            throw new runtime.RequiredError('auditionId', 'Required parameter "auditionId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsCreate().');
                        }
                        if (requestParameters['slotId'] == null) {
                            throw new runtime.RequiredError('slotId', 'Required parameter "slotId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsCreate().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsSlotsSignupsCreate().');
                        }
                        if (requestParameters['signup'] == null) {
                            throw new runtime.RequiredError('signup', 'Required parameter "signup" was null or undefined when calling auditionsV1AuditionsSlotsSignupsCreate().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/t/{tenant_ref}/auditions/v1/auditions/{audition_id}/slots/{slot_id}/signups/";
                        urlPath = urlPath.replace("{".concat("audition_id", "}"), encodeURIComponent(String(requestParameters['auditionId'])));
                        urlPath = urlPath.replace("{".concat("slot_id", "}"), encodeURIComponent(String(requestParameters['slotId'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.SignupToJSON)(requestParameters['signup']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.SignupFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Create a new signup for a specific slot in an audition.
     * Create a Signup
     */
    AuditionsApi.prototype.auditionsV1AuditionsSlotsSignupsCreate = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.auditionsV1AuditionsSlotsSignupsCreateRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Delete a specific signup for a slot in an audition.
     * Delete a Signup
     */
    AuditionsApi.prototype.auditionsV1AuditionsSlotsSignupsDestroyRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['auditionId'] == null) {
                            throw new runtime.RequiredError('auditionId', 'Required parameter "auditionId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsDestroy().');
                        }
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling auditionsV1AuditionsSlotsSignupsDestroy().');
                        }
                        if (requestParameters['signupId'] == null) {
                            throw new runtime.RequiredError('signupId', 'Required parameter "signupId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsDestroy().');
                        }
                        if (requestParameters['slotId'] == null) {
                            throw new runtime.RequiredError('slotId', 'Required parameter "slotId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsDestroy().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsSlotsSignupsDestroy().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/t/{tenant_ref}/auditions/v1/auditions/{audition_id}/slots/{slot_id}/signups/{id}/";
                        urlPath = urlPath.replace("{".concat("audition_id", "}"), encodeURIComponent(String(requestParameters['auditionId'])));
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("signup_id", "}"), encodeURIComponent(String(requestParameters['signupId'])));
                        urlPath = urlPath.replace("{".concat("slot_id", "}"), encodeURIComponent(String(requestParameters['slotId'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Delete a specific signup for a slot in an audition.
     * Delete a Signup
     */
    AuditionsApi.prototype.auditionsV1AuditionsSlotsSignupsDestroy = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.auditionsV1AuditionsSlotsSignupsDestroyRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Create new feedback for a specific signup in an audition slot.
     * Create Feedback
     */
    AuditionsApi.prototype.auditionsV1AuditionsSlotsSignupsFeedbackCreateRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['auditionId'] == null) {
                            throw new runtime.RequiredError('auditionId', 'Required parameter "auditionId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackCreate().');
                        }
                        if (requestParameters['signupId'] == null) {
                            throw new runtime.RequiredError('signupId', 'Required parameter "signupId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackCreate().');
                        }
                        if (requestParameters['slotId'] == null) {
                            throw new runtime.RequiredError('slotId', 'Required parameter "slotId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackCreate().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackCreate().');
                        }
                        if (requestParameters['feedback'] == null) {
                            throw new runtime.RequiredError('feedback', 'Required parameter "feedback" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackCreate().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/t/{tenant_ref}/auditions/v1/auditions/{audition_id}/slots/{slot_id}/signups/{signup_id}/feedback/";
                        urlPath = urlPath.replace("{".concat("audition_id", "}"), encodeURIComponent(String(requestParameters['auditionId'])));
                        urlPath = urlPath.replace("{".concat("signup_id", "}"), encodeURIComponent(String(requestParameters['signupId'])));
                        urlPath = urlPath.replace("{".concat("slot_id", "}"), encodeURIComponent(String(requestParameters['slotId'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.FeedbackToJSON)(requestParameters['feedback']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.FeedbackFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Create new feedback for a specific signup in an audition slot.
     * Create Feedback
     */
    AuditionsApi.prototype.auditionsV1AuditionsSlotsSignupsFeedbackCreate = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.auditionsV1AuditionsSlotsSignupsFeedbackCreateRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Delete specific feedback for a signup in an audition slot.
     * Delete Feedback
     */
    AuditionsApi.prototype.auditionsV1AuditionsSlotsSignupsFeedbackDestroyRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['auditionId'] == null) {
                            throw new runtime.RequiredError('auditionId', 'Required parameter "auditionId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackDestroy().');
                        }
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackDestroy().');
                        }
                        if (requestParameters['signupId'] == null) {
                            throw new runtime.RequiredError('signupId', 'Required parameter "signupId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackDestroy().');
                        }
                        if (requestParameters['slotId'] == null) {
                            throw new runtime.RequiredError('slotId', 'Required parameter "slotId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackDestroy().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackDestroy().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/t/{tenant_ref}/auditions/v1/auditions/{audition_id}/slots/{slot_id}/signups/{signup_id}/feedback/{id}/";
                        urlPath = urlPath.replace("{".concat("audition_id", "}"), encodeURIComponent(String(requestParameters['auditionId'])));
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("signup_id", "}"), encodeURIComponent(String(requestParameters['signupId'])));
                        urlPath = urlPath.replace("{".concat("slot_id", "}"), encodeURIComponent(String(requestParameters['slotId'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Delete specific feedback for a signup in an audition slot.
     * Delete Feedback
     */
    AuditionsApi.prototype.auditionsV1AuditionsSlotsSignupsFeedbackDestroy = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.auditionsV1AuditionsSlotsSignupsFeedbackDestroyRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Retrieve all feedback for a specific signup in an audition slot.
     * List Feedback for a Signup
     */
    AuditionsApi.prototype.auditionsV1AuditionsSlotsSignupsFeedbackListRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['auditionId'] == null) {
                            throw new runtime.RequiredError('auditionId', 'Required parameter "auditionId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackList().');
                        }
                        if (requestParameters['signupId'] == null) {
                            throw new runtime.RequiredError('signupId', 'Required parameter "signupId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackList().');
                        }
                        if (requestParameters['slotId'] == null) {
                            throw new runtime.RequiredError('slotId', 'Required parameter "slotId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackList().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackList().');
                        }
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['pageSize'] != null) {
                            queryParameters['page_size'] = requestParameters['pageSize'];
                        }
                        headerParameters = {};
                        urlPath = "/api/t/{tenant_ref}/auditions/v1/auditions/{audition_id}/slots/{slot_id}/signups/{signup_id}/feedback/";
                        urlPath = urlPath.replace("{".concat("audition_id", "}"), encodeURIComponent(String(requestParameters['auditionId'])));
                        urlPath = urlPath.replace("{".concat("signup_id", "}"), encodeURIComponent(String(requestParameters['signupId'])));
                        urlPath = urlPath.replace("{".concat("slot_id", "}"), encodeURIComponent(String(requestParameters['slotId'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PaginatedFeedbackListFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Retrieve all feedback for a specific signup in an audition slot.
     * List Feedback for a Signup
     */
    AuditionsApi.prototype.auditionsV1AuditionsSlotsSignupsFeedbackList = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.auditionsV1AuditionsSlotsSignupsFeedbackListRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Partially update existing feedback for a specific signup in an audition slot.
     * Partially Update Feedback
     */
    AuditionsApi.prototype.auditionsV1AuditionsSlotsSignupsFeedbackPartialUpdateRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['auditionId'] == null) {
                            throw new runtime.RequiredError('auditionId', 'Required parameter "auditionId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackPartialUpdate().');
                        }
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackPartialUpdate().');
                        }
                        if (requestParameters['signupId'] == null) {
                            throw new runtime.RequiredError('signupId', 'Required parameter "signupId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackPartialUpdate().');
                        }
                        if (requestParameters['slotId'] == null) {
                            throw new runtime.RequiredError('slotId', 'Required parameter "slotId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackPartialUpdate().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackPartialUpdate().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/t/{tenant_ref}/auditions/v1/auditions/{audition_id}/slots/{slot_id}/signups/{signup_id}/feedback/{id}/";
                        urlPath = urlPath.replace("{".concat("audition_id", "}"), encodeURIComponent(String(requestParameters['auditionId'])));
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("signup_id", "}"), encodeURIComponent(String(requestParameters['signupId'])));
                        urlPath = urlPath.replace("{".concat("slot_id", "}"), encodeURIComponent(String(requestParameters['slotId'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'PATCH',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.PatchedFeedbackToJSON)(requestParameters['patchedFeedback']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.FeedbackFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Partially update existing feedback for a specific signup in an audition slot.
     * Partially Update Feedback
     */
    AuditionsApi.prototype.auditionsV1AuditionsSlotsSignupsFeedbackPartialUpdate = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.auditionsV1AuditionsSlotsSignupsFeedbackPartialUpdateRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get details of specific feedback for a signup in an audition slot.
     * Retrieve Feedback
     */
    AuditionsApi.prototype.auditionsV1AuditionsSlotsSignupsFeedbackRetrieveRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['auditionId'] == null) {
                            throw new runtime.RequiredError('auditionId', 'Required parameter "auditionId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackRetrieve().');
                        }
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackRetrieve().');
                        }
                        if (requestParameters['signupId'] == null) {
                            throw new runtime.RequiredError('signupId', 'Required parameter "signupId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackRetrieve().');
                        }
                        if (requestParameters['slotId'] == null) {
                            throw new runtime.RequiredError('slotId', 'Required parameter "slotId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackRetrieve().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackRetrieve().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/t/{tenant_ref}/auditions/v1/auditions/{audition_id}/slots/{slot_id}/signups/{signup_id}/feedback/{id}/";
                        urlPath = urlPath.replace("{".concat("audition_id", "}"), encodeURIComponent(String(requestParameters['auditionId'])));
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("signup_id", "}"), encodeURIComponent(String(requestParameters['signupId'])));
                        urlPath = urlPath.replace("{".concat("slot_id", "}"), encodeURIComponent(String(requestParameters['slotId'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.FeedbackFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get details of specific feedback for a signup in an audition slot.
     * Retrieve Feedback
     */
    AuditionsApi.prototype.auditionsV1AuditionsSlotsSignupsFeedbackRetrieve = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.auditionsV1AuditionsSlotsSignupsFeedbackRetrieveRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update existing feedback for a specific signup in an audition slot.
     * Update Feedback
     */
    AuditionsApi.prototype.auditionsV1AuditionsSlotsSignupsFeedbackUpdateRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['auditionId'] == null) {
                            throw new runtime.RequiredError('auditionId', 'Required parameter "auditionId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackUpdate().');
                        }
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackUpdate().');
                        }
                        if (requestParameters['signupId'] == null) {
                            throw new runtime.RequiredError('signupId', 'Required parameter "signupId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackUpdate().');
                        }
                        if (requestParameters['slotId'] == null) {
                            throw new runtime.RequiredError('slotId', 'Required parameter "slotId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackUpdate().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackUpdate().');
                        }
                        if (requestParameters['feedback'] == null) {
                            throw new runtime.RequiredError('feedback', 'Required parameter "feedback" was null or undefined when calling auditionsV1AuditionsSlotsSignupsFeedbackUpdate().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/t/{tenant_ref}/auditions/v1/auditions/{audition_id}/slots/{slot_id}/signups/{signup_id}/feedback/{id}/";
                        urlPath = urlPath.replace("{".concat("audition_id", "}"), encodeURIComponent(String(requestParameters['auditionId'])));
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("signup_id", "}"), encodeURIComponent(String(requestParameters['signupId'])));
                        urlPath = urlPath.replace("{".concat("slot_id", "}"), encodeURIComponent(String(requestParameters['slotId'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.FeedbackToJSON)(requestParameters['feedback']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.FeedbackFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Update existing feedback for a specific signup in an audition slot.
     * Update Feedback
     */
    AuditionsApi.prototype.auditionsV1AuditionsSlotsSignupsFeedbackUpdate = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.auditionsV1AuditionsSlotsSignupsFeedbackUpdateRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Retrieve all signups for a specific slot in an audition.
     * List Signups for a Slot
     */
    AuditionsApi.prototype.auditionsV1AuditionsSlotsSignupsListRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['auditionId'] == null) {
                            throw new runtime.RequiredError('auditionId', 'Required parameter "auditionId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsList().');
                        }
                        if (requestParameters['slotId'] == null) {
                            throw new runtime.RequiredError('slotId', 'Required parameter "slotId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsList().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsSlotsSignupsList().');
                        }
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['pageSize'] != null) {
                            queryParameters['page_size'] = requestParameters['pageSize'];
                        }
                        headerParameters = {};
                        urlPath = "/api/t/{tenant_ref}/auditions/v1/auditions/{audition_id}/slots/{slot_id}/signups/";
                        urlPath = urlPath.replace("{".concat("audition_id", "}"), encodeURIComponent(String(requestParameters['auditionId'])));
                        urlPath = urlPath.replace("{".concat("slot_id", "}"), encodeURIComponent(String(requestParameters['slotId'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PaginatedSignupListFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Retrieve all signups for a specific slot in an audition.
     * List Signups for a Slot
     */
    AuditionsApi.prototype.auditionsV1AuditionsSlotsSignupsList = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.auditionsV1AuditionsSlotsSignupsListRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Partially update an existing signup for a specific slot in an audition.
     * Partially Update a Signup
     */
    AuditionsApi.prototype.auditionsV1AuditionsSlotsSignupsPartialUpdateRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['auditionId'] == null) {
                            throw new runtime.RequiredError('auditionId', 'Required parameter "auditionId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsPartialUpdate().');
                        }
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling auditionsV1AuditionsSlotsSignupsPartialUpdate().');
                        }
                        if (requestParameters['signupId'] == null) {
                            throw new runtime.RequiredError('signupId', 'Required parameter "signupId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsPartialUpdate().');
                        }
                        if (requestParameters['slotId'] == null) {
                            throw new runtime.RequiredError('slotId', 'Required parameter "slotId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsPartialUpdate().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsSlotsSignupsPartialUpdate().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/t/{tenant_ref}/auditions/v1/auditions/{audition_id}/slots/{slot_id}/signups/{id}/";
                        urlPath = urlPath.replace("{".concat("audition_id", "}"), encodeURIComponent(String(requestParameters['auditionId'])));
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("signup_id", "}"), encodeURIComponent(String(requestParameters['signupId'])));
                        urlPath = urlPath.replace("{".concat("slot_id", "}"), encodeURIComponent(String(requestParameters['slotId'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'PATCH',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.PatchedSignupToJSON)(requestParameters['patchedSignup']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.SignupFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Partially update an existing signup for a specific slot in an audition.
     * Partially Update a Signup
     */
    AuditionsApi.prototype.auditionsV1AuditionsSlotsSignupsPartialUpdate = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.auditionsV1AuditionsSlotsSignupsPartialUpdateRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get details of a specific signup for a slot in an audition.
     * Retrieve a Signup
     */
    AuditionsApi.prototype.auditionsV1AuditionsSlotsSignupsRetrieveRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['auditionId'] == null) {
                            throw new runtime.RequiredError('auditionId', 'Required parameter "auditionId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsRetrieve().');
                        }
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling auditionsV1AuditionsSlotsSignupsRetrieve().');
                        }
                        if (requestParameters['signupId'] == null) {
                            throw new runtime.RequiredError('signupId', 'Required parameter "signupId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsRetrieve().');
                        }
                        if (requestParameters['slotId'] == null) {
                            throw new runtime.RequiredError('slotId', 'Required parameter "slotId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsRetrieve().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsSlotsSignupsRetrieve().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/t/{tenant_ref}/auditions/v1/auditions/{audition_id}/slots/{slot_id}/signups/{id}/";
                        urlPath = urlPath.replace("{".concat("audition_id", "}"), encodeURIComponent(String(requestParameters['auditionId'])));
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("signup_id", "}"), encodeURIComponent(String(requestParameters['signupId'])));
                        urlPath = urlPath.replace("{".concat("slot_id", "}"), encodeURIComponent(String(requestParameters['slotId'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.SignupFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get details of a specific signup for a slot in an audition.
     * Retrieve a Signup
     */
    AuditionsApi.prototype.auditionsV1AuditionsSlotsSignupsRetrieve = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.auditionsV1AuditionsSlotsSignupsRetrieveRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update an existing signup for a specific slot in an audition.
     * Update a Signup
     */
    AuditionsApi.prototype.auditionsV1AuditionsSlotsSignupsUpdateRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['auditionId'] == null) {
                            throw new runtime.RequiredError('auditionId', 'Required parameter "auditionId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsUpdate().');
                        }
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling auditionsV1AuditionsSlotsSignupsUpdate().');
                        }
                        if (requestParameters['signupId'] == null) {
                            throw new runtime.RequiredError('signupId', 'Required parameter "signupId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsUpdate().');
                        }
                        if (requestParameters['slotId'] == null) {
                            throw new runtime.RequiredError('slotId', 'Required parameter "slotId" was null or undefined when calling auditionsV1AuditionsSlotsSignupsUpdate().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsSlotsSignupsUpdate().');
                        }
                        if (requestParameters['signup'] == null) {
                            throw new runtime.RequiredError('signup', 'Required parameter "signup" was null or undefined when calling auditionsV1AuditionsSlotsSignupsUpdate().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/t/{tenant_ref}/auditions/v1/auditions/{audition_id}/slots/{slot_id}/signups/{id}/";
                        urlPath = urlPath.replace("{".concat("audition_id", "}"), encodeURIComponent(String(requestParameters['auditionId'])));
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("signup_id", "}"), encodeURIComponent(String(requestParameters['signupId'])));
                        urlPath = urlPath.replace("{".concat("slot_id", "}"), encodeURIComponent(String(requestParameters['slotId'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.SignupToJSON)(requestParameters['signup']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.SignupFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Update an existing signup for a specific slot in an audition.
     * Update a Signup
     */
    AuditionsApi.prototype.auditionsV1AuditionsSlotsSignupsUpdate = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.auditionsV1AuditionsSlotsSignupsUpdateRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update an existing slot for a specific audition.
     * Update a Slot
     */
    AuditionsApi.prototype.auditionsV1AuditionsSlotsUpdateRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['auditionId'] == null) {
                            throw new runtime.RequiredError('auditionId', 'Required parameter "auditionId" was null or undefined when calling auditionsV1AuditionsSlotsUpdate().');
                        }
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling auditionsV1AuditionsSlotsUpdate().');
                        }
                        if (requestParameters['slotId'] == null) {
                            throw new runtime.RequiredError('slotId', 'Required parameter "slotId" was null or undefined when calling auditionsV1AuditionsSlotsUpdate().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsSlotsUpdate().');
                        }
                        if (requestParameters['slot'] == null) {
                            throw new runtime.RequiredError('slot', 'Required parameter "slot" was null or undefined when calling auditionsV1AuditionsSlotsUpdate().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/t/{tenant_ref}/auditions/v1/auditions/{audition_id}/slots/{id}/";
                        urlPath = urlPath.replace("{".concat("audition_id", "}"), encodeURIComponent(String(requestParameters['auditionId'])));
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("slot_id", "}"), encodeURIComponent(String(requestParameters['slotId'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.SlotToJSON)(requestParameters['slot']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.SlotFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Update an existing slot for a specific audition.
     * Update a Slot
     */
    AuditionsApi.prototype.auditionsV1AuditionsSlotsUpdate = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.auditionsV1AuditionsSlotsUpdateRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update an existing audition.
     * Update an Audition
     */
    AuditionsApi.prototype.auditionsV1AuditionsUpdateRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling auditionsV1AuditionsUpdate().');
                        }
                        if (requestParameters['pk'] == null) {
                            throw new runtime.RequiredError('pk', 'Required parameter "pk" was null or undefined when calling auditionsV1AuditionsUpdate().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling auditionsV1AuditionsUpdate().');
                        }
                        if (requestParameters['audition'] == null) {
                            throw new runtime.RequiredError('audition', 'Required parameter "audition" was null or undefined when calling auditionsV1AuditionsUpdate().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/t/{tenant_ref}/auditions/v1/auditions/{id}/";
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("pk", "}"), encodeURIComponent(String(requestParameters['pk'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.AuditionToJSON)(requestParameters['audition']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.AuditionFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Update an existing audition.
     * Update an Audition
     */
    AuditionsApi.prototype.auditionsV1AuditionsUpdate = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.auditionsV1AuditionsUpdateRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return AuditionsApi;
}(runtime.BaseAPI));
exports.AuditionsApi = AuditionsApi;
