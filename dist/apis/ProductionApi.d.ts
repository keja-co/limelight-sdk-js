/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.73
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { PaginatedPerformanceList, PaginatedProductionCategoryAssignmentList, PaginatedProductionCategoryList, PaginatedProductionList, PaginatedProductionMemberList, PaginatedProductionRoleAssignmentList, PaginatedProductionVenueList, PaginatedRehearsalList, PaginatedRehearsalParticipantList, PatchedPerformance, PatchedProduction, PatchedProductionCategory, PatchedProductionCategoryAssignment, PatchedProductionMember, PatchedProductionRoleAssignment, PatchedProductionVenue, PatchedRehearsal, PatchedRehearsalParticipant, Performance, Production, ProductionCategory, ProductionCategoryAssignment, ProductionMember, ProductionRoleAssignment, ProductionVenue, Rehearsal, RehearsalParticipant } from '../models/index';
export interface ProductionV1CategoriesAssignmentsCreateRequest {
    categoryId: number;
    productionCategoryAssignment: Omit<ProductionCategoryAssignment, 'id' | 'created_at' | 'updated_at' | 'created_by'>;
}
export interface ProductionV1CategoriesAssignmentsDestroyRequest {
    categoryId: number;
    id: number;
}
export interface ProductionV1CategoriesAssignmentsListRequest {
    categoryId: number;
    page?: number;
    pageSize?: number;
}
export interface ProductionV1CategoriesAssignmentsPartialUpdateRequest {
    categoryId: number;
    id: number;
    patchedProductionCategoryAssignment?: Omit<PatchedProductionCategoryAssignment, 'id' | 'created_at' | 'updated_at' | 'created_by'>;
}
export interface ProductionV1CategoriesAssignmentsRetrieveRequest {
    categoryId: number;
    id: number;
}
export interface ProductionV1CategoriesAssignmentsUpdateRequest {
    categoryId: number;
    id: number;
    productionCategoryAssignment: Omit<ProductionCategoryAssignment, 'id' | 'created_at' | 'updated_at' | 'created_by'>;
}
export interface ProductionV1CategoriesCreateRequest {
    productionCategory: Omit<ProductionCategory, 'id' | 'created_at' | 'updated_at' | 'created_by'>;
}
export interface ProductionV1CategoriesDestroyRequest {
    id: number;
}
export interface ProductionV1CategoriesListRequest {
    page?: number;
    pageSize?: number;
}
export interface ProductionV1CategoriesPartialUpdateRequest {
    id: number;
    patchedProductionCategory?: Omit<PatchedProductionCategory, 'id' | 'created_at' | 'updated_at' | 'created_by'>;
}
export interface ProductionV1CategoriesRetrieveRequest {
    id: number;
}
export interface ProductionV1CategoriesUpdateRequest {
    id: number;
    productionCategory: Omit<ProductionCategory, 'id' | 'created_at' | 'updated_at' | 'created_by'>;
}
export interface ProductionV1ProductionsCreateRequest {
    production: Omit<Production, 'id' | 'created_at' | 'updated_at' | 'created_by'>;
}
export interface ProductionV1ProductionsDestroyRequest {
    id: number;
}
export interface ProductionV1ProductionsListRequest {
    page?: number;
    pageSize?: number;
}
export interface ProductionV1ProductionsMembersCreateRequest {
    productionId: number;
    productionMember: Omit<ProductionMember, 'id' | 'created_at' | 'updated_at' | 'created_by'>;
}
export interface ProductionV1ProductionsMembersDestroyRequest {
    id: number;
    productionId: number;
}
export interface ProductionV1ProductionsMembersListRequest {
    productionId: number;
    page?: number;
    pageSize?: number;
}
export interface ProductionV1ProductionsMembersPartialUpdateRequest {
    id: number;
    productionId: number;
    patchedProductionMember?: Omit<PatchedProductionMember, 'id' | 'created_at' | 'updated_at' | 'created_by'>;
}
export interface ProductionV1ProductionsMembersRetrieveRequest {
    id: number;
    productionId: number;
}
export interface ProductionV1ProductionsMembersRolesCreateRequest {
    memberId: number;
    productionId: number;
    productionRoleAssignment: Omit<ProductionRoleAssignment, 'id' | 'created_at' | 'updated_at' | 'created_by'>;
}
export interface ProductionV1ProductionsMembersRolesDestroyRequest {
    id: number;
    memberId: number;
    productionId: number;
}
export interface ProductionV1ProductionsMembersRolesListRequest {
    memberId: number;
    productionId: number;
    page?: number;
    pageSize?: number;
}
export interface ProductionV1ProductionsMembersRolesPartialUpdateRequest {
    id: number;
    memberId: number;
    productionId: number;
    patchedProductionRoleAssignment?: Omit<PatchedProductionRoleAssignment, 'id' | 'created_at' | 'updated_at' | 'created_by'>;
}
export interface ProductionV1ProductionsMembersRolesRetrieveRequest {
    id: number;
    memberId: number;
    productionId: number;
}
export interface ProductionV1ProductionsMembersRolesUpdateRequest {
    id: number;
    memberId: number;
    productionId: number;
    productionRoleAssignment: Omit<ProductionRoleAssignment, 'id' | 'created_at' | 'updated_at' | 'created_by'>;
}
export interface ProductionV1ProductionsMembersUpdateRequest {
    id: number;
    productionId: number;
    productionMember: Omit<ProductionMember, 'id' | 'created_at' | 'updated_at' | 'created_by'>;
}
export interface ProductionV1ProductionsPartialUpdateRequest {
    id: number;
    patchedProduction?: Omit<PatchedProduction, 'id' | 'created_at' | 'updated_at' | 'created_by'>;
}
export interface ProductionV1ProductionsPerformancesCreateRequest {
    productionId: number;
    performance: Omit<Performance, 'id' | 'created_at' | 'updated_at' | 'created_by'>;
}
export interface ProductionV1ProductionsPerformancesDestroyRequest {
    id: number;
    productionId: number;
}
export interface ProductionV1ProductionsPerformancesListRequest {
    productionId: number;
    page?: number;
    pageSize?: number;
}
export interface ProductionV1ProductionsPerformancesPartialUpdateRequest {
    id: number;
    productionId: number;
    patchedPerformance?: Omit<PatchedPerformance, 'id' | 'created_at' | 'updated_at' | 'created_by'>;
}
export interface ProductionV1ProductionsPerformancesRetrieveRequest {
    id: number;
    productionId: number;
}
export interface ProductionV1ProductionsPerformancesUpdateRequest {
    id: number;
    productionId: number;
    performance: Omit<Performance, 'id' | 'created_at' | 'updated_at' | 'created_by'>;
}
export interface ProductionV1ProductionsRehearsalsCreateRequest {
    productionId: number;
    rehearsal: Omit<Rehearsal, 'id' | 'created_at' | 'updated_at' | 'created_by'>;
}
export interface ProductionV1ProductionsRehearsalsDestroyRequest {
    id: number;
    productionId: number;
}
export interface ProductionV1ProductionsRehearsalsListRequest {
    productionId: number;
    page?: number;
    pageSize?: number;
}
export interface ProductionV1ProductionsRehearsalsPartialUpdateRequest {
    id: number;
    productionId: number;
    patchedRehearsal?: Omit<PatchedRehearsal, 'id' | 'created_at' | 'updated_at' | 'created_by'>;
}
export interface ProductionV1ProductionsRehearsalsParticipantsCreateRequest {
    productionId: number;
    rehearsalId: number;
    rehearsalParticipant: Omit<RehearsalParticipant, 'id' | 'created_at' | 'updated_at' | 'created_by'>;
}
export interface ProductionV1ProductionsRehearsalsParticipantsDestroyRequest {
    id: number;
    productionId: number;
    rehearsalId: number;
}
export interface ProductionV1ProductionsRehearsalsParticipantsListRequest {
    productionId: number;
    rehearsalId: number;
    page?: number;
    pageSize?: number;
}
export interface ProductionV1ProductionsRehearsalsParticipantsPartialUpdateRequest {
    id: number;
    productionId: number;
    rehearsalId: number;
    patchedRehearsalParticipant?: Omit<PatchedRehearsalParticipant, 'id' | 'created_at' | 'updated_at' | 'created_by'>;
}
export interface ProductionV1ProductionsRehearsalsParticipantsRetrieveRequest {
    id: number;
    productionId: number;
    rehearsalId: number;
}
export interface ProductionV1ProductionsRehearsalsParticipantsUpdateRequest {
    id: number;
    productionId: number;
    rehearsalId: number;
    rehearsalParticipant: Omit<RehearsalParticipant, 'id' | 'created_at' | 'updated_at' | 'created_by'>;
}
export interface ProductionV1ProductionsRehearsalsRetrieveRequest {
    id: number;
    productionId: number;
}
export interface ProductionV1ProductionsRehearsalsUpdateRequest {
    id: number;
    productionId: number;
    rehearsal: Omit<Rehearsal, 'id' | 'created_at' | 'updated_at' | 'created_by'>;
}
export interface ProductionV1ProductionsRetrieveRequest {
    id: number;
}
export interface ProductionV1ProductionsUpdateRequest {
    id: number;
    production: Omit<Production, 'id' | 'created_at' | 'updated_at' | 'created_by'>;
}
export interface ProductionV1VenuesCreateRequest {
    productionVenue: Omit<ProductionVenue, 'id' | 'created_at' | 'updated_at' | 'created_by'>;
}
export interface ProductionV1VenuesDestroyRequest {
    id: number;
}
export interface ProductionV1VenuesListRequest {
    page?: number;
    pageSize?: number;
}
export interface ProductionV1VenuesPartialUpdateRequest {
    id: number;
    patchedProductionVenue?: Omit<PatchedProductionVenue, 'id' | 'created_at' | 'updated_at' | 'created_by'>;
}
export interface ProductionV1VenuesRetrieveRequest {
    id: number;
}
export interface ProductionV1VenuesUpdateRequest {
    id: number;
    productionVenue: Omit<ProductionVenue, 'id' | 'created_at' | 'updated_at' | 'created_by'>;
}
/**
 *
 */
export declare class ProductionApi extends runtime.BaseAPI {
    /**
     * Create a new production category assignment.
     * Create a Production Category Assignment
     */
    productionV1CategoriesAssignmentsCreateRaw(requestParameters: ProductionV1CategoriesAssignmentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCategoryAssignment>>;
    /**
     * Create a new production category assignment.
     * Create a Production Category Assignment
     */
    productionV1CategoriesAssignmentsCreate(requestParameters: ProductionV1CategoriesAssignmentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCategoryAssignment>;
    /**
     * Delete a specific production category assignment.
     * Delete a Production Category Assignment
     */
    productionV1CategoriesAssignmentsDestroyRaw(requestParameters: ProductionV1CategoriesAssignmentsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete a specific production category assignment.
     * Delete a Production Category Assignment
     */
    productionV1CategoriesAssignmentsDestroy(requestParameters: ProductionV1CategoriesAssignmentsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Retrieve all category assignments for a production.
     * List Production Category Assignments
     */
    productionV1CategoriesAssignmentsListRaw(requestParameters: ProductionV1CategoriesAssignmentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProductionCategoryAssignmentList>>;
    /**
     * Retrieve all category assignments for a production.
     * List Production Category Assignments
     */
    productionV1CategoriesAssignmentsList(requestParameters: ProductionV1CategoriesAssignmentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProductionCategoryAssignmentList>;
    /**
     * Partially update an existing production category assignment.
     * Partially Update a Production Category Assignment
     */
    productionV1CategoriesAssignmentsPartialUpdateRaw(requestParameters: ProductionV1CategoriesAssignmentsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCategoryAssignment>>;
    /**
     * Partially update an existing production category assignment.
     * Partially Update a Production Category Assignment
     */
    productionV1CategoriesAssignmentsPartialUpdate(requestParameters: ProductionV1CategoriesAssignmentsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCategoryAssignment>;
    /**
     * Retrieve a specific production category assignment.
     * Retrieve a Production Category Assignment
     */
    productionV1CategoriesAssignmentsRetrieveRaw(requestParameters: ProductionV1CategoriesAssignmentsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCategoryAssignment>>;
    /**
     * Retrieve a specific production category assignment.
     * Retrieve a Production Category Assignment
     */
    productionV1CategoriesAssignmentsRetrieve(requestParameters: ProductionV1CategoriesAssignmentsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCategoryAssignment>;
    /**
     * Update an existing production category assignment.
     * Update a Production Category Assignment
     */
    productionV1CategoriesAssignmentsUpdateRaw(requestParameters: ProductionV1CategoriesAssignmentsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCategoryAssignment>>;
    /**
     * Update an existing production category assignment.
     * Update a Production Category Assignment
     */
    productionV1CategoriesAssignmentsUpdate(requestParameters: ProductionV1CategoriesAssignmentsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCategoryAssignment>;
    /**
     * Create a new production category.
     * Create a Production Category
     */
    productionV1CategoriesCreateRaw(requestParameters: ProductionV1CategoriesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCategory>>;
    /**
     * Create a new production category.
     * Create a Production Category
     */
    productionV1CategoriesCreate(requestParameters: ProductionV1CategoriesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCategory>;
    /**
     * Delete a specific production category.
     * Delete a Production Category
     */
    productionV1CategoriesDestroyRaw(requestParameters: ProductionV1CategoriesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete a specific production category.
     * Delete a Production Category
     */
    productionV1CategoriesDestroy(requestParameters: ProductionV1CategoriesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Retrieve all production categories.
     * List Production Categories
     */
    productionV1CategoriesListRaw(requestParameters: ProductionV1CategoriesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProductionCategoryList>>;
    /**
     * Retrieve all production categories.
     * List Production Categories
     */
    productionV1CategoriesList(requestParameters?: ProductionV1CategoriesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProductionCategoryList>;
    /**
     * Partially update an existing production category.
     * Partially Update a Production Category
     */
    productionV1CategoriesPartialUpdateRaw(requestParameters: ProductionV1CategoriesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCategory>>;
    /**
     * Partially update an existing production category.
     * Partially Update a Production Category
     */
    productionV1CategoriesPartialUpdate(requestParameters: ProductionV1CategoriesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCategory>;
    /**
     * Retrieve a specific production category.
     * Retrieve a Production Category
     */
    productionV1CategoriesRetrieveRaw(requestParameters: ProductionV1CategoriesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCategory>>;
    /**
     * Retrieve a specific production category.
     * Retrieve a Production Category
     */
    productionV1CategoriesRetrieve(requestParameters: ProductionV1CategoriesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCategory>;
    /**
     * Update an existing production category.
     * Update a Production Category
     */
    productionV1CategoriesUpdateRaw(requestParameters: ProductionV1CategoriesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionCategory>>;
    /**
     * Update an existing production category.
     * Update a Production Category
     */
    productionV1CategoriesUpdate(requestParameters: ProductionV1CategoriesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionCategory>;
    /**
     * Create a new production.
     * Create a Production
     */
    productionV1ProductionsCreateRaw(requestParameters: ProductionV1ProductionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Production>>;
    /**
     * Create a new production.
     * Create a Production
     */
    productionV1ProductionsCreate(requestParameters: ProductionV1ProductionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Production>;
    /**
     * Delete a specific production.
     * Delete a Production
     */
    productionV1ProductionsDestroyRaw(requestParameters: ProductionV1ProductionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete a specific production.
     * Delete a Production
     */
    productionV1ProductionsDestroy(requestParameters: ProductionV1ProductionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Retrieve all productions.
     * List Productions
     */
    productionV1ProductionsListRaw(requestParameters: ProductionV1ProductionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProductionList>>;
    /**
     * Retrieve all productions.
     * List Productions
     */
    productionV1ProductionsList(requestParameters?: ProductionV1ProductionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProductionList>;
    /**
     * Create a new production member.
     * Create a Production Member
     */
    productionV1ProductionsMembersCreateRaw(requestParameters: ProductionV1ProductionsMembersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionMember>>;
    /**
     * Create a new production member.
     * Create a Production Member
     */
    productionV1ProductionsMembersCreate(requestParameters: ProductionV1ProductionsMembersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionMember>;
    /**
     * Delete a specific production member.
     * Delete a Production Member
     */
    productionV1ProductionsMembersDestroyRaw(requestParameters: ProductionV1ProductionsMembersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete a specific production member.
     * Delete a Production Member
     */
    productionV1ProductionsMembersDestroy(requestParameters: ProductionV1ProductionsMembersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Retrieve all members of a production.
     * List Production Members
     */
    productionV1ProductionsMembersListRaw(requestParameters: ProductionV1ProductionsMembersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProductionMemberList>>;
    /**
     * Retrieve all members of a production.
     * List Production Members
     */
    productionV1ProductionsMembersList(requestParameters: ProductionV1ProductionsMembersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProductionMemberList>;
    /**
     * Partially update an existing production member.
     * Partially Update a Production Member
     */
    productionV1ProductionsMembersPartialUpdateRaw(requestParameters: ProductionV1ProductionsMembersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionMember>>;
    /**
     * Partially update an existing production member.
     * Partially Update a Production Member
     */
    productionV1ProductionsMembersPartialUpdate(requestParameters: ProductionV1ProductionsMembersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionMember>;
    /**
     * Retrieve a specific production member.
     * Retrieve a Production Member
     */
    productionV1ProductionsMembersRetrieveRaw(requestParameters: ProductionV1ProductionsMembersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionMember>>;
    /**
     * Retrieve a specific production member.
     * Retrieve a Production Member
     */
    productionV1ProductionsMembersRetrieve(requestParameters: ProductionV1ProductionsMembersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionMember>;
    /**
     * Create a new production role assignment.
     * Create a Production Role Assignment
     */
    productionV1ProductionsMembersRolesCreateRaw(requestParameters: ProductionV1ProductionsMembersRolesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionRoleAssignment>>;
    /**
     * Create a new production role assignment.
     * Create a Production Role Assignment
     */
    productionV1ProductionsMembersRolesCreate(requestParameters: ProductionV1ProductionsMembersRolesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionRoleAssignment>;
    /**
     * Delete a specific production role assignment.
     * Delete a Production Role Assignment
     */
    productionV1ProductionsMembersRolesDestroyRaw(requestParameters: ProductionV1ProductionsMembersRolesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete a specific production role assignment.
     * Delete a Production Role Assignment
     */
    productionV1ProductionsMembersRolesDestroy(requestParameters: ProductionV1ProductionsMembersRolesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Retrieve all role assignments for a production member.
     * List Production Role Assignments
     */
    productionV1ProductionsMembersRolesListRaw(requestParameters: ProductionV1ProductionsMembersRolesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProductionRoleAssignmentList>>;
    /**
     * Retrieve all role assignments for a production member.
     * List Production Role Assignments
     */
    productionV1ProductionsMembersRolesList(requestParameters: ProductionV1ProductionsMembersRolesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProductionRoleAssignmentList>;
    /**
     * Partially update an existing production role assignment.
     * Partially Update a Production Role Assignment
     */
    productionV1ProductionsMembersRolesPartialUpdateRaw(requestParameters: ProductionV1ProductionsMembersRolesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionRoleAssignment>>;
    /**
     * Partially update an existing production role assignment.
     * Partially Update a Production Role Assignment
     */
    productionV1ProductionsMembersRolesPartialUpdate(requestParameters: ProductionV1ProductionsMembersRolesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionRoleAssignment>;
    /**
     * Retrieve a specific production role assignment.
     * Retrieve a Production Role Assignment
     */
    productionV1ProductionsMembersRolesRetrieveRaw(requestParameters: ProductionV1ProductionsMembersRolesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionRoleAssignment>>;
    /**
     * Retrieve a specific production role assignment.
     * Retrieve a Production Role Assignment
     */
    productionV1ProductionsMembersRolesRetrieve(requestParameters: ProductionV1ProductionsMembersRolesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionRoleAssignment>;
    /**
     * Update an existing production role assignment.
     * Update a Production Role Assignment
     */
    productionV1ProductionsMembersRolesUpdateRaw(requestParameters: ProductionV1ProductionsMembersRolesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionRoleAssignment>>;
    /**
     * Update an existing production role assignment.
     * Update a Production Role Assignment
     */
    productionV1ProductionsMembersRolesUpdate(requestParameters: ProductionV1ProductionsMembersRolesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionRoleAssignment>;
    /**
     * Update an existing production member.
     * Update a Production Member
     */
    productionV1ProductionsMembersUpdateRaw(requestParameters: ProductionV1ProductionsMembersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionMember>>;
    /**
     * Update an existing production member.
     * Update a Production Member
     */
    productionV1ProductionsMembersUpdate(requestParameters: ProductionV1ProductionsMembersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionMember>;
    /**
     * Partially update an existing production.
     * Partially Update a Production
     */
    productionV1ProductionsPartialUpdateRaw(requestParameters: ProductionV1ProductionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Production>>;
    /**
     * Partially update an existing production.
     * Partially Update a Production
     */
    productionV1ProductionsPartialUpdate(requestParameters: ProductionV1ProductionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Production>;
    /**
     * Create a new performance.
     * Create a Performance
     */
    productionV1ProductionsPerformancesCreateRaw(requestParameters: ProductionV1ProductionsPerformancesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Performance>>;
    /**
     * Create a new performance.
     * Create a Performance
     */
    productionV1ProductionsPerformancesCreate(requestParameters: ProductionV1ProductionsPerformancesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Performance>;
    /**
     * Delete a specific performance.
     * Delete a Performance
     */
    productionV1ProductionsPerformancesDestroyRaw(requestParameters: ProductionV1ProductionsPerformancesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete a specific performance.
     * Delete a Performance
     */
    productionV1ProductionsPerformancesDestroy(requestParameters: ProductionV1ProductionsPerformancesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Retrieve all performances for a production.
     * List Performances
     */
    productionV1ProductionsPerformancesListRaw(requestParameters: ProductionV1ProductionsPerformancesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPerformanceList>>;
    /**
     * Retrieve all performances for a production.
     * List Performances
     */
    productionV1ProductionsPerformancesList(requestParameters: ProductionV1ProductionsPerformancesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPerformanceList>;
    /**
     * Partially update an existing performance.
     * Partially Update a Performance
     */
    productionV1ProductionsPerformancesPartialUpdateRaw(requestParameters: ProductionV1ProductionsPerformancesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Performance>>;
    /**
     * Partially update an existing performance.
     * Partially Update a Performance
     */
    productionV1ProductionsPerformancesPartialUpdate(requestParameters: ProductionV1ProductionsPerformancesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Performance>;
    /**
     * Retrieve a specific performance.
     * Retrieve a Performance
     */
    productionV1ProductionsPerformancesRetrieveRaw(requestParameters: ProductionV1ProductionsPerformancesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Performance>>;
    /**
     * Retrieve a specific performance.
     * Retrieve a Performance
     */
    productionV1ProductionsPerformancesRetrieve(requestParameters: ProductionV1ProductionsPerformancesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Performance>;
    /**
     * Update an existing performance.
     * Update a Performance
     */
    productionV1ProductionsPerformancesUpdateRaw(requestParameters: ProductionV1ProductionsPerformancesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Performance>>;
    /**
     * Update an existing performance.
     * Update a Performance
     */
    productionV1ProductionsPerformancesUpdate(requestParameters: ProductionV1ProductionsPerformancesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Performance>;
    /**
     * Create a new rehearsal.
     * Create a Rehearsal
     */
    productionV1ProductionsRehearsalsCreateRaw(requestParameters: ProductionV1ProductionsRehearsalsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rehearsal>>;
    /**
     * Create a new rehearsal.
     * Create a Rehearsal
     */
    productionV1ProductionsRehearsalsCreate(requestParameters: ProductionV1ProductionsRehearsalsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rehearsal>;
    /**
     * Delete a specific rehearsal.
     * Delete a Rehearsal
     */
    productionV1ProductionsRehearsalsDestroyRaw(requestParameters: ProductionV1ProductionsRehearsalsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete a specific rehearsal.
     * Delete a Rehearsal
     */
    productionV1ProductionsRehearsalsDestroy(requestParameters: ProductionV1ProductionsRehearsalsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Retrieve all rehearsals for a production.
     * List Rehearsals
     */
    productionV1ProductionsRehearsalsListRaw(requestParameters: ProductionV1ProductionsRehearsalsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedRehearsalList>>;
    /**
     * Retrieve all rehearsals for a production.
     * List Rehearsals
     */
    productionV1ProductionsRehearsalsList(requestParameters: ProductionV1ProductionsRehearsalsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedRehearsalList>;
    /**
     * Partially update an existing rehearsal.
     * Partially Update a Rehearsal
     */
    productionV1ProductionsRehearsalsPartialUpdateRaw(requestParameters: ProductionV1ProductionsRehearsalsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rehearsal>>;
    /**
     * Partially update an existing rehearsal.
     * Partially Update a Rehearsal
     */
    productionV1ProductionsRehearsalsPartialUpdate(requestParameters: ProductionV1ProductionsRehearsalsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rehearsal>;
    /**
     * Create a new rehearsal participant.
     * Create a Rehearsal Participant
     */
    productionV1ProductionsRehearsalsParticipantsCreateRaw(requestParameters: ProductionV1ProductionsRehearsalsParticipantsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RehearsalParticipant>>;
    /**
     * Create a new rehearsal participant.
     * Create a Rehearsal Participant
     */
    productionV1ProductionsRehearsalsParticipantsCreate(requestParameters: ProductionV1ProductionsRehearsalsParticipantsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RehearsalParticipant>;
    /**
     * Delete a specific rehearsal participant.
     * Delete a Rehearsal Participant
     */
    productionV1ProductionsRehearsalsParticipantsDestroyRaw(requestParameters: ProductionV1ProductionsRehearsalsParticipantsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete a specific rehearsal participant.
     * Delete a Rehearsal Participant
     */
    productionV1ProductionsRehearsalsParticipantsDestroy(requestParameters: ProductionV1ProductionsRehearsalsParticipantsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Retrieve all participants for a rehearsal.
     * List Rehearsal Participants
     */
    productionV1ProductionsRehearsalsParticipantsListRaw(requestParameters: ProductionV1ProductionsRehearsalsParticipantsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedRehearsalParticipantList>>;
    /**
     * Retrieve all participants for a rehearsal.
     * List Rehearsal Participants
     */
    productionV1ProductionsRehearsalsParticipantsList(requestParameters: ProductionV1ProductionsRehearsalsParticipantsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedRehearsalParticipantList>;
    /**
     * Partially update an existing rehearsal participant.
     * Partially Update a Rehearsal Participant
     */
    productionV1ProductionsRehearsalsParticipantsPartialUpdateRaw(requestParameters: ProductionV1ProductionsRehearsalsParticipantsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RehearsalParticipant>>;
    /**
     * Partially update an existing rehearsal participant.
     * Partially Update a Rehearsal Participant
     */
    productionV1ProductionsRehearsalsParticipantsPartialUpdate(requestParameters: ProductionV1ProductionsRehearsalsParticipantsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RehearsalParticipant>;
    /**
     * Retrieve a specific rehearsal participant.
     * Retrieve a Rehearsal Participant
     */
    productionV1ProductionsRehearsalsParticipantsRetrieveRaw(requestParameters: ProductionV1ProductionsRehearsalsParticipantsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RehearsalParticipant>>;
    /**
     * Retrieve a specific rehearsal participant.
     * Retrieve a Rehearsal Participant
     */
    productionV1ProductionsRehearsalsParticipantsRetrieve(requestParameters: ProductionV1ProductionsRehearsalsParticipantsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RehearsalParticipant>;
    /**
     * Update an existing rehearsal participant.
     * Update a Rehearsal Participant
     */
    productionV1ProductionsRehearsalsParticipantsUpdateRaw(requestParameters: ProductionV1ProductionsRehearsalsParticipantsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RehearsalParticipant>>;
    /**
     * Update an existing rehearsal participant.
     * Update a Rehearsal Participant
     */
    productionV1ProductionsRehearsalsParticipantsUpdate(requestParameters: ProductionV1ProductionsRehearsalsParticipantsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RehearsalParticipant>;
    /**
     * Retrieve a specific rehearsal.
     * Retrieve a Rehearsal
     */
    productionV1ProductionsRehearsalsRetrieveRaw(requestParameters: ProductionV1ProductionsRehearsalsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rehearsal>>;
    /**
     * Retrieve a specific rehearsal.
     * Retrieve a Rehearsal
     */
    productionV1ProductionsRehearsalsRetrieve(requestParameters: ProductionV1ProductionsRehearsalsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rehearsal>;
    /**
     * Update an existing rehearsal.
     * Update a Rehearsal
     */
    productionV1ProductionsRehearsalsUpdateRaw(requestParameters: ProductionV1ProductionsRehearsalsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rehearsal>>;
    /**
     * Update an existing rehearsal.
     * Update a Rehearsal
     */
    productionV1ProductionsRehearsalsUpdate(requestParameters: ProductionV1ProductionsRehearsalsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rehearsal>;
    /**
     * Retrieve a specific production.
     * Retrieve a Production
     */
    productionV1ProductionsRetrieveRaw(requestParameters: ProductionV1ProductionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Production>>;
    /**
     * Retrieve a specific production.
     * Retrieve a Production
     */
    productionV1ProductionsRetrieve(requestParameters: ProductionV1ProductionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Production>;
    /**
     * Update an existing production.
     * Update a Production
     */
    productionV1ProductionsUpdateRaw(requestParameters: ProductionV1ProductionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Production>>;
    /**
     * Update an existing production.
     * Update a Production
     */
    productionV1ProductionsUpdate(requestParameters: ProductionV1ProductionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Production>;
    /**
     * Create a new production venue.
     * Create a Production Venue
     */
    productionV1VenuesCreateRaw(requestParameters: ProductionV1VenuesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionVenue>>;
    /**
     * Create a new production venue.
     * Create a Production Venue
     */
    productionV1VenuesCreate(requestParameters: ProductionV1VenuesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionVenue>;
    /**
     * Delete a specific production venue.
     * Delete a Production Venue
     */
    productionV1VenuesDestroyRaw(requestParameters: ProductionV1VenuesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete a specific production venue.
     * Delete a Production Venue
     */
    productionV1VenuesDestroy(requestParameters: ProductionV1VenuesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Retrieve all production venues.
     * List Production Venues
     */
    productionV1VenuesListRaw(requestParameters: ProductionV1VenuesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProductionVenueList>>;
    /**
     * Retrieve all production venues.
     * List Production Venues
     */
    productionV1VenuesList(requestParameters?: ProductionV1VenuesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProductionVenueList>;
    /**
     * Partially update an existing production venue.
     * Partially Update a Production Venue
     */
    productionV1VenuesPartialUpdateRaw(requestParameters: ProductionV1VenuesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionVenue>>;
    /**
     * Partially update an existing production venue.
     * Partially Update a Production Venue
     */
    productionV1VenuesPartialUpdate(requestParameters: ProductionV1VenuesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionVenue>;
    /**
     * Retrieve a specific production venue.
     * Retrieve a Production Venue
     */
    productionV1VenuesRetrieveRaw(requestParameters: ProductionV1VenuesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionVenue>>;
    /**
     * Retrieve a specific production venue.
     * Retrieve a Production Venue
     */
    productionV1VenuesRetrieve(requestParameters: ProductionV1VenuesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionVenue>;
    /**
     * Update an existing production venue.
     * Update a Production Venue
     */
    productionV1VenuesUpdateRaw(requestParameters: ProductionV1VenuesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductionVenue>>;
    /**
     * Update an existing production venue.
     * Update a Production Venue
     */
    productionV1VenuesUpdate(requestParameters: ProductionV1VenuesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductionVenue>;
}
