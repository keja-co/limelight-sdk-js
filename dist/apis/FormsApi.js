"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Limelight API
 * Limelight manages your theatre production process from auditions to bump out.
 *
 * The version of the OpenAPI document: 1.0.75
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormsApi = void 0;
var runtime = require("../runtime");
var index_1 = require("../models/index");
/**
 *
 */
var FormsApi = /** @class */ (function (_super) {
    __extends(FormsApi, _super);
    function FormsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Add a new form to the system.
     * Create a new form
     */
    FormsApi.prototype.formsV1FormsCreateRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling formsV1FormsCreate().');
                        }
                        if (requestParameters['form'] == null) {
                            throw new runtime.RequiredError('form', 'Required parameter "form" was null or undefined when calling formsV1FormsCreate().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/t/{tenant_ref}/forms/v1/forms/";
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.FormToJSON)(requestParameters['form']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.FormFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Add a new form to the system.
     * Create a new form
     */
    FormsApi.prototype.formsV1FormsCreate = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.formsV1FormsCreateRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Remove a form from the system by its ID.
     * Delete a form
     */
    FormsApi.prototype.formsV1FormsDestroyRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling formsV1FormsDestroy().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling formsV1FormsDestroy().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/t/{tenant_ref}/forms/v1/forms/{id}/";
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Remove a form from the system by its ID.
     * Delete a form
     */
    FormsApi.prototype.formsV1FormsDestroy = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.formsV1FormsDestroyRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Add a new field to a specific form.
     * Create a new form field
     */
    FormsApi.prototype.formsV1FormsFieldsCreateRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['formId'] == null) {
                            throw new runtime.RequiredError('formId', 'Required parameter "formId" was null or undefined when calling formsV1FormsFieldsCreate().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling formsV1FormsFieldsCreate().');
                        }
                        if (requestParameters['formField'] == null) {
                            throw new runtime.RequiredError('formField', 'Required parameter "formField" was null or undefined when calling formsV1FormsFieldsCreate().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/t/{tenant_ref}/forms/v1/forms/{form_id}/fields/";
                        urlPath = urlPath.replace("{".concat("form_id", "}"), encodeURIComponent(String(requestParameters['formId'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.FormFieldToJSON)(requestParameters['formField']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.FormFieldFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Add a new field to a specific form.
     * Create a new form field
     */
    FormsApi.prototype.formsV1FormsFieldsCreate = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.formsV1FormsFieldsCreateRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Remove a form field from the system by its ID.
     * Delete a form field
     */
    FormsApi.prototype.formsV1FormsFieldsDestroyRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['formId'] == null) {
                            throw new runtime.RequiredError('formId', 'Required parameter "formId" was null or undefined when calling formsV1FormsFieldsDestroy().');
                        }
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling formsV1FormsFieldsDestroy().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling formsV1FormsFieldsDestroy().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/t/{tenant_ref}/forms/v1/forms/{form_id}/fields/{id}/";
                        urlPath = urlPath.replace("{".concat("form_id", "}"), encodeURIComponent(String(requestParameters['formId'])));
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Remove a form field from the system by its ID.
     * Delete a form field
     */
    FormsApi.prototype.formsV1FormsFieldsDestroy = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.formsV1FormsFieldsDestroyRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Retrieve a list of all fields associated with a specific form.
     * List all form fields
     */
    FormsApi.prototype.formsV1FormsFieldsListRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['formId'] == null) {
                            throw new runtime.RequiredError('formId', 'Required parameter "formId" was null or undefined when calling formsV1FormsFieldsList().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling formsV1FormsFieldsList().');
                        }
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['pageSize'] != null) {
                            queryParameters['page_size'] = requestParameters['pageSize'];
                        }
                        headerParameters = {};
                        urlPath = "/api/t/{tenant_ref}/forms/v1/forms/{form_id}/fields/";
                        urlPath = urlPath.replace("{".concat("form_id", "}"), encodeURIComponent(String(requestParameters['formId'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PaginatedFormFieldListFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Retrieve a list of all fields associated with a specific form.
     * List all form fields
     */
    FormsApi.prototype.formsV1FormsFieldsList = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.formsV1FormsFieldsListRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update specific fields of an existing form field without affecting others.
     * Partially update a form field
     */
    FormsApi.prototype.formsV1FormsFieldsPartialUpdateRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['formId'] == null) {
                            throw new runtime.RequiredError('formId', 'Required parameter "formId" was null or undefined when calling formsV1FormsFieldsPartialUpdate().');
                        }
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling formsV1FormsFieldsPartialUpdate().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling formsV1FormsFieldsPartialUpdate().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/t/{tenant_ref}/forms/v1/forms/{form_id}/fields/{id}/";
                        urlPath = urlPath.replace("{".concat("form_id", "}"), encodeURIComponent(String(requestParameters['formId'])));
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'PATCH',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.PatchedFormFieldToJSON)(requestParameters['patchedFormField']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.FormFieldFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Update specific fields of an existing form field without affecting others.
     * Partially update a form field
     */
    FormsApi.prototype.formsV1FormsFieldsPartialUpdate = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.formsV1FormsFieldsPartialUpdateRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get detailed information about a specific form field by its ID.
     * Retrieve a specific form field
     */
    FormsApi.prototype.formsV1FormsFieldsRetrieveRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['formId'] == null) {
                            throw new runtime.RequiredError('formId', 'Required parameter "formId" was null or undefined when calling formsV1FormsFieldsRetrieve().');
                        }
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling formsV1FormsFieldsRetrieve().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling formsV1FormsFieldsRetrieve().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/t/{tenant_ref}/forms/v1/forms/{form_id}/fields/{id}/";
                        urlPath = urlPath.replace("{".concat("form_id", "}"), encodeURIComponent(String(requestParameters['formId'])));
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.FormFieldFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get detailed information about a specific form field by its ID.
     * Retrieve a specific form field
     */
    FormsApi.prototype.formsV1FormsFieldsRetrieve = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.formsV1FormsFieldsRetrieveRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Modify the details of an existing form field by its ID.
     * Update an existing form field
     */
    FormsApi.prototype.formsV1FormsFieldsUpdateRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['formId'] == null) {
                            throw new runtime.RequiredError('formId', 'Required parameter "formId" was null or undefined when calling formsV1FormsFieldsUpdate().');
                        }
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling formsV1FormsFieldsUpdate().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling formsV1FormsFieldsUpdate().');
                        }
                        if (requestParameters['formField'] == null) {
                            throw new runtime.RequiredError('formField', 'Required parameter "formField" was null or undefined when calling formsV1FormsFieldsUpdate().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/t/{tenant_ref}/forms/v1/forms/{form_id}/fields/{id}/";
                        urlPath = urlPath.replace("{".concat("form_id", "}"), encodeURIComponent(String(requestParameters['formId'])));
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.FormFieldToJSON)(requestParameters['formField']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.FormFieldFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Modify the details of an existing form field by its ID.
     * Update an existing form field
     */
    FormsApi.prototype.formsV1FormsFieldsUpdate = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.formsV1FormsFieldsUpdateRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Retrieve a list of all forms in the system.
     * List all forms
     */
    FormsApi.prototype.formsV1FormsListRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling formsV1FormsList().');
                        }
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['pageSize'] != null) {
                            queryParameters['page_size'] = requestParameters['pageSize'];
                        }
                        headerParameters = {};
                        urlPath = "/api/t/{tenant_ref}/forms/v1/forms/";
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PaginatedFormListFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Retrieve a list of all forms in the system.
     * List all forms
     */
    FormsApi.prototype.formsV1FormsList = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.formsV1FormsListRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update specific fields of an existing form without affecting others.
     * Partially update a form
     */
    FormsApi.prototype.formsV1FormsPartialUpdateRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling formsV1FormsPartialUpdate().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling formsV1FormsPartialUpdate().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/t/{tenant_ref}/forms/v1/forms/{id}/";
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'PATCH',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.PatchedFormToJSON)(requestParameters['patchedForm']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.FormFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Update specific fields of an existing form without affecting others.
     * Partially update a form
     */
    FormsApi.prototype.formsV1FormsPartialUpdate = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.formsV1FormsPartialUpdateRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get detailed information about a specific form by its ID.
     * Retrieve a specific form
     */
    FormsApi.prototype.formsV1FormsRetrieveRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling formsV1FormsRetrieve().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling formsV1FormsRetrieve().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/t/{tenant_ref}/forms/v1/forms/{id}/";
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.FormFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get detailed information about a specific form by its ID.
     * Retrieve a specific form
     */
    FormsApi.prototype.formsV1FormsRetrieve = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.formsV1FormsRetrieveRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Add a new submission to a specific form.
     * Create a new submission for a form
     */
    FormsApi.prototype.formsV1FormsSubmissionsCreateRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['formId'] == null) {
                            throw new runtime.RequiredError('formId', 'Required parameter "formId" was null or undefined when calling formsV1FormsSubmissionsCreate().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling formsV1FormsSubmissionsCreate().');
                        }
                        if (requestParameters['submission'] == null) {
                            throw new runtime.RequiredError('submission', 'Required parameter "submission" was null or undefined when calling formsV1FormsSubmissionsCreate().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/t/{tenant_ref}/forms/v1/forms/{form_id}/submissions/";
                        urlPath = urlPath.replace("{".concat("form_id", "}"), encodeURIComponent(String(requestParameters['formId'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.SubmissionToJSON)(requestParameters['submission']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.SubmissionFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Add a new submission to a specific form.
     * Create a new submission for a form
     */
    FormsApi.prototype.formsV1FormsSubmissionsCreate = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.formsV1FormsSubmissionsCreateRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Remove a submission from the system by its ID.
     * Delete a submission
     */
    FormsApi.prototype.formsV1FormsSubmissionsDestroyRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['formId'] == null) {
                            throw new runtime.RequiredError('formId', 'Required parameter "formId" was null or undefined when calling formsV1FormsSubmissionsDestroy().');
                        }
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling formsV1FormsSubmissionsDestroy().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling formsV1FormsSubmissionsDestroy().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/t/{tenant_ref}/forms/v1/forms/{form_id}/submissions/{id}/";
                        urlPath = urlPath.replace("{".concat("form_id", "}"), encodeURIComponent(String(requestParameters['formId'])));
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Remove a submission from the system by its ID.
     * Delete a submission
     */
    FormsApi.prototype.formsV1FormsSubmissionsDestroy = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.formsV1FormsSubmissionsDestroyRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Add a new field value to a specific submission.
     * Create a new field value for a submission
     */
    FormsApi.prototype.formsV1FormsSubmissionsFieldResponseCreateRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['fieldId'] == null) {
                            throw new runtime.RequiredError('fieldId', 'Required parameter "fieldId" was null or undefined when calling formsV1FormsSubmissionsFieldResponseCreate().');
                        }
                        if (requestParameters['formId'] == null) {
                            throw new runtime.RequiredError('formId', 'Required parameter "formId" was null or undefined when calling formsV1FormsSubmissionsFieldResponseCreate().');
                        }
                        if (requestParameters['submissionId'] == null) {
                            throw new runtime.RequiredError('submissionId', 'Required parameter "submissionId" was null or undefined when calling formsV1FormsSubmissionsFieldResponseCreate().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling formsV1FormsSubmissionsFieldResponseCreate().');
                        }
                        if (requestParameters['submissionFieldValue'] == null) {
                            throw new runtime.RequiredError('submissionFieldValue', 'Required parameter "submissionFieldValue" was null or undefined when calling formsV1FormsSubmissionsFieldResponseCreate().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/t/{tenant_ref}/forms/v1/forms/{form_id}/submissions/{submission_id}/field/{field_id}/response/";
                        urlPath = urlPath.replace("{".concat("field_id", "}"), encodeURIComponent(String(requestParameters['fieldId'])));
                        urlPath = urlPath.replace("{".concat("form_id", "}"), encodeURIComponent(String(requestParameters['formId'])));
                        urlPath = urlPath.replace("{".concat("submission_id", "}"), encodeURIComponent(String(requestParameters['submissionId'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.SubmissionFieldValueToJSON)(requestParameters['submissionFieldValue']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.SubmissionFieldValueFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Add a new field value to a specific submission.
     * Create a new field value for a submission
     */
    FormsApi.prototype.formsV1FormsSubmissionsFieldResponseCreate = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.formsV1FormsSubmissionsFieldResponseCreateRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Remove a field value from the system by its ID.
     * Delete a field value
     */
    FormsApi.prototype.formsV1FormsSubmissionsFieldResponseDestroyRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['fieldId'] == null) {
                            throw new runtime.RequiredError('fieldId', 'Required parameter "fieldId" was null or undefined when calling formsV1FormsSubmissionsFieldResponseDestroy().');
                        }
                        if (requestParameters['formId'] == null) {
                            throw new runtime.RequiredError('formId', 'Required parameter "formId" was null or undefined when calling formsV1FormsSubmissionsFieldResponseDestroy().');
                        }
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling formsV1FormsSubmissionsFieldResponseDestroy().');
                        }
                        if (requestParameters['submissionId'] == null) {
                            throw new runtime.RequiredError('submissionId', 'Required parameter "submissionId" was null or undefined when calling formsV1FormsSubmissionsFieldResponseDestroy().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling formsV1FormsSubmissionsFieldResponseDestroy().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/t/{tenant_ref}/forms/v1/forms/{form_id}/submissions/{submission_id}/field/{field_id}/response/{id}/";
                        urlPath = urlPath.replace("{".concat("field_id", "}"), encodeURIComponent(String(requestParameters['fieldId'])));
                        urlPath = urlPath.replace("{".concat("form_id", "}"), encodeURIComponent(String(requestParameters['formId'])));
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("submission_id", "}"), encodeURIComponent(String(requestParameters['submissionId'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Remove a field value from the system by its ID.
     * Delete a field value
     */
    FormsApi.prototype.formsV1FormsSubmissionsFieldResponseDestroy = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.formsV1FormsSubmissionsFieldResponseDestroyRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Retrieve a list of all field values associated with a specific submission.
     * List all field values for a submission
     */
    FormsApi.prototype.formsV1FormsSubmissionsFieldResponseListRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['fieldId'] == null) {
                            throw new runtime.RequiredError('fieldId', 'Required parameter "fieldId" was null or undefined when calling formsV1FormsSubmissionsFieldResponseList().');
                        }
                        if (requestParameters['formId'] == null) {
                            throw new runtime.RequiredError('formId', 'Required parameter "formId" was null or undefined when calling formsV1FormsSubmissionsFieldResponseList().');
                        }
                        if (requestParameters['submissionId'] == null) {
                            throw new runtime.RequiredError('submissionId', 'Required parameter "submissionId" was null or undefined when calling formsV1FormsSubmissionsFieldResponseList().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling formsV1FormsSubmissionsFieldResponseList().');
                        }
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['pageSize'] != null) {
                            queryParameters['page_size'] = requestParameters['pageSize'];
                        }
                        headerParameters = {};
                        urlPath = "/api/t/{tenant_ref}/forms/v1/forms/{form_id}/submissions/{submission_id}/field/{field_id}/response/";
                        urlPath = urlPath.replace("{".concat("field_id", "}"), encodeURIComponent(String(requestParameters['fieldId'])));
                        urlPath = urlPath.replace("{".concat("form_id", "}"), encodeURIComponent(String(requestParameters['formId'])));
                        urlPath = urlPath.replace("{".concat("submission_id", "}"), encodeURIComponent(String(requestParameters['submissionId'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PaginatedSubmissionFieldValueListFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Retrieve a list of all field values associated with a specific submission.
     * List all field values for a submission
     */
    FormsApi.prototype.formsV1FormsSubmissionsFieldResponseList = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.formsV1FormsSubmissionsFieldResponseListRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update specific fields of an existing field value without affecting others.
     * Partially update a field value
     */
    FormsApi.prototype.formsV1FormsSubmissionsFieldResponsePartialUpdateRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['fieldId'] == null) {
                            throw new runtime.RequiredError('fieldId', 'Required parameter "fieldId" was null or undefined when calling formsV1FormsSubmissionsFieldResponsePartialUpdate().');
                        }
                        if (requestParameters['formId'] == null) {
                            throw new runtime.RequiredError('formId', 'Required parameter "formId" was null or undefined when calling formsV1FormsSubmissionsFieldResponsePartialUpdate().');
                        }
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling formsV1FormsSubmissionsFieldResponsePartialUpdate().');
                        }
                        if (requestParameters['submissionId'] == null) {
                            throw new runtime.RequiredError('submissionId', 'Required parameter "submissionId" was null or undefined when calling formsV1FormsSubmissionsFieldResponsePartialUpdate().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling formsV1FormsSubmissionsFieldResponsePartialUpdate().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/t/{tenant_ref}/forms/v1/forms/{form_id}/submissions/{submission_id}/field/{field_id}/response/{id}/";
                        urlPath = urlPath.replace("{".concat("field_id", "}"), encodeURIComponent(String(requestParameters['fieldId'])));
                        urlPath = urlPath.replace("{".concat("form_id", "}"), encodeURIComponent(String(requestParameters['formId'])));
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("submission_id", "}"), encodeURIComponent(String(requestParameters['submissionId'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'PATCH',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.PatchedSubmissionFieldValueToJSON)(requestParameters['patchedSubmissionFieldValue']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.SubmissionFieldValueFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Update specific fields of an existing field value without affecting others.
     * Partially update a field value
     */
    FormsApi.prototype.formsV1FormsSubmissionsFieldResponsePartialUpdate = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.formsV1FormsSubmissionsFieldResponsePartialUpdateRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get detailed information about a specific field value by its ID.
     * Retrieve a specific field value
     */
    FormsApi.prototype.formsV1FormsSubmissionsFieldResponseRetrieveRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['fieldId'] == null) {
                            throw new runtime.RequiredError('fieldId', 'Required parameter "fieldId" was null or undefined when calling formsV1FormsSubmissionsFieldResponseRetrieve().');
                        }
                        if (requestParameters['formId'] == null) {
                            throw new runtime.RequiredError('formId', 'Required parameter "formId" was null or undefined when calling formsV1FormsSubmissionsFieldResponseRetrieve().');
                        }
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling formsV1FormsSubmissionsFieldResponseRetrieve().');
                        }
                        if (requestParameters['submissionId'] == null) {
                            throw new runtime.RequiredError('submissionId', 'Required parameter "submissionId" was null or undefined when calling formsV1FormsSubmissionsFieldResponseRetrieve().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling formsV1FormsSubmissionsFieldResponseRetrieve().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/t/{tenant_ref}/forms/v1/forms/{form_id}/submissions/{submission_id}/field/{field_id}/response/{id}/";
                        urlPath = urlPath.replace("{".concat("field_id", "}"), encodeURIComponent(String(requestParameters['fieldId'])));
                        urlPath = urlPath.replace("{".concat("form_id", "}"), encodeURIComponent(String(requestParameters['formId'])));
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("submission_id", "}"), encodeURIComponent(String(requestParameters['submissionId'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.SubmissionFieldValueFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get detailed information about a specific field value by its ID.
     * Retrieve a specific field value
     */
    FormsApi.prototype.formsV1FormsSubmissionsFieldResponseRetrieve = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.formsV1FormsSubmissionsFieldResponseRetrieveRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Modify the details of an existing field value by its ID.
     * Update an existing field value
     */
    FormsApi.prototype.formsV1FormsSubmissionsFieldResponseUpdateRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['fieldId'] == null) {
                            throw new runtime.RequiredError('fieldId', 'Required parameter "fieldId" was null or undefined when calling formsV1FormsSubmissionsFieldResponseUpdate().');
                        }
                        if (requestParameters['formId'] == null) {
                            throw new runtime.RequiredError('formId', 'Required parameter "formId" was null or undefined when calling formsV1FormsSubmissionsFieldResponseUpdate().');
                        }
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling formsV1FormsSubmissionsFieldResponseUpdate().');
                        }
                        if (requestParameters['submissionId'] == null) {
                            throw new runtime.RequiredError('submissionId', 'Required parameter "submissionId" was null or undefined when calling formsV1FormsSubmissionsFieldResponseUpdate().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling formsV1FormsSubmissionsFieldResponseUpdate().');
                        }
                        if (requestParameters['submissionFieldValue'] == null) {
                            throw new runtime.RequiredError('submissionFieldValue', 'Required parameter "submissionFieldValue" was null or undefined when calling formsV1FormsSubmissionsFieldResponseUpdate().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/t/{tenant_ref}/forms/v1/forms/{form_id}/submissions/{submission_id}/field/{field_id}/response/{id}/";
                        urlPath = urlPath.replace("{".concat("field_id", "}"), encodeURIComponent(String(requestParameters['fieldId'])));
                        urlPath = urlPath.replace("{".concat("form_id", "}"), encodeURIComponent(String(requestParameters['formId'])));
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("submission_id", "}"), encodeURIComponent(String(requestParameters['submissionId'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.SubmissionFieldValueToJSON)(requestParameters['submissionFieldValue']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.SubmissionFieldValueFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Modify the details of an existing field value by its ID.
     * Update an existing field value
     */
    FormsApi.prototype.formsV1FormsSubmissionsFieldResponseUpdate = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.formsV1FormsSubmissionsFieldResponseUpdateRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Retrieve a list of all submissions associated with a specific form.
     * List all submissions for a form
     */
    FormsApi.prototype.formsV1FormsSubmissionsListRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['formId'] == null) {
                            throw new runtime.RequiredError('formId', 'Required parameter "formId" was null or undefined when calling formsV1FormsSubmissionsList().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling formsV1FormsSubmissionsList().');
                        }
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['pageSize'] != null) {
                            queryParameters['page_size'] = requestParameters['pageSize'];
                        }
                        headerParameters = {};
                        urlPath = "/api/t/{tenant_ref}/forms/v1/forms/{form_id}/submissions/";
                        urlPath = urlPath.replace("{".concat("form_id", "}"), encodeURIComponent(String(requestParameters['formId'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PaginatedSubmissionListFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Retrieve a list of all submissions associated with a specific form.
     * List all submissions for a form
     */
    FormsApi.prototype.formsV1FormsSubmissionsList = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.formsV1FormsSubmissionsListRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update specific fields of an existing submission without affecting others.
     * Partially update a submission
     */
    FormsApi.prototype.formsV1FormsSubmissionsPartialUpdateRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['formId'] == null) {
                            throw new runtime.RequiredError('formId', 'Required parameter "formId" was null or undefined when calling formsV1FormsSubmissionsPartialUpdate().');
                        }
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling formsV1FormsSubmissionsPartialUpdate().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling formsV1FormsSubmissionsPartialUpdate().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/t/{tenant_ref}/forms/v1/forms/{form_id}/submissions/{id}/";
                        urlPath = urlPath.replace("{".concat("form_id", "}"), encodeURIComponent(String(requestParameters['formId'])));
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'PATCH',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.PatchedSubmissionToJSON)(requestParameters['patchedSubmission']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.SubmissionFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Update specific fields of an existing submission without affecting others.
     * Partially update a submission
     */
    FormsApi.prototype.formsV1FormsSubmissionsPartialUpdate = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.formsV1FormsSubmissionsPartialUpdateRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get detailed information about a specific submission by its ID.
     * Retrieve a specific submission
     */
    FormsApi.prototype.formsV1FormsSubmissionsRetrieveRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['formId'] == null) {
                            throw new runtime.RequiredError('formId', 'Required parameter "formId" was null or undefined when calling formsV1FormsSubmissionsRetrieve().');
                        }
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling formsV1FormsSubmissionsRetrieve().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling formsV1FormsSubmissionsRetrieve().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/t/{tenant_ref}/forms/v1/forms/{form_id}/submissions/{id}/";
                        urlPath = urlPath.replace("{".concat("form_id", "}"), encodeURIComponent(String(requestParameters['formId'])));
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.SubmissionFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get detailed information about a specific submission by its ID.
     * Retrieve a specific submission
     */
    FormsApi.prototype.formsV1FormsSubmissionsRetrieve = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.formsV1FormsSubmissionsRetrieveRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Modify the details of an existing submission by its ID.
     * Update an existing submission
     */
    FormsApi.prototype.formsV1FormsSubmissionsUpdateRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['formId'] == null) {
                            throw new runtime.RequiredError('formId', 'Required parameter "formId" was null or undefined when calling formsV1FormsSubmissionsUpdate().');
                        }
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling formsV1FormsSubmissionsUpdate().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling formsV1FormsSubmissionsUpdate().');
                        }
                        if (requestParameters['submission'] == null) {
                            throw new runtime.RequiredError('submission', 'Required parameter "submission" was null or undefined when calling formsV1FormsSubmissionsUpdate().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/t/{tenant_ref}/forms/v1/forms/{form_id}/submissions/{id}/";
                        urlPath = urlPath.replace("{".concat("form_id", "}"), encodeURIComponent(String(requestParameters['formId'])));
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.SubmissionToJSON)(requestParameters['submission']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.SubmissionFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Modify the details of an existing submission by its ID.
     * Update an existing submission
     */
    FormsApi.prototype.formsV1FormsSubmissionsUpdate = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.formsV1FormsSubmissionsUpdateRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Modify the details of an existing form by its ID.
     * Update an existing form
     */
    FormsApi.prototype.formsV1FormsUpdateRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling formsV1FormsUpdate().');
                        }
                        if (requestParameters['tenantRef'] == null) {
                            throw new runtime.RequiredError('tenantRef', 'Required parameter "tenantRef" was null or undefined when calling formsV1FormsUpdate().');
                        }
                        if (requestParameters['form'] == null) {
                            throw new runtime.RequiredError('form', 'Required parameter "form" was null or undefined when calling formsV1FormsUpdate().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/t/{tenant_ref}/forms/v1/forms/{id}/";
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        urlPath = urlPath.replace("{".concat("tenant_ref", "}"), encodeURIComponent(String(requestParameters['tenantRef'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.FormToJSON)(requestParameters['form']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.FormFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Modify the details of an existing form by its ID.
     * Update an existing form
     */
    FormsApi.prototype.formsV1FormsUpdate = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.formsV1FormsUpdateRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return FormsApi;
}(runtime.BaseAPI));
exports.FormsApi = FormsApi;
